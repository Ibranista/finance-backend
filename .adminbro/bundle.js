(function (React$1, adminBro, designSystem, Select, styled, reactRouter, iconsReact) {
  'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var React__default = /*#__PURE__*/_interopDefaultLegacy(React$1);
  var Select__default = /*#__PURE__*/_interopDefaultLegacy(Select);
  var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);

  function _iterableToArrayLimit(arr, i) {
    var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
    if (null != _i) {
      var _s,
        _e,
        _x,
        _r,
        _arr = [],
        _n = !0,
        _d = !1;
      try {
        if (_x = (_i = _i.call(arr)).next, 0 === i) {
          if (Object(_i) !== _i) return;
          _n = !1;
        } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);
      } catch (err) {
        _d = !0, _e = err;
      } finally {
        try {
          if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return;
        } finally {
          if (_d) throw _e;
        }
      }
      return _arr;
    }
  }
  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _regeneratorRuntime() {
    _regeneratorRuntime = function () {
      return exports;
    };
    var exports = {},
      Op = Object.prototype,
      hasOwn = Op.hasOwnProperty,
      defineProperty = Object.defineProperty || function (obj, key, desc) {
        obj[key] = desc.value;
      },
      $Symbol = "function" == typeof Symbol ? Symbol : {},
      iteratorSymbol = $Symbol.iterator || "@@iterator",
      asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
      toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
    function define(obj, key, value) {
      return Object.defineProperty(obj, key, {
        value: value,
        enumerable: !0,
        configurable: !0,
        writable: !0
      }), obj[key];
    }
    try {
      define({}, "");
    } catch (err) {
      define = function (obj, key, value) {
        return obj[key] = value;
      };
    }
    function wrap(innerFn, outerFn, self, tryLocsList) {
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
        generator = Object.create(protoGenerator.prototype),
        context = new Context(tryLocsList || []);
      return defineProperty(generator, "_invoke", {
        value: makeInvokeMethod(innerFn, self, context)
      }), generator;
    }
    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg)
        };
      } catch (err) {
        return {
          type: "throw",
          arg: err
        };
      }
    }
    exports.wrap = wrap;
    var ContinueSentinel = {};
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}
    var IteratorPrototype = {};
    define(IteratorPrototype, iteratorSymbol, function () {
      return this;
    });
    var getProto = Object.getPrototypeOf,
      NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        define(prototype, method, function (arg) {
          return this._invoke(method, arg);
        });
      });
    }
    function AsyncIterator(generator, PromiseImpl) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);
        if ("throw" !== record.type) {
          var result = record.arg,
            value = result.value;
          return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
            invoke("next", value, resolve, reject);
          }, function (err) {
            invoke("throw", err, resolve, reject);
          }) : PromiseImpl.resolve(value).then(function (unwrapped) {
            result.value = unwrapped, resolve(result);
          }, function (error) {
            return invoke("throw", error, resolve, reject);
          });
        }
        reject(record.arg);
      }
      var previousPromise;
      defineProperty(this, "_invoke", {
        value: function (method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }
          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        }
      });
    }
    function makeInvokeMethod(innerFn, self, context) {
      var state = "suspendedStart";
      return function (method, arg) {
        if ("executing" === state) throw new Error("Generator is already running");
        if ("completed" === state) {
          if ("throw" === method) throw arg;
          return doneResult();
        }
        for (context.method = method, context.arg = arg;;) {
          var delegate = context.delegate;
          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);
            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }
          if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
            if ("suspendedStart" === state) throw state = "completed", context.arg;
            context.dispatchException(context.arg);
          } else "return" === context.method && context.abrupt("return", context.arg);
          state = "executing";
          var record = tryCatch(innerFn, self, context);
          if ("normal" === record.type) {
            if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
            return {
              value: record.arg,
              done: context.done
            };
          }
          "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
        }
      };
    }
    function maybeInvokeDelegate(delegate, context) {
      var methodName = context.method,
        method = delegate.iterator[methodName];
      if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel;
      var record = tryCatch(method, delegate.iterator, context.arg);
      if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
      var info = record.arg;
      return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
    }
    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0]
      };
      1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
    }
    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal", delete record.arg, entry.completion = record;
    }
    function Context(tryLocsList) {
      this.tryEntries = [{
        tryLoc: "root"
      }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
    }
    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];
        if (iteratorMethod) return iteratorMethod.call(iterable);
        if ("function" == typeof iterable.next) return iterable;
        if (!isNaN(iterable.length)) {
          var i = -1,
            next = function next() {
              for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
              return next.value = undefined, next.done = !0, next;
            };
          return next.next = next;
        }
      }
      return {
        next: doneResult
      };
    }
    function doneResult() {
      return {
        value: undefined,
        done: !0
      };
    }
    return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", {
      value: GeneratorFunctionPrototype,
      configurable: !0
    }), defineProperty(GeneratorFunctionPrototype, "constructor", {
      value: GeneratorFunction,
      configurable: !0
    }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
      var ctor = "function" == typeof genFun && genFun.constructor;
      return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
    }, exports.mark = function (genFun) {
      return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
    }, exports.awrap = function (arg) {
      return {
        __await: arg
      };
    }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
      return this;
    }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
      void 0 === PromiseImpl && (PromiseImpl = Promise);
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
      return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
      return this;
    }), define(Gp, "toString", function () {
      return "[object Generator]";
    }), exports.keys = function (val) {
      var object = Object(val),
        keys = [];
      for (var key in object) keys.push(key);
      return keys.reverse(), function next() {
        for (; keys.length;) {
          var key = keys.pop();
          if (key in object) return next.value = key, next.done = !1, next;
        }
        return next.done = !0, next;
      };
    }, exports.values = values, Context.prototype = {
      constructor: Context,
      reset: function (skipTempReset) {
        if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
      },
      stop: function () {
        this.done = !0;
        var rootRecord = this.tryEntries[0].completion;
        if ("throw" === rootRecord.type) throw rootRecord.arg;
        return this.rval;
      },
      dispatchException: function (exception) {
        if (this.done) throw exception;
        var context = this;
        function handle(loc, caught) {
          return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
        }
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i],
            record = entry.completion;
          if ("root" === entry.tryLoc) return handle("end");
          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc"),
              hasFinally = hasOwn.call(entry, "finallyLoc");
            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            } else {
              if (!hasFinally) throw new Error("try statement without catch or finally");
              if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
            }
          }
        }
      },
      abrupt: function (type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }
        finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
        var record = finallyEntry ? finallyEntry.completion : {};
        return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
      },
      complete: function (record, afterLoc) {
        if ("throw" === record.type) throw record.arg;
        return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
      },
      finish: function (finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
        }
      },
      catch: function (tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;
            if ("throw" === record.type) {
              var thrown = record.arg;
              resetTryEntry(entry);
            }
            return thrown;
          }
        }
        throw new Error("illegal catch attempt");
      },
      delegateYield: function (iterable, resultName, nextLoc) {
        return this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
      }
    }, exports;
  }
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }
    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }
  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
        args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);
        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }
        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }
        _next(undefined);
      });
    };
  }
  function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }
    return target;
  }
  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _taggedTemplateLiteral(strings, raw) {
    if (!raw) {
      raw = strings.slice(0);
    }
    return Object.freeze(Object.defineProperties(strings, {
      raw: {
        value: Object.freeze(raw)
      }
    }));
  }
  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }
  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }
  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }
  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }
  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }
  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
    return arr2;
  }
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }

  var optionConstants = {
    DAYLY: 'dayly',
    WEEKLY: 'weekly',
    MONTHLY: 'monthly',
    QUARTERLY: 'quarterly',
    SEMI_ANNUALLY: 'semi-annually',
    YEARLY: 'yearly'
  };
  var cronTimeTriggerOptions = [{
    key: 'Once a day',
    value: optionConstants.DAYLY
  }, {
    key: 'Once a week',
    value: optionConstants.WEEKLY
  }, {
    key: 'Once a month',
    value: optionConstants.MONTHLY
  }, {
    key: 'Once a quarter',
    value: optionConstants.QUARTERLY
  }, {
    key: 'Once semi-annually',
    value: optionConstants.SEMI_ANNUALLY
  }, {
    key: 'Once a year',
    value: optionConstants.YEARLY
  }];
  var onceWeekSelectOption = [{
    key: 'Sunday',
    value: '0'
  }, {
    key: 'Monday',
    value: '1'
  }, {
    key: 'Tuesday',
    value: '2'
  }, {
    key: 'Wednesday',
    value: '3'
  }, {
    key: 'Thursday',
    value: '4'
  }, {
    key: 'Friday',
    value: '5'
  }, {
    key: 'Saturday',
    value: '6'
  }];
  var Selector = function Selector(_ref) {
    var otherProps = _ref.otherProps,
      options = _ref.options,
      defaultValue = _ref.defaultValue,
      onChange = _ref.onChange;
    return /*#__PURE__*/React__default["default"].createElement("select", _extends({
      style: {
        width: '120px',
        height: '20px !important',
        padding: '5px'
      },
      onChange: onChange,
      defaultValue: defaultValue
    }, otherProps), options.map(function (option) {
      return /*#__PURE__*/React__default["default"].createElement("option", {
        key: option.key,
        value: option.value,
        style: {
          width: '120px',
          height: '20px !important'
        }
      }, ' ', option.key);
    }));
  };
  var MultiSelectorRow = function MultiSelectorRow(_ref2) {
    var initialValue = _ref2.initialValue,
      onChange = _ref2.onChange,
      onRemove = _ref2.onRemove;
    var _useState = React$1.useState(initialValue),
      _useState2 = _slicedToArray(_useState, 2),
      item = _useState2[0],
      setItem = _useState2[1];
    React$1.useEffect(function () {
      onChange(item);
    }, [item]);
    return /*#__PURE__*/React__default["default"].createElement(designSystem.InputGroup, null, /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
      value: item,
      mr: 5,
      onChange: function onChange(e) {
        return setItem(e.target.value);
      }
    }), /*#__PURE__*/React__default["default"].createElement(designSystem.Button, {
      onClick: function onClick() {
        return onRemove(item);
      },
      rounded: true,
      size: "icon",
      variant: "danger",
      ml: 5
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Icon, {
      icon: "Delete"
    })));
  };
  var MultiSelector = function MultiSelector(_ref3) {
    var title = _ref3.title,
      initialValue = _ref3.initialValue,
      onChange = _ref3.onChange,
      onSave = _ref3.onSave,
      isLoading = _ref3.isLoading;
    var _useState3 = React$1.useState(initialValue),
      _useState4 = _slicedToArray(_useState3, 2),
      items = _useState4[0],
      setItems = _useState4[1];
    var removeItem = function removeItem(item) {
      setItems(items.filter(function (i) {
        return i !== item;
      }));
    };
    var handleAddNewItem = function handleAddNewItem() {
      setItems([].concat(_toConsumableArray(items), ['']));
    };
    var handleChange = function handleChange(item, index) {
      var newItems = _toConsumableArray(items);
      newItems[index] = item;
      setItems(newItems);
    };
    React$1.useEffect(function () {
      onChange(items);
    }, [items]);
    React$1.useEffect(function () {
      if (!items.length) {
        setItems(initialValue);
      }
    }, [initialValue]);
    if (isLoading) console.log('Rerendering MultiSelector with isLoading true');
    return isLoading ? /*#__PURE__*/React__default["default"].createElement(designSystem.Loader, null) : /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      variant: "white"
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Header.H5, null, title)), /*#__PURE__*/React__default["default"].createElement(designSystem.Section, null, /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, null, Array.isArray(items) && items.map(function (item, index) {
      return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, "[", index + 1, "]"), /*#__PURE__*/React__default["default"].createElement(MultiSelectorRow, {
        initialValue: item,
        onChange: function onChange(updatedValue) {
          return handleChange(updatedValue, index);
        },
        onRemove: removeItem
      }), /*#__PURE__*/React__default["default"].createElement("br", null));
    })), /*#__PURE__*/React__default["default"].createElement(designSystem.Box, null, /*#__PURE__*/React__default["default"].createElement(designSystem.Button, {
      onClick: handleAddNewItem,
      style: {
        borderRadius: '9999px'
      }
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Icon, {
      icon: "Add"
    }), " Add New Item"), /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      flex: true,
      alignItems: "flex-end",
      justifyContent: "flex-end",
      height: 100,
      width: "100%"
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Button, {
      type: "submit",
      onClick: onSave
    }, "Save")))));
  };

  var CronjobSetting = function CronjobSetting(_ref) {
    var _React$createElement;
    var id = _ref.id,
      title = _ref.title,
      isLoading = _ref.isLoading,
      changeHandler = _ref.changeHandler,
      enable = _ref.enable,
      enableLabel = _ref.enableLabel,
      cronJob = _ref.cronJob,
      frequencyChangeHandler = _ref.frequencyChangeHandler,
      dayChangeHandler = _ref.dayChangeHandler,
      dateChangeHandler = _ref.dateChangeHandler,
      hourChangeHandler = _ref.hourChangeHandler,
      cronTimeFilter = _ref.cronTimeFilter,
      onSave = _ref.onSave;
    var filteredCronTime = cronTimeFilter instanceof Function ? cronTimeTriggerOptions.filter(cronTimeFilter) : cronTimeTriggerOptions;
    return /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      variant: "white",
      mt: 3
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Header.H5, null, title), /*#__PURE__*/React__default["default"].createElement(designSystem.Text, {
      color: "grey"
    }, "Please make sure to select all fields properly"), isLoading ? /*#__PURE__*/React__default["default"].createElement(designSystem.Loader, null) : /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      flex: true,
      flexDirection: "row"
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      flexGrow: 0
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      p: "xl"
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.CheckBox, {
      type: 'checkbox',
      id: 'checkbox1',
      onChange: changeHandler,
      checked: enable
    }), /*#__PURE__*/React__default["default"].createElement(designSystem.Label, {
      inline: true,
      ml: "default"
    }, enableLabel))), /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      flexGrow: 1,
      py: '20px !important',
      px: '20px !important'
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      flex: true,
      flexDirection: "row"
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      px: '10px !important'
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, "Select cron job frequency"), /*#__PURE__*/React__default["default"].createElement(Selector, {
      options: filteredCronTime,
      otherProps: {
        disabled: !enable,
        value: cronJob.frequency || '',
        name: id
      },
      onChange: frequencyChangeHandler
    })), enable && cronJob && cronJob.frequency && cronJob.frequency === optionConstants.WEEKLY && /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      px: '10px !important'
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, "Select a day for cronjob"), /*#__PURE__*/React__default["default"].createElement(Selector, {
      otherProps: {
        disabled: !enable,
        value: cronJob.day || '',
        name: id
      },
      options: onceWeekSelectOption,
      disabled: !cronJob.frequency,
      onChange: dayChangeHandler
    })), /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      px: '10px !important'
    }, enable && cronJob && cronJob.frequency && cronJob.frequency === optionConstants.MONTHLY && /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, "Select a day 1-31"), /*#__PURE__*/React__default["default"].createElement("input", (_React$createElement = {
      name: id,
      style: {
        width: '100px',
        height: '20px',
        padding: '2px',
        textAlign: 'center'
      },
      disabled: !enable,
      value: cronJob.date || ''
    }, _defineProperty(_React$createElement, "disabled", !cronJob.frequency), _defineProperty(_React$createElement, "type", "number"), _defineProperty(_React$createElement, "min", 1), _defineProperty(_React$createElement, "max", 31), _defineProperty(_React$createElement, "onChange", dateChangeHandler), _React$createElement)))), enable && cronJob && cronJob.frequency && /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      px: '10px !important'
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, "Select a time 0-23"), /*#__PURE__*/React__default["default"].createElement("input", {
      name: id,
      style: {
        width: '100px',
        height: '20px',
        padding: '2px',
        textAlign: 'center'
      },
      disabled: !enable,
      value: cronJob.hour || '',
      type: "number",
      min: 0,
      max: 23,
      onChange: hourChangeHandler
    })))), /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      py: '40px !important',
      ml: 5
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Button, {
      onClick: onSave
    }, " Save"))));
  };

  var resources = {
    ApplicationSettings: 'ApplicationSettings',
    ContentLength: 'ContentLength',
    Groups: 'Groups',
    Links: 'Links',
    Notifications: 'Notifications',
    LinkMarket: 'LinkMarket',
    OwnedWebstes: 'OwnedWebsites',
    Permissions: 'Permissions',
    Privileges: 'Privileges',
    Resources: 'Resources',
    Roles: 'Roles',
    Tags: 'Tags',
    User: 'User',
    Keywords: 'Keywords',
    ThirdPartyApiSettings: 'ThirdPartyApiSettings'
  };

  var PaymentInput = function PaymentInput(_ref) {
    var defaultValue = _ref.defaultValue,
      index = _ref.index,
      loading = _ref.loading,
      _ref$step = _ref.step,
      step = _ref$step === void 0 ? 0.01 : _ref$step,
      subTitle = _ref.subTitle,
      title = _ref.title,
      value = _ref.value,
      onChange = _ref.onChange,
      onSave = _ref.onSave;
    return /*#__PURE__*/React__default["default"].createElement(designSystem.Box, null, /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      marginTop: "".concat(index ? 3 : 0, "rem"),
      marginBottom: "10px"
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Header.H5, null, title), /*#__PURE__*/React__default["default"].createElement(designSystem.Text, {
      color: "grey"
    }, subTitle)), loading ? /*#__PURE__*/React__default["default"].createElement(designSystem.Loader, null) : /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      flex: true,
      flexDirection: "row",
      justifyContent: "space-between"
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
      type: "number",
      step: step,
      isLoading: loading,
      defaultValue: defaultValue,
      value: value,
      onChange: onChange
    }), /*#__PURE__*/React__default["default"].createElement(designSystem.Button, {
      onClick: onSave
    }, " Save")));
  };
  var api = new adminBro.ApiClient();
  var ApplicationSettingsComponent = function ApplicationSettingsComponent() {
    var _useState = React$1.useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      recordId = _useState2[0],
      setRecordId = _useState2[1];
    var _useState3 = React$1.useState({
        ahref: false,
        field: false,
        sitemap: false,
        backlink: false,
        keywordScraper: false,
        renewal: false,
        renewalReminder: false
      }),
      _useState4 = _slicedToArray(_useState3, 2),
      settingCheckerState = _useState4[0],
      setSettingCheckerState = _useState4[1];
    var _useState5 = React$1.useState({
        ahref: false,
        filed: false,
        sitemap: false,
        backlink: false,
        keywordScraper: false,
        priorityPages: false,
        excludeKeywords: false,
        excludeTags: false,
        renewal: false,
        defaultMinTopup: false,
        stripeFlatFee: false,
        stripePercentageFee: false,
        wireTransferPaymentDuration: false,
        maltaTaxRate: false
      }),
      _useState6 = _slicedToArray(_useState5, 2),
      loading = _useState6[0],
      setLoading = _useState6[1];
    var _useState7 = React$1.useState({
        frequency: optionConstants.MONTHLY,
        date: '1',
        day: '',
        hour: '3'
      }),
      _useState8 = _slicedToArray(_useState7, 2),
      ahrefCronJob = _useState8[0],
      setAhrefCronJob = _useState8[1];
    var _useState9 = React$1.useState({
        frequency: optionConstants.MONTHLY,
        date: '1',
        day: '',
        hour: '3'
      }),
      _useState10 = _slicedToArray(_useState9, 2),
      fieldCheckerCronJob = _useState10[0],
      setFieldCheckerCronJob = _useState10[1];
    var _useState11 = React$1.useState({
        frequency: optionConstants.MONTHLY,
        date: '1',
        day: '',
        hour: '3'
      }),
      _useState12 = _slicedToArray(_useState11, 2),
      sitemapCheckerCronJob = _useState12[0],
      setSitemapCheckerCronJob = _useState12[1];
    var _useState13 = React$1.useState({
        frequency: optionConstants.MONTHLY,
        date: '1',
        day: '',
        hour: '3'
      }),
      _useState14 = _slicedToArray(_useState13, 2),
      backlinkFetcherCronJob = _useState14[0],
      setBacklinkFetcherCronJob = _useState14[1];
    var _useState15 = React$1.useState({
        frequency: optionConstants.MONTHLY,
        date: '1',
        day: '',
        hour: '3'
      }),
      _useState16 = _slicedToArray(_useState15, 2),
      renewalCronJob = _useState16[0],
      setRenewalCronJob = _useState16[1];
    var _useState17 = React$1.useState({
        frequency: optionConstants.QUARTERLY,
        date: '1',
        day: '',
        hour: '3',
        month: '*/3'
      }),
      _useState18 = _slicedToArray(_useState17, 2),
      keywordScraperCronJob = _useState18[0],
      setKeywordScraperCronJob = _useState18[1];
    var _useState19 = React$1.useState({
        priorityPages: [],
        excludeTags: [],
        excludeKeywords: [],
        topRelatedKeywordsLimit: 100,
        keywordScraperCrawlDepth: 2000,
        keywordsToScrapePerSite: 25,
        keywordScrapperConcurrentRequestsLimit: 8
      }),
      _useState20 = _slicedToArray(_useState19, 2),
      keywordScraperSettings = _useState20[0],
      setKeywordScraperSettings = _useState20[1];
    var _useState21 = React$1.useState({
        DR: 0,
        Traffic: 0,
        priceOnIndexPage: 0,
        pricePerArticlePage: 0,
        pricePerSubPage: 0,
        priceArticlePermanent: 0
      }),
      _useState22 = _slicedToArray(_useState21, 2),
      linkSuggestionErrorMargins = _useState22[0],
      setLinkSuggestionErrorMargins = _useState22[1];
    var _useState23 = React$1.useState({
        defaultMinTopup: null,
        stripeFlatFee: null,
        stripePercentageFee: null,
        wireTransferPaymentDuration: null,
        maltaTaxRate: null
      }),
      _useState24 = _slicedToArray(_useState23, 2),
      paymentSettings = _useState24[0],
      setPaymentSettings = _useState24[1];
    var _useState25 = React$1.useState(0),
      _useState26 = _slicedToArray(_useState25, 2),
      linkSuggestionSpacingFactor = _useState26[0],
      setLinkSuggestionSpacingFactor = _useState26[1];
    var _useState27 = React$1.useState(0),
      _useState28 = _slicedToArray(_useState27, 2),
      linkSuggestionDropFeedTimeSpan = _useState28[0],
      setLinkSuggestionDropFeedTimeSpan = _useState28[1];
    var _useState29 = React$1.useState(0),
      _useState30 = _slicedToArray(_useState29, 2),
      ignoredSuggestionQuarantineDays = _useState30[0],
      setIgnoredSuggestionQuarantineDays = _useState30[1];
    var _useState31 = React$1.useState(0),
      _useState32 = _slicedToArray(_useState31, 2),
      declineQuarantineDays = _useState32[0],
      setDeclineQuarantineDays = _useState32[1];
    var _useState33 = React$1.useState({
        showUpcomingRenewalUntil: 11,
        daysRemainingBeforeEndDateForAutoRenewal: 30
      }),
      _useState34 = _slicedToArray(_useState33, 2),
      renewalSettings = _useState34[0],
      setRenewalSettings = _useState34[1];
    var renewalSettingLabel = ['Show Upcoming Renewals Until (in month)', 'Auto Renewal Link Before EndDate (in days)'];
    React$1.useEffect(function () {
      api.resourceAction({
        resourceId: resources.ApplicationSettings,
        actionName: 'list'
      }).then(function (results) {
        if (results.data.records && Array.isArray(results.data.records) && results.data.records.length > 0) {
          var cronjobState = results.data.records[0].params;
          setRecordId(cronjobState._id);
          setSettingCheckerState(_objectSpread2(_objectSpread2({}, settingCheckerState), {}, {
            ahref: cronjobState.ahrefCronjobEnabled,
            field: cronjobState.filedCronjobEnabled,
            sitemap: cronjobState.sitemapCronjobEnabled,
            backlink: cronjobState.backlinkCronjobEnabled,
            keywordScraper: cronjobState.keywordScraperCronjobEnabled,
            renewal: cronjobState.autoRenewalCronjobEnabled,
            renewalReminder: cronjobState.renewalReminderCronjobEnabled
          }));
          setAhrefCronJob(_objectSpread2(_objectSpread2({}, ahrefCronJob), {}, {
            frequency: cronjobState.ahrefFrequency || optionConstants.MONTHLY,
            date: cronjobState.ahrefDate || '1',
            day: cronjobState.ahrefDay || '',
            hour: cronjobState.ahrefHour || '3'
          }));
          setFieldCheckerCronJob(_objectSpread2(_objectSpread2({}, fieldCheckerCronJob), {}, {
            frequency: cronjobState.fieldFrequency || optionConstants.MONTHLY,
            date: cronjobState.fieldDate || '1',
            day: cronjobState.fieldDay || '',
            hour: cronjobState.fieldHour || '3'
          }));
          setSitemapCheckerCronJob(_objectSpread2(_objectSpread2({}, sitemapCheckerCronJob), {}, {
            frequency: cronjobState.sitemapFrequency || optionConstants.MONTHLY,
            date: cronjobState.sitemapDate || '1',
            day: cronjobState.sitemapDay || '',
            hour: cronjobState.sitemapHour || '3'
          }));
          setBacklinkFetcherCronJob(_objectSpread2(_objectSpread2({}, backlinkFetcherCronJob), {}, {
            frequency: cronjobState.backlinkFrequency || optionConstants.MONTHLY,
            date: cronjobState.backlinkDate || '1',
            day: cronjobState.backlinkDay || '',
            hour: cronjobState.backlinkHour || '3'
          }));
          setRenewalCronJob(_objectSpread2(_objectSpread2({}, renewalCronJob), {}, {
            frequency: cronjobState.autoRenewalFrequency || optionConstants.MONTHLY,
            date: cronjobState.autoRenewalDate || '1',
            day: cronjobState.autoRenewalDay || '',
            hour: cronjobState.autoRenewalHour || '3'
          }));
          setRenewalSettings(_objectSpread2(_objectSpread2({}, renewalSettings), {}, {
            showUpcomingRenewalUntil: cronjobState.showUpcomingRenewalUntil,
            daysRemainingBeforeEndDateForAutoRenewal: cronjobState.daysRemainingBeforeEndDateForAutoRenewal
          }));
          setKeywordScraperCronJob(_objectSpread2(_objectSpread2({}, keywordScraperCronJob), {}, {
            frequency: cronjobState.keywordScraperFrequency || optionConstants.QUARTERLY,
            date: cronjobState.keywordScraperDate || '1',
            day: cronjobState.keywordScraperDay || '',
            hour: cronjobState.keywordScraperHour || '3',
            month: cronjobState.keywordScraperMonth || '*/3'
          }));
          setKeywordScraperSettings(_objectSpread2(_objectSpread2({}, keywordScraperSettings), {}, {
            priorityPages: cronjobState.keywordScraperPriorityPages || [],
            excludeTags: cronjobState.keywordScraperExcludeTags || [],
            excludeKeywords: cronjobState.keywordScraperExcludeKeywords || [],
            topRelatedKeywordsLimit: cronjobState.topRelatedKeywordsLimit || 100,
            keywordScraperCrawlDepth: cronjobState.keywordScraperCrawlDepth || 2000,
            keywordsToScrapePerSite: cronjobState.keywordsToScrapePerSite || 25,
            keywordScrapperConcurrentRequestsLimit: cronjobState.keywordScrapperConcurrentRequestsLimit || 8
          }));
          setLinkSuggestionErrorMargins({
            DR: cronjobState.linkSuggestionErrorMargins && cronjobState.linkSuggestionErrorMargins.DR || 5,
            Traffic: cronjobState.linkSuggestionErrorMargins && cronjobState.linkSuggestionErrorMargins.Traffic || 500,
            priceOnIndexPage: cronjobState.linkSuggestionErrorMargins && cronjobState.linkSuggestionErrorMargins.priceOnIndexPage || 50,
            pricePerArticlePage: cronjobState.linkSuggestionErrorMargins && cronjobState.linkSuggestionErrorMargins.pricePerArticlePage || 50,
            pricePerSubPage: cronjobState.linkSuggestionErrorMargins && cronjobState.linkSuggestionErrorMargins.pricePerSubPage || 50,
            priceArticlePermanent: cronjobState.linkSuggestionErrorMargins && cronjobState.linkSuggestionErrorMargins.priceArticlePermanent || 50
          });
          setLinkSuggestionSpacingFactor(cronjobState.linkSuggestionSpacingFactor || 0);
          setLinkSuggestionDropFeedTimeSpan(cronjobState.linkSuggestionDropFeedTimeSpan || 0);
          setIgnoredSuggestionQuarantineDays(cronjobState.ignoredSuggestionQuarantineDays || 0);
          setDeclineQuarantineDays(cronjobState.declineQuarantineDays || 0);
          setPaymentSettings({
            defaultMinTopup: cronjobState.defaultMinTopup || 100,
            stripeFlatFee: typeof cronjobState.stripeFlatFee === 'number' ? cronjobState.stripeFlatFee : 0.3,
            stripePercentageFee: typeof cronjobState.stripePercentageFee === 'number' ? cronjobState.stripePercentageFee : 2.9,
            wireTransferPaymentDuration: cronjobState.wireTransferPaymentDuration || 2,
            maltaTaxRate: cronjobState.maltaTaxRate || 18
          });
        }
      })["catch"](function (err) {
        console.log('err', err);
      });
    }, []);
    var onAhrefCronjobSettingSave = function onAhrefCronjobSettingSave() {
      var form = new FormData();
      form.append('ahrefCronjobEnabled', settingCheckerState.ahref);
      form.append('ahrefDate', ahrefCronJob.date);
      form.append('ahrefDay', ahrefCronJob.day);
      form.append('ahrefHour', ahrefCronJob.hour);
      form.append('ahrefFrequency', ahrefCronJob.frequency);
      setLoading(_objectSpread2(_objectSpread2({}, loading), {}, {
        ahref: true
      }));
      api.recordAction({
        resourceId: resources.ApplicationSettings,
        recordId: "".concat(recordId),
        actionName: 'edit',
        data: form
      }).then(function () {
        setLoading(_objectSpread2(_objectSpread2({}, loading), {}, {
          ahref: false
        }));
      })["catch"](function (err) {
        console.log('err', err);
        setLoading(_objectSpread2(_objectSpread2({}, loading), {}, {
          ahref: false
        }));
      });
    };
    var onFieldCronjobSettingSave = function onFieldCronjobSettingSave() {
      var form = new FormData();
      form.append('filedCronjobEnabled', settingCheckerState.field);
      form.append('fieldDate', fieldCheckerCronJob.date);
      form.append('fieldDay', fieldCheckerCronJob.day);
      form.append('fieldHour', fieldCheckerCronJob.hour);
      form.append('fieldFrequency', fieldCheckerCronJob.frequency);
      setLoading(_objectSpread2(_objectSpread2({}, loading), {}, {
        filed: true
      }));
      api.recordAction({
        resourceId: resources.ApplicationSettings,
        recordId: "".concat(recordId),
        actionName: 'edit',
        data: form
      }).then(function () {
        setLoading(_objectSpread2(_objectSpread2({}, loading), {}, {
          filed: false
        }));
      })["catch"](function (err) {
        console.log('err', err);
        setLoading(_objectSpread2(_objectSpread2({}, loading), {}, {
          filed: false
        }));
      });
    };
    var onSitemapjobSettingfSave = function onSitemapjobSettingfSave() {
      var form = new FormData();
      form.append('sitemapCronjobEnabled', settingCheckerState.sitemap);
      form.append('sitemapDay', sitemapCheckerCronJob.day);
      form.append('sitemapDate', sitemapCheckerCronJob.date);
      form.append('sitemapHour', sitemapCheckerCronJob.hour);
      form.append('sitemapFrequency', sitemapCheckerCronJob.frequency);
      setLoading(_objectSpread2(_objectSpread2({}, loading), {}, {
        sitemap: true
      }));
      api.recordAction({
        resourceId: resources.ApplicationSettings,
        recordId: "".concat(recordId),
        actionName: 'edit',
        data: form
      }).then(function () {
        setLoading(_objectSpread2(_objectSpread2({}, loading), {}, {
          sitemap: false
        }));
      })["catch"](function (err) {
        console.log('err', err);
        setLoading(_objectSpread2(_objectSpread2({}, loading), {}, {
          sitemap: false
        }));
      });
    };
    var onBacklinkFetcherJobSave = function onBacklinkFetcherJobSave() {
      var form = new FormData();
      form.append('backlinkCronjobEnabled', settingCheckerState.backlink);
      form.append('backlinkDay', backlinkFetcherCronJob.day);
      form.append('backlinkDate', backlinkFetcherCronJob.date);
      form.append('backlinkHour', backlinkFetcherCronJob.hour);
      form.append('backlinkFrequency', backlinkFetcherCronJob.frequency);
      setLoading(_objectSpread2(_objectSpread2({}, loading), {}, {
        backlink: true
      }));
      api.recordAction({
        resourceId: 'ApplicationSettings',
        recordId: recordId,
        actionName: 'edit',
        data: form
      }).then(function () {
        setLoading(_objectSpread2(_objectSpread2({}, loading), {}, {
          backlink: false
        }));
      })["catch"](function (err) {
        console.log('err', err);
        setLoading(_objectSpread2(_objectSpread2({}, loading), {}, {
          backlink: false
        }));
      });
    };
    var onRenewalCronJobSave = function onRenewalCronJobSave() {
      var form = new FormData();
      form.append('autoRenewalCronjobEnabled', settingCheckerState.renewal);
      form.append('autoRenewalDay', renewalCronJob.day);
      form.append('autoRenewalDate', renewalCronJob.date);
      form.append('autoRenewalHour', renewalCronJob.hour);
      form.append('autoRenewalFrequency', renewalCronJob.frequency);
      form.append('renewalReminderCronjobEnabled', settingCheckerState.renewalReminder);
      setLoading(_objectSpread2(_objectSpread2({}, loading), {}, {
        renewal: true
      }));
      api.recordAction({
        resourceId: 'ApplicationSettings',
        recordId: recordId,
        actionName: 'edit',
        data: form
      }).then(function () {
        setLoading(_objectSpread2(_objectSpread2({}, loading), {}, {
          renewal: false
        }));
      })["catch"](function (err) {
        console.log('err', err);
        setLoading(_objectSpread2(_objectSpread2({}, loading), {}, {
          renewal: false
        }));
      });
    };
    var onKeywordScraperJobSave = function onKeywordScraperJobSave() {
      var form = new FormData();
      form.append('keywordScraperCronjobEnabled', settingCheckerState.keywordScraper);
      form.append('keywordScraperDay', keywordScraperCronJob.day);
      form.append('keywordScraperMonth', keywordScraperCronJob.month);
      form.append('keywordScraperDate', keywordScraperCronJob.date);
      form.append('keywordScraperHour', keywordScraperCronJob.hour);
      form.append('keywordScraperFrequency', keywordScraperCronJob.frequency);
      setLoading(_objectSpread2(_objectSpread2({}, loading), {}, {
        keywordScraper: true
      }));
      api.recordAction({
        resourceId: 'ApplicationSettings',
        recordId: recordId,
        actionName: 'edit',
        data: form
      }).then(function () {
        setLoading(_objectSpread2(_objectSpread2({}, loading), {}, {
          keywordScraper: false
        }));
      })["catch"](function (err) {
        console.log('err', err);
        setLoading(_objectSpread2(_objectSpread2({}, loading), {}, {
          keywordScraper: false
        }));
      });
    };
    var onLinkSuggestionSettingsSave = function onLinkSuggestionSettingsSave() {
      var form = new FormData();
      Object.keys(linkSuggestionErrorMargins).forEach(function (key) {
        form.append("linkSuggestionErrorMargins.".concat(key), linkSuggestionErrorMargins[key]);
      });
      form.append('linkSuggestionSpacingFactor', linkSuggestionSpacingFactor);
      form.append('linkSuggestionDropFeedTimeSpan', linkSuggestionDropFeedTimeSpan);
      form.append('ignoredSuggestionQuarantineDays', ignoredSuggestionQuarantineDays);
      form.append('declineQuarantineDays', declineQuarantineDays);
      setLoading(_objectSpread2(_objectSpread2({}, loading), {}, {
        linkSuggestion: true
      }));
      return api.recordAction({
        resourceId: 'ApplicationSettings',
        recordId: recordId,
        actionName: 'edit',
        data: form
      }).then(function () {
        setLoading(_objectSpread2(_objectSpread2({}, loading), {}, {
          linkSuggestion: false
        }));
      })["catch"](function (err) {
        console.log('err', err);
        setLoading(_objectSpread2(_objectSpread2({}, loading), {}, {
          linkSuggestion: false
        }));
      });
    };
    var onRenewalSettingSave = function onRenewalSettingSave() {
      var form = new FormData();
      Object.keys(renewalSettings).forEach(function (key) {
        form.append(key, renewalSettings[key]);
      });
      setLoading(_objectSpread2(_objectSpread2({}, loading), {}, {
        renewal: true
      }));
      return api.recordAction({
        resourceId: 'ApplicationSettings',
        recordId: recordId,
        actionName: 'edit',
        data: form
      }).then(function () {
        setLoading(_objectSpread2(_objectSpread2({}, loading), {}, {
          renewal: false
        }));
      })["catch"](function (err) {
        console.log('err', err);
        setLoading(_objectSpread2(_objectSpread2({}, loading), {}, {
          renewal: false
        }));
      });
    };
    var onKeywordScraperSettingsSave = /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var form, nonEmptyPriorityPages, nonEmptyExcludeTags, nonEmptyExcludeKeywords;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              form = new FormData();
              nonEmptyPriorityPages = keywordScraperSettings.priorityPages.filter(function (page) {
                return !!page;
              });
              if (nonEmptyPriorityPages.length > 0) {
                nonEmptyPriorityPages.forEach(function (page, index) {
                  return page && form.append("keywordScraperPriorityPages.".concat(index), page);
                });
              } else {
                form.append('keywordScraperPriorityPages', []);
              }
              nonEmptyExcludeTags = keywordScraperSettings.excludeTags.filter(function (tag) {
                return !!tag;
              });
              if (nonEmptyExcludeTags.length > 0) {
                nonEmptyExcludeTags.forEach(function (tag, index) {
                  return tag && form.append("keywordScraperExcludeTags.".concat(index), tag);
                });
              } else {
                form.append('keywordScraperExcludeTags', []);
              }
              nonEmptyExcludeKeywords = keywordScraperSettings.excludeKeywords.filter(function (keyword) {
                return !!keyword;
              });
              if (nonEmptyExcludeKeywords.length > 0) {
                nonEmptyExcludeKeywords.forEach(function (keyword, index) {
                  return keyword && form.append("keywordScraperExcludeKeywords.".concat(index), keyword);
                });
              } else {
                form.append('keywordScraperExcludeKeywords', []);
              }
              form.append('keywordScraperEnabled', keywordScraperSettings.enabled);
              form.append('topRelatedKeywordsLimit', keywordScraperSettings.topRelatedKeywordsLimit || 100);
              form.append('keywordScraperCrawlDepth', keywordScraperSettings.keywordScraperCrawlDepth || 2000);
              form.append('keywordsToScrapePerSite', keywordScraperSettings.keywordsToScrapePerSite || 25);
              form.append('keywordScrapperConcurrentRequestsLimit', keywordScraperSettings.keywordScrapperConcurrentRequestsLimit || 8);
              setLoading(_objectSpread2(_objectSpread2({}, loading), {}, {
                keywordScraperSettings: true
              }));
              return _context.abrupt("return", api.recordAction({
                resourceId: 'ApplicationSettings',
                recordId: recordId,
                actionName: 'edit',
                data: form
              }).then(function () {
                setLoading(_objectSpread2(_objectSpread2({}, loading), {}, {
                  keywordScraperSettings: false
                }));
              })["catch"](function (err) {
                console.log('err', err);
                setLoading(_objectSpread2(_objectSpread2({}, loading), {}, {
                  keywordScraperSettings: false
                }));
              }));
            case 14:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      return function onKeywordScraperSettingsSave() {
        return _ref2.apply(this, arguments);
      };
    }();
    var onPaymentSettingsSave = /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
        var form, defaultMinTopup, stripeFlatFee, stripePercentageFee, wireTransferPaymentDuration, maltaTaxRate;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              form = new FormData();
              defaultMinTopup = paymentSettings.defaultMinTopup;
              stripeFlatFee = paymentSettings.stripeFlatFee;
              stripePercentageFee = paymentSettings.stripePercentageFee;
              wireTransferPaymentDuration = paymentSettings.wireTransferPaymentDuration;
              maltaTaxRate = paymentSettings.maltaTaxRate;
              if (defaultMinTopup) form.append('defaultMinTopup', defaultMinTopup);
              if (stripeFlatFee) form.append('stripeFlatFee', stripeFlatFee);
              if (stripePercentageFee) form.append('stripePercentageFee', stripePercentageFee);
              if (wireTransferPaymentDuration) form.append('wireTransferPaymentDuration', wireTransferPaymentDuration);
              if (maltaTaxRate) form.append('maltaTaxRate', maltaTaxRate);
              return _context2.abrupt("return", api.recordAction({
                resourceId: 'ApplicationSettings',
                recordId: recordId,
                actionName: 'edit',
                data: form
              })["catch"](function (err) {
                console.log('err', err);
              }));
            case 12:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      return function onPaymentSettingsSave() {
        return _ref3.apply(this, arguments);
      };
    }();
    var frequencyChangeHandler = function frequencyChangeHandler(event) {
      switch (event.target.name) {
        case 'ahref':
          if (event.target.value === optionConstants.WEEKLY) {
            setAhrefCronJob(_objectSpread2(_objectSpread2({}, ahrefCronJob), {}, {
              frequency: event.target.value,
              date: '',
              day: '0'
            }));
          } else if (event.target.value === optionConstants.MONTHLY) {
            setAhrefCronJob(_objectSpread2(_objectSpread2({}, ahrefCronJob), {}, {
              frequency: event.target.value,
              date: '1',
              day: ''
            }));
          } else if (event.target.value === optionConstants.DAYLY) {
            setAhrefCronJob(_objectSpread2(_objectSpread2({}, ahrefCronJob), {}, {
              frequency: event.target.value,
              date: '',
              day: '',
              hour: '3'
            }));
          } else {
            setAhrefCronJob(_objectSpread2(_objectSpread2({}, ahrefCronJob), {}, {
              frequency: event.target.value,
              date: '1',
              day: ''
            }));
          }
          break;
        case 'field':
          if (event.target.value === optionConstants.WEEKLY) {
            setFieldCheckerCronJob(_objectSpread2(_objectSpread2({}, fieldCheckerCronJob), {}, {
              frequency: event.target.value,
              date: '',
              day: '0'
            }));
          } else if (event.target.value === optionConstants.MONTHLY) {
            setFieldCheckerCronJob(_objectSpread2(_objectSpread2({}, fieldCheckerCronJob), {}, {
              frequency: event.target.value,
              date: '1',
              day: ''
            }));
          } else if (event.target.value === optionConstants.DAYLY) {
            setFieldCheckerCronJob(_objectSpread2(_objectSpread2({}, fieldCheckerCronJob), {}, {
              frequency: event.target.value,
              date: '',
              day: '',
              hour: '3'
            }));
          } else {
            setFieldCheckerCronJob(_objectSpread2(_objectSpread2({}, fieldCheckerCronJob), {}, {
              frequency: event.target.value,
              date: '1',
              day: ''
            }));
          }
          break;
        case 'sitemap':
          if (event.target.value === optionConstants.WEEKLY) {
            setSitemapCheckerCronJob(_objectSpread2(_objectSpread2({}, sitemapCheckerCronJob), {}, {
              frequency: event.target.value,
              date: '',
              day: '0'
            }));
          } else if (event.target.value === optionConstants.MONTHLY) {
            setSitemapCheckerCronJob(_objectSpread2(_objectSpread2({}, sitemapCheckerCronJob), {}, {
              frequency: event.target.value,
              date: '1',
              day: ''
            }));
          } else if (event.target.value === optionConstants.DAYLY) {
            setSitemapCheckerCronJob(_objectSpread2(_objectSpread2({}, sitemapCheckerCronJob), {}, {
              frequency: event.target.value,
              date: '',
              day: '',
              hour: '3'
            }));
          } else {
            setSitemapCheckerCronJob(_objectSpread2(_objectSpread2({}, sitemapCheckerCronJob), {}, {
              frequency: event.target.value,
              date: '1',
              day: ''
            }));
          }
          break;
        case 'backlink':
          if (event.target.value === optionConstants.WEEKLY) {
            setBacklinkFetcherCronJob(_objectSpread2(_objectSpread2({}, backlinkFetcherCronJob), {}, {
              frequency: event.target.value,
              date: '',
              day: '0'
            }));
          } else if (event.target.value === optionConstants.MONTHLY) {
            setBacklinkFetcherCronJob(_objectSpread2({}, backlinkFetcherCronJob({
              frequency: event.target.value,
              date: '1',
              day: ''
            })));
          } else if (event.target.value === optionConstants.DAYLY) {
            setBacklinkFetcherCronJob(_objectSpread2(_objectSpread2({}, backlinkFetcherCronJob), {}, {
              frequency: event.target.value,
              date: '',
              day: '',
              hour: '3'
            }));
          } else {
            setBacklinkFetcherCronJob(_objectSpread2(_objectSpread2({}, backlinkFetcherCronJob), {}, {
              frequency: event.target.value,
              date: '1',
              day: ''
            }));
          }
          break;
        case 'renewal':
          if (event.target.value === optionConstants.WEEKLY) {
            setRenewalCronJob(_objectSpread2(_objectSpread2({}, renewalCronJob), {}, {
              frequency: event.target.value,
              date: '',
              day: '0'
            }));
          } else if (event.target.value === optionConstants.MONTHLY) {
            setRenewalCronJob(_objectSpread2(_objectSpread2({}, renewalCronJob), {}, {
              frequency: event.target.value,
              date: '1',
              day: ''
            }));
          } else if (event.target.value === optionConstants.DAYLY) {
            setRenewalCronJob(_objectSpread2(_objectSpread2({}, renewalCronJob), {}, {
              frequency: event.target.value,
              date: '',
              day: '',
              hour: '3'
            }));
          } else {
            setRenewalCronJob(_objectSpread2(_objectSpread2({}, renewalCronJob), {}, {
              frequency: event.target.value,
              date: '1',
              day: ''
            }));
          }
          break;
        case 'keywordScraper':
          setKeywordScraperCronJob(_objectSpread2(_objectSpread2({}, keywordScraperCronJob), {}, {
            frequency: event.target.value
          }));
      }
    };
    var dayChangeHandler = function dayChangeHandler(event) {
      switch (event.target.name) {
        case 'ahref':
          setAhrefCronJob(_objectSpread2(_objectSpread2({}, ahrefCronJob), {}, {
            day: event.target.value
          }));
          break;
        case 'field':
          setFieldCheckerCronJob(_objectSpread2(_objectSpread2({}, fieldCheckerCronJob), {}, {
            day: event.target.value
          }));
          break;
        case 'sitemap':
          setSitemapCheckerCronJob(_objectSpread2(_objectSpread2({}, sitemapCheckerCronJob), {}, {
            day: event.target.value
          }));
          break;
        case 'backlink':
          setBacklinkFetcherCronJob(_objectSpread2(_objectSpread2({}, backlinkFetcherCronJob), {}, {
            day: event.target.value
          }));
          break;
        case 'keywordScraper':
          setKeywordScraperCronJob(_objectSpread2(_objectSpread2({}, keywordScraperCronJob), {}, {
            day: event.target.value
          }));
      }
    };
    var dateChangeHandler = function dateChangeHandler(event) {
      switch (event.target.name) {
        case 'ahref':
          setAhrefCronJob(_objectSpread2(_objectSpread2({}, ahrefCronJob), {}, {
            date: event.target.value
          }));
          break;
        case 'field':
          setFieldCheckerCronJob(_objectSpread2(_objectSpread2({}, fieldCheckerCronJob), {}, {
            date: event.target.value
          }));
          break;
        case 'sitemap':
          setSitemapCheckerCronJob(_objectSpread2(_objectSpread2({}, sitemapCheckerCronJob), {}, {
            date: event.target.value
          }));
          break;
        case 'backlink':
          setBacklinkFetcherCronJob(_objectSpread2(_objectSpread2({}, backlinkFetcherCronJob), {}, {
            date: event.target.value
          }));
          break;
        case 'renewal':
          setRenewalCronJob(_objectSpread2(_objectSpread2({}, renewalCronJob), {}, {
            date: event.target.value
          }));
          break;
        case 'keywordScraper':
          setKeywordScraperCronJob(_objectSpread2(_objectSpread2({}, keywordScraperCronJob), {}, {
            date: event.target.value
          }));
          break;
      }
    };
    var hourChangeHandler = function hourChangeHandler(event) {
      switch (event.target.name) {
        case 'ahref':
          setAhrefCronJob(_objectSpread2(_objectSpread2({}, ahrefCronJob), {}, {
            hour: event.target.value
          }));
          break;
        case 'field':
          setFieldCheckerCronJob(_objectSpread2(_objectSpread2({}, fieldCheckerCronJob), {}, {
            hour: event.target.value
          }));
          break;
        case 'sitemap':
          setSitemapCheckerCronJob(_objectSpread2(_objectSpread2({}, sitemapCheckerCronJob), {}, {
            hour: event.target.value
          }));
          break;
        case 'backlink':
          setBacklinkFetcherCronJob(_objectSpread2(_objectSpread2({}, backlinkFetcherCronJob), {}, {
            hour: event.target.value
          }));
          break;
        case 'renewal':
          setRenewalCronJob(_objectSpread2(_objectSpread2({}, renewalCronJob), {}, {
            hour: event.target.value
          }));
          break;
        case 'keywordScraper':
          setKeywordScraperCronJob(_objectSpread2(_objectSpread2({}, keywordScraperCronJob), {}, {
            hour: event.target.value
          }));
          break;
      }
    };
    var dayly_weekly_monthly_filter = function dayly_weekly_monthly_filter(trigger) {
      return [optionConstants.DAYLY, optionConstants.WEEKLY, optionConstants.MONTHLY].includes(trigger.value);
    };
    var onPriorityPagesChange = function onPriorityPagesChange(priorityPages) {
      return setKeywordScraperSettings(_objectSpread2(_objectSpread2({}, keywordScraperSettings), {}, {
        priorityPages: priorityPages
      }));
    };
    var onPriorityPagesSave = /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              setLoading(_objectSpread2(_objectSpread2({}, loading), {}, {
                priorityPages: true
              }));
              _context3.next = 3;
              return onKeywordScraperSettingsSave().then(function () {
                setLoading(_objectSpread2(_objectSpread2({}, loading), {}, {
                  priorityPages: false
                }));
              })["catch"](function (err) {
                console.log(err);
                setLoading(_objectSpread2(_objectSpread2({}, loading), {}, {
                  priorityPages: false
                }));
              });
            case 3:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      return function onPriorityPagesSave() {
        return _ref4.apply(this, arguments);
      };
    }();
    var onExcludeTagsChange = function onExcludeTagsChange(excludeTags) {
      return setKeywordScraperSettings(_objectSpread2(_objectSpread2({}, keywordScraperSettings), {}, {
        excludeTags: excludeTags
      }));
    };
    var onExcludeTagsSave = /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              setLoading(_objectSpread2(_objectSpread2({}, loading), {}, {
                excludeTags: true
              }));
              _context4.next = 3;
              return onKeywordScraperSettingsSave().then(function () {
                setLoading(_objectSpread2(_objectSpread2({}, loading), {}, {
                  excludeTags: false
                }));
              })["catch"](function (err) {
                console.log(err);
                setLoading(_objectSpread2(_objectSpread2({}, loading), {}, {
                  excludeTags: false
                }));
              });
            case 3:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      return function onExcludeTagsSave() {
        return _ref5.apply(this, arguments);
      };
    }();
    var onExcludeKeywordsChange = function onExcludeKeywordsChange(excludeKeywords) {
      return setKeywordScraperSettings(_objectSpread2(_objectSpread2({}, keywordScraperSettings), {}, {
        excludeKeywords: excludeKeywords
      }));
    };
    var onExcludeKeywordsSave = /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
        return _regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              setLoading(_objectSpread2(_objectSpread2({}, loading), {}, {
                excludeKeywords: true
              }));
              _context5.next = 3;
              return onKeywordScraperSettingsSave().then(function () {
                setLoading(_objectSpread2(_objectSpread2({}, loading), {}, {
                  excludeKeywords: false
                }));
              })["catch"](function () {
                setLoading(_objectSpread2(_objectSpread2({}, loading), {}, {
                  excludeKeywords: false
                }));
              });
            case 3:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      }));
      return function onExcludeKeywordsSave() {
        return _ref6.apply(this, arguments);
      };
    }();
    var onTopRelatedKeywordsLimitChange = function onTopRelatedKeywordsLimitChange(event) {
      setKeywordScraperSettings(_objectSpread2(_objectSpread2({}, keywordScraperSettings), {}, {
        topRelatedKeywordsLimit: event.target.value
      }));
    };
    var onKeywordScraperCrawlDepthChange = function onKeywordScraperCrawlDepthChange(event) {
      setKeywordScraperSettings(_objectSpread2(_objectSpread2({}, keywordScraperSettings), {}, {
        keywordScraperCrawlDepth: event.target.value
      }));
    };
    var onKeywordsToScrapePerSiteChange = function onKeywordsToScrapePerSiteChange(event) {
      setKeywordScraperSettings(_objectSpread2(_objectSpread2({}, keywordScraperSettings), {}, {
        keywordsToScrapePerSite: event.target.value
      }));
    };
    var onKeywordScraperConcurrentRequestsChange = function onKeywordScraperConcurrentRequestsChange(event) {
      setKeywordScraperSettings(_objectSpread2(_objectSpread2({}, keywordScraperSettings), {}, {
        keywordScrapperConcurrentRequestsLimit: event.target.value
      }));
    };
    var onLinkSuggestionErrorMarginsChange = function onLinkSuggestionErrorMarginsChange(field) {
      return function (event) {
        setLinkSuggestionErrorMargins(_objectSpread2(_objectSpread2({}, linkSuggestionErrorMargins), {}, _defineProperty({}, field, event.target.value)));
      };
    };
    var onLinkSuggestionSpacingFactorChange = function onLinkSuggestionSpacingFactorChange(event) {
      setLinkSuggestionSpacingFactor(event.target.value);
    };
    var onLinkSuggestionDropFeedTimeSpanChange = function onLinkSuggestionDropFeedTimeSpanChange(event) {
      setLinkSuggestionDropFeedTimeSpan(event.target.value);
    };
    var onIgnoredSuggestionQuarantineDaysChange = function onIgnoredSuggestionQuarantineDaysChange(event) {
      setIgnoredSuggestionQuarantineDays(event.target.value);
    };
    var onDeclineQuarantineDaysChange = function onDeclineQuarantineDaysChange(event) {
      setDeclineQuarantineDays(event.target.value);
    };
    var onRenewalSettingChange = function onRenewalSettingChange(field) {
      return function (event) {
        setRenewalSettings(_objectSpread2(_objectSpread2({}, renewalSettings), {}, _defineProperty({}, field, event.target.value)));
      };
    };
    var onDefaultMinTopupChange = function onDefaultMinTopupChange(event) {
      return setPaymentSettings(_objectSpread2(_objectSpread2({}, paymentSettings), {}, {
        defaultMinTopup: event.target.value
      }));
    };
    var onDefaultMinTopupSave = /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
        return _regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              setLoading(_objectSpread2(_objectSpread2({}, loading), {}, {
                defaultMinTopup: true
              }));
              _context6.next = 3;
              return onPaymentSettingsSave().then(function () {
                setLoading(_objectSpread2(_objectSpread2({}, loading), {}, {
                  defaultMinTopup: false
                }));
              })["catch"](function (err) {
                console.log(err);
                setLoading(_objectSpread2(_objectSpread2({}, loading), {}, {
                  defaultMinTopup: false
                }));
              });
            case 3:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      return function onDefaultMinTopupSave() {
        return _ref7.apply(this, arguments);
      };
    }();
    var onStripeFlatFeeChange = function onStripeFlatFeeChange(event) {
      return setPaymentSettings(_objectSpread2(_objectSpread2({}, paymentSettings), {}, {
        stripeFlatFee: event.target.value
      }));
    };
    var onStripeFlatFeeSave = /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {
        return _regeneratorRuntime().wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              setLoading(_objectSpread2(_objectSpread2({}, loading), {}, {
                stripeFlatFee: true
              }));
              _context7.next = 3;
              return onPaymentSettingsSave()["catch"](console.log)["finally"](function () {
                return setLoading(_objectSpread2(_objectSpread2({}, loading), {}, {
                  stripeFlatFee: false
                }));
              });
            case 3:
            case "end":
              return _context7.stop();
          }
        }, _callee7);
      }));
      return function onStripeFlatFeeSave() {
        return _ref8.apply(this, arguments);
      };
    }();
    var onStripePercentageFeeChange = function onStripePercentageFeeChange(event) {
      return setPaymentSettings(_objectSpread2(_objectSpread2({}, paymentSettings), {}, {
        stripePercentageFee: event.target.value
      }));
    };
    var onStripePercentageFeeSave = /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
        return _regeneratorRuntime().wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              setLoading(_objectSpread2(_objectSpread2({}, loading), {}, {
                stripePercentageFee: true
              }));
              _context8.next = 3;
              return onPaymentSettingsSave()["catch"](console.log)["finally"](function () {
                return setLoading(_objectSpread2(_objectSpread2({}, loading), {}, {
                  stripePercentageFee: false
                }));
              });
            case 3:
            case "end":
              return _context8.stop();
          }
        }, _callee8);
      }));
      return function onStripePercentageFeeSave() {
        return _ref9.apply(this, arguments);
      };
    }();
    var onWireTransferPaymentDurationChange = function onWireTransferPaymentDurationChange(event) {
      return setPaymentSettings(_objectSpread2(_objectSpread2({}, paymentSettings), {}, {
        wireTransferPaymentDuration: event.target.value
      }));
    };
    var onWireTransferPaymentDurationSave = /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {
        return _regeneratorRuntime().wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              setLoading(_objectSpread2(_objectSpread2({}, loading), {}, {
                wireTransferPaymentDuration: true
              }));
              _context9.next = 3;
              return onPaymentSettingsSave()["catch"](console.log)["finally"](function () {
                return setLoading(_objectSpread2(_objectSpread2({}, loading), {}, {
                  wireTransferPaymentDuration: false
                }));
              });
            case 3:
            case "end":
              return _context9.stop();
          }
        }, _callee9);
      }));
      return function onWireTransferPaymentDurationSave() {
        return _ref10.apply(this, arguments);
      };
    }();
    var onMaltaTaxRateChange = function onMaltaTaxRateChange(event) {
      return setPaymentSettings(_objectSpread2(_objectSpread2({}, paymentSettings), {}, {
        maltaTaxRate: event.target.value
      }));
    };
    var onMaltaTaxRateSave = /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {
        return _regeneratorRuntime().wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              setLoading(_objectSpread2(_objectSpread2({}, loading), {}, {
                maltaTaxRate: true
              }));
              _context10.next = 3;
              return onPaymentSettingsSave()["catch"](console.log)["finally"](function () {
                return setLoading(_objectSpread2(_objectSpread2({}, loading), {}, {
                  maltaTaxRate: false
                }));
              });
            case 3:
            case "end":
              return _context10.stop();
          }
        }, _callee10);
      }));
      return function onMaltaTaxRateSave() {
        return _ref11.apply(this, arguments);
      };
    }();
    return /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      variant: "grey"
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      p: '10px !important'
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Header.H3, {
      textAlign: 'center',
      style: {
        marginBottom: '10px'
      }
    }, "Application Settings"), /*#__PURE__*/React__default["default"].createElement(designSystem.Text, {
      textAlign: 'center',
      color: "grey",
      fontSize: 16,
      fontWeight: "bold"
    }, "This page is inteded to set a global application setting that will be applied for the application")), /*#__PURE__*/React__default["default"].createElement(designSystem.Header.H4, null, "Cronjob Settings"), /*#__PURE__*/React__default["default"].createElement(CronjobSetting, {
      id: "ahref",
      title: "Ahref API Settings",
      isLoading: loading.ahref,
      changeHandler: function changeHandler() {
        return setSettingCheckerState(_objectSpread2(_objectSpread2({}, settingCheckerState), {}, {
          ahref: !settingCheckerState.ahref
        }));
      },
      enable: settingCheckerState.ahref,
      enableLabel: "Enable Ahref Api",
      cronJob: ahrefCronJob,
      frequencyChangeHandler: frequencyChangeHandler,
      dayChangeHandler: dayChangeHandler,
      dateChangeHandler: dateChangeHandler,
      hourChangeHandler: hourChangeHandler,
      cronTimeFilter: dayly_weekly_monthly_filter,
      onSave: onAhrefCronjobSettingSave
    }), /*#__PURE__*/React__default["default"].createElement(CronjobSetting, {
      id: "field",
      title: "Field status shecker settings",
      isLoading: loading.filed,
      changeHandler: function changeHandler() {
        return setSettingCheckerState(_objectSpread2(_objectSpread2({}, settingCheckerState), {}, {
          field: !settingCheckerState.field
        }));
      },
      enable: settingCheckerState.field,
      enableLabel: "Enable Field status shecker",
      cronJob: fieldCheckerCronJob,
      frequencyChangeHandler: frequencyChangeHandler,
      dayChangeHandler: dayChangeHandler,
      dateChangeHandler: dateChangeHandler,
      hourChangeHandler: hourChangeHandler,
      cronTimeFilter: dayly_weekly_monthly_filter,
      onSave: onFieldCronjobSettingSave
    }), /*#__PURE__*/React__default["default"].createElement(CronjobSetting, {
      id: "sitemap",
      title: "Sitemap status checker setting",
      isLoading: loading.sitemap,
      changeHandler: function changeHandler() {
        return setSettingCheckerState(_objectSpread2(_objectSpread2({}, settingCheckerState), {}, {
          sitemap: !settingCheckerState.sitemap
        }));
      },
      enable: settingCheckerState.sitemap,
      enableLabel: "Enable sitemap status shecker",
      cronJob: sitemapCheckerCronJob,
      frequencyChangeHandler: frequencyChangeHandler,
      dayChangeHandler: dayChangeHandler,
      dateChangeHandler: dateChangeHandler,
      hourChangeHandler: hourChangeHandler,
      cronTimeFilter: dayly_weekly_monthly_filter,
      onSave: onSitemapjobSettingfSave
    }), /*#__PURE__*/React__default["default"].createElement(CronjobSetting, {
      id: "backlink",
      title: "Backlink fetcher settings",
      isLoading: loading.backlink,
      changeHandler: function changeHandler() {
        return setSettingCheckerState(_objectSpread2(_objectSpread2({}, settingCheckerState), {}, {
          backlink: !settingCheckerState.backlink
        }));
      },
      enable: settingCheckerState.backlink,
      enableLabel: "Enable Backlink fetcher ",
      cronJob: backlinkFetcherCronJob,
      frequencyChangeHandler: frequencyChangeHandler,
      dayChangeHandler: dayChangeHandler,
      dateChangeHandler: dateChangeHandler,
      hourChangeHandler: hourChangeHandler,
      cronTimeFilter: dayly_weekly_monthly_filter,
      onSave: onBacklinkFetcherJobSave
    }), /*#__PURE__*/React__default["default"].createElement(CronjobSetting, {
      id: "keywordScraper",
      title: "Keyword scraper settings",
      isLoading: loading.keywordScraper,
      changeHandler: function changeHandler() {
        return setSettingCheckerState(_objectSpread2(_objectSpread2({}, settingCheckerState), {}, {
          keywordScraper: !settingCheckerState.keywordScraper
        }));
      },
      enable: settingCheckerState.keywordScraper,
      enableLabel: "Enable Keyword scraper",
      cronJob: keywordScraperCronJob,
      frequencyChangeHandler: frequencyChangeHandler,
      dayChangeHandler: dayChangeHandler,
      dateChangeHandler: dateChangeHandler,
      hourChangeHandler: hourChangeHandler,
      cronTimeFilter: function cronTimeFilter(trigger) {
        return [optionConstants.MONTHLY, optionConstants.QUARTERLY, optionConstants.SEMI_ANNUALLY, optionConstants.YEARLY].includes(trigger.value);
      },
      onSave: onKeywordScraperJobSave
    }), /*#__PURE__*/React__default["default"].createElement(CronjobSetting, {
      id: "renewal",
      title: "Renewal Settings",
      isLoading: loading.renewal,
      changeHandler: function changeHandler() {
        return setSettingCheckerState(_objectSpread2(_objectSpread2({}, settingCheckerState), {}, {
          renewal: !settingCheckerState.renewal
        }));
      },
      enable: settingCheckerState.renewal,
      enableLabel: "Enable Renewal Cronjob",
      cronJob: renewalCronJob,
      frequencyChangeHandler: frequencyChangeHandler,
      dayChangeHandler: dayChangeHandler,
      dateChangeHandler: dateChangeHandler,
      hourChangeHandler: hourChangeHandler,
      cronTimeFilter: dayly_weekly_monthly_filter,
      onSave: onRenewalCronJobSave
    }), /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      variant: "white",
      mt: "-4rem",
      pl: '3.4rem !important'
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.CheckBox, {
      title: "Enable Renewal Reminder",
      label: "Send Renewal Reminder",
      checked: settingCheckerState.renewalReminder,
      onChange: function onChange() {
        setSettingCheckerState(_objectSpread2(_objectSpread2({}, settingCheckerState), {}, {
          renewalReminder: !settingCheckerState.renewalReminder
        }));
      }
    }), /*#__PURE__*/React__default["default"].createElement(designSystem.Label, {
      inline: true,
      ml: "default"
    }, "Send Renewal Reminder")), /*#__PURE__*/React__default["default"].createElement(designSystem.Header.H4, null, "Renewal settings"), /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      variant: "white",
      p: '10px !important'
    }, Object.keys(renewalSettings).map(function (key, index) {
      return /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        key: index
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, renewalSettingLabel[index]), /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
        type: "number",
        value: renewalSettings[key],
        onChange: onRenewalSettingChange(key)
      }));
    }), /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      flex: true,
      alignItems: "flex-end",
      justifyContent: "flex-end",
      width: "100%"
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Button, {
      type: "submit",
      onClick: onRenewalSettingSave
    }, loading.renewal ? /*#__PURE__*/React__default["default"].createElement(designSystem.Loader, {
      style: {
        height: '10px'
      }
    }) : 'Save'))), /*#__PURE__*/React__default["default"].createElement(designSystem.Header.H4, null, "Link suggestion settings"), /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      variant: "white",
      p: '10px !important'
    }, Object.keys(linkSuggestionErrorMargins).map(function (key, index) {
      return /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        key: index
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, "Keyword scraper error margin ", key), /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
        type: "number",
        value: linkSuggestionErrorMargins[key],
        onChange: onLinkSuggestionErrorMarginsChange(key)
      }));
    }), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, null, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, "Link suggestion publish date spacing factor"), /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
      type: "number",
      value: linkSuggestionSpacingFactor,
      onChange: onLinkSuggestionSpacingFactorChange
    })), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, null, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, "Link suggestion drop feed range"), /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
      type: "number",
      value: linkSuggestionDropFeedTimeSpan,
      onChange: onLinkSuggestionDropFeedTimeSpanChange
    })), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, null, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, "Ignored Link Suggestion Quarantine Days"), /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
      type: "number",
      value: ignoredSuggestionQuarantineDays,
      onChange: onIgnoredSuggestionQuarantineDaysChange
    })), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, null, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, "Declined Link Suggestion Quarantine Days"), /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
      type: "number",
      value: declineQuarantineDays,
      onChange: onDeclineQuarantineDaysChange
    })), /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      flex: true,
      alignItems: "flex-end",
      justifyContent: "flex-end",
      width: "100%"
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Button, {
      type: "submit",
      onClick: onLinkSuggestionSettingsSave
    }, loading.linkSuggestion ? /*#__PURE__*/React__default["default"].createElement(designSystem.Loader, {
      style: {
        height: '10px'
      }
    }) : 'Save'))), /*#__PURE__*/React__default["default"].createElement(designSystem.Header.H4, null, "Keyword scraper settings"), /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      variant: "white",
      p: '10px !important'
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, null, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, "Top related keywords limit"), /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
      type: "number",
      value: keywordScraperSettings.topRelatedKeywordsLimit,
      onChange: onTopRelatedKeywordsLimitChange
    })), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, null, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, " Keyword Scraper Crawl Depth"), /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
      type: "number",
      value: keywordScraperSettings.keywordScraperCrawlDepth,
      onChange: onKeywordScraperCrawlDepthChange
    })), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, null, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, "Keywords to scrape per site"), /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
      type: "number",
      value: keywordScraperSettings.keywordsToScrapePerSite,
      onChange: onKeywordsToScrapePerSiteChange
    })), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, null, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, "Keyword Scraper Concurrent Requests"), /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
      type: "number",
      value: keywordScraperSettings.keywordScraperConcurrentRequests,
      onChange: onKeywordScraperConcurrentRequestsChange
    })), /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      flex: true,
      alignItems: "flex-end",
      justifyContent: "flex-end",
      width: "100%"
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Button, {
      type: "submit",
      onClick: onKeywordScraperSettingsSave
    }, loading.keywordScraperSettings ? /*#__PURE__*/React__default["default"].createElement(designSystem.Loader, {
      style: {
        height: '10px'
      }
    }) : 'Save'))), /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      variant: "white",
      p: '10px !important'
    }, /*#__PURE__*/React__default["default"].createElement(MultiSelector, {
      title: "Priority Pages",
      placeholder: "Enter priority pages",
      isLoading: loading.priorityPages,
      initialValue: keywordScraperSettings.priorityPages,
      onChange: onPriorityPagesChange,
      onSave: onPriorityPagesSave
    })), /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      variant: "white",
      p: '10px !important'
    }, /*#__PURE__*/React__default["default"].createElement(MultiSelector, {
      title: "Exclude Tags",
      placeholder: "Enter tags to exclude",
      isLoading: loading.excludeTags,
      initialValue: keywordScraperSettings.excludeTags,
      onChange: onExcludeTagsChange,
      onSave: onExcludeTagsSave
    })), /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      variant: "white",
      p: '10px !important'
    }, /*#__PURE__*/React__default["default"].createElement(MultiSelector, {
      title: "Exclude Keywords",
      placeholder: "Enter keywords to exclude",
      isLoading: loading.excludeKeywords,
      initialValue: keywordScraperSettings.excludeKeywords,
      onChange: onExcludeKeywordsChange,
      onSave: onExcludeKeywordsSave
    })), /*#__PURE__*/React__default["default"].createElement(designSystem.Box, null, /*#__PURE__*/React__default["default"].createElement(designSystem.Header.H4, {
      style: {
        marginTop: '2rem'
      }
    }, "Payment Settings"), /*#__PURE__*/React__default["default"].createElement(designSystem.Box, null, /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      variant: "white",
      pl: "10px",
      pr: "20px"
    }, [{
      title: 'Default Minimum Top Up',
      subTitle: 'Minimum top up amounts can be defined on a role basis but this will be used as a fallback value if left empty.',
      loading: loading.defaultMinTopup,
      value: paymentSettings.defaultMinTopup,
      onChange: onDefaultMinTopupChange,
      onSave: onDefaultMinTopupSave
    }, {
      title: 'Stripe Flat Fee',
      subTitle: 'Stripe charges a flat fee of 30¢. In case Stripe introduces changes to their policy, you can change it here.',
      loading: loading.stripeFlatFee,
      value: paymentSettings.stripeFlatFee,
      onChange: onStripeFlatFeeChange,
      onSave: onStripeFlatFeeSave
    }, {
      title: 'Stripe Percentage Fee',
      subTitle: 'Stripe charges a percentage fee of 2.9%. In case Stripe introduces changes to their policy, you can change it here.',
      loading: loading.stripePercentageFee,
      value: paymentSettings.stripePercentageFee,
      onChange: onStripePercentageFeeChange,
      onSave: onStripePercentageFeeSave
    }, {
      title: 'Bank Transfer Payment Duration',
      subTitle: 'The number of days a user should complete a credit top up using bank transfer payment.',
      loading: loading.wireTransferPaymentDuration,
      step: 1,
      value: paymentSettings.wireTransferPaymentDuration,
      onChange: onWireTransferPaymentDurationChange,
      onSave: onWireTransferPaymentDurationSave
    }, {
      title: 'Malta Tax Rate',
      loading: loading.maltaTaxRate,
      value: paymentSettings.maltaTaxRate,
      onChange: onMaltaTaxRateChange,
      onSave: onMaltaTaxRateSave
    }].map(function (paymentSetting, index) {
      return /*#__PURE__*/React__default["default"].createElement(PaymentInput, _extends({
        index: index
      }, paymentSetting));
    })))));
  };

  // Languages are sorted in a way that a sub-language comes after its parent language.

  var LANGUAGES = [{
    code: 'fi',
    name: 'Finnish'
  }, {
    code: 'no',
    name: 'Norwegian'
  }, {
    code: 'en',
    name: 'English'
  }, {
    code: 'sv',
    name: 'Swedish'
  }, {
    code: 'de',
    name: 'German'
  }, {
    code: 'nl',
    name: 'Dutch'
  }, {
    code: 'da',
    name: 'Danish'
  }, {
    code: 'es',
    name: 'Spanish',
    country: 'Spain'
  }, {
    code: 'fr',
    name: 'French'
  }, {
    code: 'it',
    name: 'Italian'
  }, {
    code: 'pl',
    name: 'Polish'
  }, {
    code: 'et',
    name: 'Estonian'
  }, {
    code: 'pt-BR',
    name: 'Portuguese',
    country: 'Brazil'
  }, {
    code: 'pt-PT',
    name: 'Portuguese',
    country: 'Portugal'
  }, {
    code: 'es-MX',
    name: 'Spanish',
    country: 'Mexico'
  }, {
    code: 'es-LA',
    name: 'Spanish',
    country: 'Latin America'
  }, {
    code: 'en-GB',
    name: 'English',
    country: 'United Kingdom'
  }, {
    code: 'en-US',
    name: 'English',
    country: 'United States'
  }, {
    code: 'en-CA',
    name: 'English',
    country: 'Canada'
  }, {
    code: 'en-AU',
    name: 'English',
    country: 'Australia'
  }];
  var TONE_OF_VOICES = ['Informal', 'Formal', 'Friendly', 'Business', null];
  var constants = {
    LANGUAGES: LANGUAGES,
    TONE_OF_VOICES: TONE_OF_VOICES
  };

  var _templateObject;
  var BoldLabel = styled__default["default"](designSystem.Label)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  font-weight: 400;\n  font-size: 1.05em;\n"])));
  var XeroResourceSelector = function XeroResourceSelector(_ref) {
    var options = _ref.options,
      mb = _ref.mb,
      label = _ref.label,
      onChange = _ref.onChange,
      _ref$required = _ref.required,
      required = _ref$required === void 0 ? true : _ref$required,
      value = _ref.value;
    return /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
      mb: mb
    }, /*#__PURE__*/React__default["default"].createElement(BoldLabel, {
      required: required
    }, label), /*#__PURE__*/React__default["default"].createElement(Select__default["default"], {
      value: options.find(function (option) {
        return option.value === value;
      }),
      options: options,
      onChange: onChange,
      required: required
    }));
  };
  var ThirdPartyApiSettingsPage = function ThirdPartyApiSettingsPage(props) {
    var api = new adminBro.ApiClient();

    // spacing
    var mb = 25;
    var mt = 35;
    var taxRateTypes = {
      EU: 'EU Tax Rate',
      NonEU: 'Non-EU Tax Rate',
      Malta: 'Malta Tax Rate'
    };

    // selector options
    var contentQualityOptions = [{
      label: 'raw',
      value: 'raw'
    }, {
      label: 'standard',
      value: 'standard'
    }, {
      label: 'business',
      value: 'business'
    }];
    var keywordMatchOptions = ['exact', 'near'].map(function (option) {
      return {
        label: option,
        value: option
      };
    });
    var languageOptions = constants.LANGUAGES.map(function (_ref2) {
      var code = _ref2.code,
        name = _ref2.name,
        country = _ref2.country;
      return {
        label: "".concat(name).concat(country ? " (".concat(country, ")") : ''),
        value: code
      };
    });
    var _useState = React$1.useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      gettingPageData = _useState2[0],
      setGettingPageData = _useState2[1];
    var _useState3 = React$1.useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      gettingThirdPartyApiSettings = _useState4[0],
      setGettingThirdPartyApiSettings = _useState4[1];
    var _useState5 = React$1.useState([]),
      _useState6 = _slicedToArray(_useState5, 2),
      accounts = _useState6[0],
      setAccounts = _useState6[1];
    var _useState7 = React$1.useState([]),
      _useState8 = _slicedToArray(_useState7, 2),
      taxRates = _useState8[0],
      setTaxRates = _useState8[1];
    var _useState9 = React$1.useState({
        defaultLanguage: '',
        defaultQuality: 'raw',
        defaultWriterInstructions: '',
        defaultKeywordMatch: 'exact',
        useMetaTags: false,
        templateId: ''
      }),
      _useState10 = _slicedToArray(_useState9, 2),
      topContentSettings = _useState10[0],
      setTopContentSettings = _useState10[1];
    var _useState11 = React$1.useState({
        xeroAccounts: {
          directCost: {
            content: {
              accountID: null,
              code: null
            },
            link: {
              accountID: null,
              code: null
            }
          },
          prepayment: {
            accountID: null,
            code: null
          },
          sales: {
            content: {
              accountID: null,
              code: null
            },
            link: {
              accountID: null,
              code: null
            }
          },
          payment: {
            stripeAccount: {
              accountID: null,
              code: null
            },
            bankAccount: {
              accountID: null,
              code: null
            }
          }
        },
        xeroTaxRates: {
          expense: {
            EU: {
              taxType: null,
              amount: null
            },
            NonEU: {
              taxType: null,
              amount: null
            },
            Malta: {
              taxType: null,
              amount: null
            }
          },
          sales: {
            EU: {
              taxType: null,
              amount: null
            },
            NonEU: {
              taxType: null,
              amount: null
            },
            Malta: {
              taxType: null,
              amount: null
            }
          }
        }
      }),
      _useState12 = _slicedToArray(_useState11, 2),
      xeroSettings = _useState12[0],
      setXeroSettings = _useState12[1];
    var _useState13 = React$1.useState(null),
      _useState14 = _slicedToArray(_useState13, 2),
      recordId = _useState14[0],
      setRecordId = _useState14[1];
    var _useState15 = React$1.useState(false),
      _useState16 = _slicedToArray(_useState15, 2),
      savingTopContentSettings = _useState16[0],
      setSavingTopContentSettings = _useState16[1];
    var _useState17 = React$1.useState(null),
      _useState18 = _slicedToArray(_useState17, 2),
      topContentSettingsResult = _useState18[0],
      setTopContentSettingsResult = _useState18[1];
    var _useState19 = React$1.useState(false),
      _useState20 = _slicedToArray(_useState19, 2),
      savingXeroSettings = _useState20[0],
      setSavingXeroSettings = _useState20[1];
    var _useState21 = React$1.useState(null),
      _useState22 = _slicedToArray(_useState21, 2),
      xeroSettingsResult = _useState22[0],
      setXeroSettingsResult = _useState22[1];
    var accountSettings = function accountSettings() {
      return [{
        label: 'Prepaid Income Account',
        value: xeroSettings.xeroAccounts.prepayment.accountID,
        onChange: function onChange(_ref3) {
          var value = _ref3.value;
          return setXeroSettings(_objectSpread2(_objectSpread2({}, xeroSettings), {}, {
            xeroAccounts: _objectSpread2(_objectSpread2({}, xeroSettings.xeroAccounts), {}, {
              prepayment: {
                accountID: value,
                code: accounts.find(function (account) {
                  return account.value === value;
                }).code
              }
            })
          }));
        }
      }, {
        label: 'Link Sales Account',
        value: xeroSettings.xeroAccounts.sales.link.accountID,
        onChange: function onChange(_ref4) {
          var value = _ref4.value;
          return setXeroSettings(_objectSpread2(_objectSpread2({}, xeroSettings), {}, {
            xeroAccounts: _objectSpread2(_objectSpread2({}, xeroSettings.xeroAccounts), {}, {
              sales: _objectSpread2(_objectSpread2({}, xeroSettings.xeroAccounts.sales), {}, {
                link: {
                  accountID: value,
                  code: accounts.find(function (account) {
                    return account.value === value;
                  }).code
                }
              })
            })
          }));
        }
      }, {
        label: 'Content Sales Account',
        value: xeroSettings.xeroAccounts.sales.content.accountID,
        onChange: function onChange(_ref5) {
          var value = _ref5.value;
          return setXeroSettings(_objectSpread2(_objectSpread2({}, xeroSettings), {}, {
            xeroAccounts: _objectSpread2(_objectSpread2({}, xeroSettings.xeroAccounts), {}, {
              sales: _objectSpread2(_objectSpread2({}, xeroSettings.xeroAccounts.sales), {}, {
                content: {
                  accountID: value,
                  code: accounts.find(function (account) {
                    return account.value === value;
                  }).code
                }
              })
            })
          }));
        }
      }, {
        label: 'Direct Cost (Content) Account',
        value: xeroSettings.xeroAccounts.directCost.content.accountID,
        onChange: function onChange(_ref6) {
          var value = _ref6.value;
          return setXeroSettings(_objectSpread2(_objectSpread2({}, xeroSettings), {}, {
            xeroAccounts: _objectSpread2(_objectSpread2({}, xeroSettings.xeroAccounts), {}, {
              directCost: _objectSpread2(_objectSpread2({}, xeroSettings.xeroAccounts.directCost), {}, {
                content: {
                  accountID: value,
                  code: accounts.find(function (account) {
                    return account.value === value;
                  }).code
                }
              })
            })
          }));
        }
      }, {
        label: 'Direct Cost (Link) Account',
        value: xeroSettings.xeroAccounts.directCost.link.accountID,
        onChange: function onChange(_ref7) {
          var value = _ref7.value;
          return setXeroSettings(_objectSpread2(_objectSpread2({}, xeroSettings), {}, {
            xeroAccounts: _objectSpread2(_objectSpread2({}, xeroSettings.xeroAccounts), {}, {
              directCost: _objectSpread2(_objectSpread2({}, xeroSettings.xeroAccounts.directCost), {}, {
                link: {
                  accountID: value,
                  code: accounts.find(function (account) {
                    return account.value === value;
                  }).code
                }
              })
            })
          }));
        }
      }, {
        label: 'Stripe Account',
        value: xeroSettings.xeroAccounts.payment.stripeAccount.accountID,
        onChange: function onChange(_ref8) {
          var value = _ref8.value;
          return setXeroSettings(_objectSpread2(_objectSpread2({}, xeroSettings), {}, {
            xeroAccounts: _objectSpread2(_objectSpread2({}, xeroSettings.xeroAccounts), {}, {
              payment: _objectSpread2(_objectSpread2({}, xeroSettings.xeroAccounts.payment), {}, {
                stripeAccount: {
                  accountID: value,
                  code: accounts.find(function (account) {
                    return account.value === value;
                  }).code
                }
              })
            })
          }));
        }
      }, {
        label: 'Bank Account',
        value: xeroSettings.xeroAccounts.payment.bankAccount.accountID,
        onChange: function onChange(_ref9) {
          var value = _ref9.value;
          return setXeroSettings(_objectSpread2(_objectSpread2({}, xeroSettings), {}, {
            xeroAccounts: _objectSpread2(_objectSpread2({}, xeroSettings.xeroAccounts), {}, {
              payment: _objectSpread2(_objectSpread2({}, xeroSettings.xeroAccounts.payment), {}, {
                bankAccount: {
                  accountID: value,
                  code: accounts.find(function (account) {
                    return account.value === value;
                  }).code
                }
              })
            })
          }));
        }
      }];
    };
    var expenseTaxRateSettings = function expenseTaxRateSettings() {
      return Object.keys(taxRateTypes).map(function (key) {
        return {
          label: taxRateTypes[key],
          value: xeroSettings.xeroTaxRates.expense[key].taxType,
          onChange: function onChange(_ref10) {
            var value = _ref10.value;
            return setXeroSettings(_objectSpread2(_objectSpread2({}, xeroSettings), {}, {
              xeroTaxRates: _objectSpread2(_objectSpread2({}, xeroSettings.xeroTaxRates), {}, {
                expense: _objectSpread2(_objectSpread2({}, xeroSettings.xeroTaxRates.expense), {}, _defineProperty({}, key, {
                  taxType: value,
                  amount: taxRates.find(function (taxRate) {
                    return taxRate.value === value;
                  }).amount
                }))
              })
            }));
          }
        };
      });
    };
    var salesTaxRateSettings = function salesTaxRateSettings() {
      return Object.keys(taxRateTypes).map(function (key) {
        return {
          label: taxRateTypes[key],
          value: xeroSettings.xeroTaxRates.sales[key].taxType,
          onChange: function onChange(_ref11) {
            var value = _ref11.value;
            return setXeroSettings(_objectSpread2(_objectSpread2({}, xeroSettings), {}, {
              xeroTaxRates: _objectSpread2(_objectSpread2({}, xeroSettings.xeroTaxRates), {}, {
                sales: _objectSpread2(_objectSpread2({}, xeroSettings.xeroTaxRates.sales), {}, _defineProperty({}, key, {
                  taxType: value,
                  amount: taxRates.find(function (taxRate) {
                    return taxRate.value === value;
                  }).amount
                }))
              })
            }));
          }
        };
      });
    };
    var fetchApiSettings = function fetchApiSettings() {
      setGettingThirdPartyApiSettings(true);
      api.resourceAction({
        resourceId: resources.ThirdPartyApiSettings,
        actionName: 'list'
      }).then(function (_ref12) {
        var data = _ref12.data;
        if (data.records && Array.isArray(data.records) && data.records.length) {
          var thirdPartyApiSettings = adminBro.unflatten(data.records[0].params);
          var _id = thirdPartyApiSettings._id,
            defaultLanguage = thirdPartyApiSettings.defaultLanguage,
            defaultQuality = thirdPartyApiSettings.defaultQuality,
            defaultWriterInstructions = thirdPartyApiSettings.defaultWriterInstructions,
            defaultKeywordMatch = thirdPartyApiSettings.defaultKeywordMatch,
            useMetaTags = thirdPartyApiSettings.useMetaTags,
            templateId = thirdPartyApiSettings.templateId,
            xeroAccounts = thirdPartyApiSettings.xeroAccounts,
            xeroTaxRates = thirdPartyApiSettings.xeroTaxRates;
          setRecordId(_id);
          setTopContentSettings(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2({}, topContentSettings), defaultLanguage ? {
            defaultLanguage: defaultLanguage
          } : {}), defaultQuality ? {
            defaultQuality: defaultQuality
          } : {}), defaultWriterInstructions ? {
            defaultWriterInstructions: defaultWriterInstructions
          } : {}), defaultKeywordMatch ? {
            defaultKeywordMatch: defaultKeywordMatch
          } : {}), useMetaTags ? {
            useMetaTags: useMetaTags
          } : {}), templateId ? {
            templateId: templateId
          } : {}));
          setXeroSettings(_objectSpread2(_objectSpread2(_objectSpread2({}, xeroSettings), xeroAccounts && {
            xeroAccounts: _objectSpread2(_objectSpread2({}, xeroSettings.xeroAccounts), xeroAccounts)
          }), xeroTaxRates && {
            xeroTaxRates: _objectSpread2(_objectSpread2({}, xeroSettings.xeroTaxRates), xeroTaxRates)
          }));
        }
      })["catch"](console.error)["finally"](function () {
        return setGettingThirdPartyApiSettings(false);
      });
    };
    var fetchPageData = /*#__PURE__*/function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var response;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              setGettingPageData(true);
              _context.next = 4;
              return api.getPage({
                pageName: 'thirdPartyApiSettingsPage'
              });
            case 4:
              response = _context.sent;
              if (Array.isArray(response.data.accounts)) setAccounts(response.data.accounts.map(function (account) {
                return {
                  code: account.code,
                  label: account.name,
                  value: account.accountID
                };
              }));
              if (Array.isArray(response.data.taxRates)) setTaxRates(response.data.taxRates.map(function (taxRate) {
                return {
                  amount: taxRate.effectiveRate,
                  label: "".concat(taxRate.name, " (").concat(taxRate.displayTaxRate, "%)"),
                  value: taxRate.taxType
                };
              }));
              _context.next = 12;
              break;
            case 9:
              _context.prev = 9;
              _context.t0 = _context["catch"](0);
              console.error(_context.t0);
            case 12:
              _context.prev = 12;
              setGettingPageData(false);
              return _context.finish(12);
            case 15:
            case "end":
              return _context.stop();
          }
        }, _callee, null, [[0, 9, 12, 15]]);
      }));
      return function fetchPageData() {
        return _ref13.apply(this, arguments);
      };
    }();
    var onTopContentSettingsSave = function onTopContentSettingsSave(e) {
      var formData = new FormData();
      e.preventDefault();
      setSavingTopContentSettings(true);
      Object.keys(topContentSettings).forEach(function (key) {
        return formData.append(key, topContentSettings[key]);
      });
      api.recordAction(_objectSpread2(_objectSpread2({
        resourceId: resources.ThirdPartyApiSettings
      }, recordId ? {
        recordId: recordId
      } : {}), {}, {
        actionName: recordId ? 'edit' : 'new',
        data: formData
      })).then(function (record) {
        var _unflatten = adminBro.unflatten(record.data.record.params),
          _id = _unflatten._id,
          defaultLanguage = _unflatten.defaultLanguage,
          defaultQuality = _unflatten.defaultQuality,
          defaultWriterInstructions = _unflatten.defaultWriterInstructions,
          defaultKeywordMatch = _unflatten.defaultKeywordMatch,
          useMetaTags = _unflatten.useMetaTags;
        setTopContentSettings({
          defaultLanguage: defaultLanguage,
          defaultQuality: defaultQuality,
          defaultWriterInstructions: defaultWriterInstructions,
          defaultKeywordMatch: defaultKeywordMatch,
          useMetaTags: useMetaTags
        });
        setTopContentSettingsResult({
          message: 'Successfully updated Topcontent default settings',
          variant: 'success'
        });
        if (!recordId) setRecordId(_id);
      })["catch"](function (err) {
        console.error(err);
        setTopContentSettingsResult({
          message: err.message || 'Failed to update Topcontent default settings',
          variant: 'error'
        });
      })["finally"](function () {
        setSavingTopContentSettings(false);
      });
    };
    var onXeroSettingsSave = function onXeroSettingsSave(e) {
      var formData = new FormData();
      var values = adminBro.flatten(xeroSettings);
      e.preventDefault();
      setSavingXeroSettings(true);
      Object.keys(values).forEach(function (key) {
        return formData.append(key, values[key]);
      });
      api.recordAction(_objectSpread2(_objectSpread2({
        resourceId: resources.ThirdPartyApiSettings
      }, recordId ? {
        recordId: recordId
      } : {}), {}, {
        actionName: recordId ? 'edit' : 'new',
        data: formData
      })).then(function (record) {
        var _unflatten2 = adminBro.unflatten(record.data.record.params),
          _id = _unflatten2._id,
          xeroAccounts = _unflatten2.xeroAccounts,
          xeroTaxRates = _unflatten2.xeroTaxRates;
        setXeroSettings({
          xeroAccounts: xeroAccounts,
          xeroTaxRates: xeroTaxRates
        });
        setXeroSettingsResult({
          message: 'Successfully updated Xero settings',
          variant: 'success'
        });
        if (!recordId) setRecordId(_id);
      })["catch"](function (err) {
        console.error(err);
        setTopContentSettingsResult({
          message: err.message || 'Failed to update Xero settings',
          variant: 'error'
        });
      })["finally"](function () {
        setSavingXeroSettings(false);
      });
    };
    React$1.useEffect(function () {
      fetchPageData();
      fetchApiSettings();
    }, []);
    return /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      variant: "grey"
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Header.H3, {
      textAlign: 'center'
    }, "Third Party Api Settings"), /*#__PURE__*/React__default["default"].createElement(designSystem.Text, {
      mb: mb,
      textAlign: 'center',
      color: "grey"
    }, "This page is intended to set third party api setting that will be applied for the application."), /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      mb: mb,
      mx: [0, 0, mb]
    }, topContentSettingsResult && /*#__PURE__*/React__default["default"].createElement(designSystem.MessageBox, _extends({}, topContentSettingsResult, {
      onCloseClick: function onCloseClick() {
        return setTopContentSettingsResult(null);
      }
    })), xeroSettingsResult && /*#__PURE__*/React__default["default"].createElement(designSystem.MessageBox, _extends({}, xeroSettingsResult, {
      onCloseClick: function onCloseClick() {
        return setXeroSettingsResult(null);
      }
    }))), gettingThirdPartyApiSettings ? /*#__PURE__*/React__default["default"].createElement(designSystem.Loader, null) : /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      flex: true,
      flexDirection: ['column', 'column', 'row'],
      justifyContent: "space-around",
      variant: "white"
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      width: ['100%', '100%', '45%']
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Header.H4, {
      textAlign: 'center'
    }, "Topcontent Settings"), /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      as: "form",
      onSubmit: onTopContentSettingsSave,
      display: "flex",
      flexDirection: "column"
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
      mb: mb
    }, /*#__PURE__*/React__default["default"].createElement(BoldLabel, null, "Default content quality"), /*#__PURE__*/React__default["default"].createElement(Select__default["default"], {
      value: contentQualityOptions.find(function (option) {
        return option.value === topContentSettings.defaultQuality;
      }),
      options: contentQualityOptions,
      onChange: function onChange(_ref14) {
        var value = _ref14.value;
        return setTopContentSettings(_objectSpread2(_objectSpread2({}, topContentSettings), {}, {
          defaultQuality: value
        }));
      }
    })), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
      mb: mb
    }, /*#__PURE__*/React__default["default"].createElement(BoldLabel, null, "Default content language"), /*#__PURE__*/React__default["default"].createElement(Select__default["default"], {
      value: languageOptions.find(function (option) {
        return option.value === topContentSettings.defaultLanguage;
      }),
      options: languageOptions,
      onChange: function onChange(_ref15) {
        var value = _ref15.value;
        return setTopContentSettings(_objectSpread2(_objectSpread2({}, topContentSettings), {}, {
          defaultLanguage: value
        }));
      }
    })), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
      mb: mb
    }, /*#__PURE__*/React__default["default"].createElement(BoldLabel, null, "Default keyword match"), /*#__PURE__*/React__default["default"].createElement(Select__default["default"], {
      value: keywordMatchOptions.find(function (option) {
        return option.value === topContentSettings.defaultKeywordMatch;
      }),
      options: keywordMatchOptions,
      onChange: function onChange(_ref16) {
        var value = _ref16.value;
        return setTopContentSettings(_objectSpread2(_objectSpread2({}, topContentSettings), {}, {
          defaultKeywordMatch: value
        }));
      }
    })), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
      mb: mb
    }, /*#__PURE__*/React__default["default"].createElement(BoldLabel, null, "Default writer instructions"), /*#__PURE__*/React__default["default"].createElement(designSystem.TextArea, {
      value: topContentSettings.defaultWriterInstructions,
      onChange: function onChange(e) {
        return setTopContentSettings(_objectSpread2(_objectSpread2({}, topContentSettings), {}, {
          defaultWriterInstructions: e.target.value
        }));
      },
      style: {
        width: '100%'
      },
      rows: 6
    })), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
      mb: mb
    }, /*#__PURE__*/React__default["default"].createElement(BoldLabel, null, "Template Id"), /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
      value: topContentSettings.templateId,
      onChange: function onChange(e) {
        return setTopContentSettings(_objectSpread2(_objectSpread2({}, topContentSettings), {}, {
          templateId: e.target.value
        }));
      }
    })), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
      mb: mb
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.CheckBox, {
      type: 'checkbox',
      checked: topContentSettings.useMetaTags,
      onChange: function onChange() {
        return setTopContentSettings(_objectSpread2(_objectSpread2({}, topContentSettings), {}, {
          useMetaTags: !topContentSettings.useMetaTags
        }));
      }
    }), /*#__PURE__*/React__default["default"].createElement(BoldLabel, {
      inline: true
    }, "Enable Topcontent meta tags"), topContentSettings.useMetaTags && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, {
      style: {
        color: '#dc3545'
      }
    }, "Warning: This will increase the cost of content orders")), /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      mt: mt
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Button, {
      disabled: savingTopContentSettings,
      variant: "primary",
      type: "submit"
    }, "Save")))), /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      display: ['none', 'none', 'block'],
      style: {
        border: '1px solid rgb(234, 234, 234)'
      }
    }), /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      width: ['100%', '100%', '45%']
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Header.H4, {
      textAlign: 'center'
    }, "Xero Settings"), gettingPageData || savingXeroSettings ? /*#__PURE__*/React__default["default"].createElement(designSystem.Loader, null) : /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      as: "form",
      onSubmit: onXeroSettingsSave,
      display: "flex",
      flexDirection: "column"
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Header.H5, null, "Accounts"), accountSettings().map(function (option) {
      return /*#__PURE__*/React__default["default"].createElement(XeroResourceSelector, _extends({
        options: accounts,
        mb: mb
      }, option));
    }), /*#__PURE__*/React__default["default"].createElement(designSystem.Header.H5, null, "Tax Rates"), /*#__PURE__*/React__default["default"].createElement(designSystem.Header.H5, null, "Sales Tax Rates"), salesTaxRateSettings().map(function (option) {
      return /*#__PURE__*/React__default["default"].createElement(XeroResourceSelector, _extends({
        options: taxRates,
        mb: mb
      }, option));
    }), /*#__PURE__*/React__default["default"].createElement(designSystem.Header.H5, null, "Expense Tax Rates"), expenseTaxRateSettings().map(function (option) {
      return /*#__PURE__*/React__default["default"].createElement(XeroResourceSelector, _extends({
        options: taxRates,
        mb: mb
      }, option));
    }), /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      mt: mt
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Button, {
      disabled: savingXeroSettings,
      variant: "primary",
      type: "submit"
    }, "Save"))))));
  };

  var message = function message(props) {
    var record = props.record;
    var status = 'success';
    var message = 'Sub pages updated with new sitemap data.';
    if (typeof record.errors === 'string') {
      status = 'danger';
      message = record.errors;
    }
    return /*#__PURE__*/React.createElement(designSystem.MessageBox, {
      message: message,
      variant: status
    });
  };

  var Component4 = (function (props) {
    var record = props.record;
    var status = 'success';
    var message = 'Activation Email sent successfully';
    if (typeof record.errors === 'string') {
      status = 'danger';
      message = record.errors;
    }
    return /*#__PURE__*/React.createElement(designSystem.MessageBox, {
      message: message,
      variant: status
    });
  });

  var Component5 = (function (props) {
    var record = props.record;
    var status = 'success';
    var message = 'Restored successfully';
    if (typeof record.errors === 'string') {
      status = 'danger';
      message = record.errors;
    }
    return /*#__PURE__*/React.createElement(designSystem.MessageBox, {
      message: message,
      variant: status
    });
  });

  var styles = {
    flexRow: {
      display: 'flex',
      flexDirection: 'row'
    },
    center: {
      display: 'flex',
      justifyContent: 'center'
    }
  };

  var CollectionInput = function CollectionInput(_ref) {
    var items = _ref.items,
      setItems = _ref.setItems,
      name = _ref.name,
      _ref$errors = _ref.errors,
      errors = _ref$errors === void 0 ? {} : _ref$errors;
    var handleInputChange = function handleInputChange(e, index) {
      var cpy = _toConsumableArray(items);
      cpy.splice(index, 1, e.target.value);
      setItems(cpy);
    };
    var handleAddButtonClick = function handleAddButtonClick(e) {
      e.preventDefault();
      if (items.length === 0 || items[items.length - 1].trim()) setItems([].concat(_toConsumableArray(items), ['']));
    };
    var handleRemoveButtonClick = function handleRemoveButtonClick(e, index) {
      e.preventDefault();
      var cpy = _toConsumableArray(items);
      cpy.splice(index, 1);
      setItems(cpy);
    };
    return /*#__PURE__*/React__default["default"].createElement(designSystem.Box, null, items.map(function (item, index) {
      return /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
        key: index,
        mb: 25
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, "[", index, "]"), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        error: errors["".concat(name, ".").concat(index)]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
        style: styles.flexRow
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
        name: "".concat(name, ".").concat(index),
        width: "100%",
        value: item,
        onChange: function onChange(e) {
          handleInputChange(e, index);
        }
      }), /*#__PURE__*/React__default["default"].createElement(designSystem.Button, {
        type: "button",
        variant: "danger",
        size: "sm",
        onClick: function onClick(e) {
          handleRemoveButtonClick(e, index);
        }
      }, /*#__PURE__*/React__default["default"].createElement(iconsReact.TrashCan16, null))), errors["".concat(name, ".").concat(index)] && errors["".concat(name, ".").concat(index)].message && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["".concat(name, ".").concat(index)].message)));
    }), /*#__PURE__*/React__default["default"].createElement(designSystem.Button, {
      type: "button",
      size: "md",
      onClick: handleAddButtonClick
    }, /*#__PURE__*/React__default["default"].createElement(iconsReact.Add16, {
      "aria-label": "Add"
    }), " Add New Item"));
  };

  var CollectionSelect = function CollectionSelect(_ref) {
    var options = _ref.options,
      items = _ref.items,
      setItems = _ref.setItems,
      name = _ref.name,
      _ref$errors = _ref.errors,
      errors = _ref$errors === void 0 ? {} : _ref$errors;
    var _useState = React$1.useState(options),
      _useState2 = _slicedToArray(_useState, 2),
      availableOptions = _useState2[0],
      setAvailableOptions = _useState2[1];
    var filterOptions = function filterOptions() {
      var selectedOptions = items.map(function (item) {
        return item.value;
      });
      setAvailableOptions(options.filter(function (option) {
        return !selectedOptions.includes(option.value);
      }));
    };
    var handleSelectionChange = function handleSelectionChange(option, index) {
      var cpy = _toConsumableArray(items);
      cpy.splice(index, 1, option);
      setItems(cpy);
    };
    var handleAddButtonClick = function handleAddButtonClick(e) {
      e.preventDefault();
      if (items.length + 1 <= options.length) {
        setItems([].concat(_toConsumableArray(items), [availableOptions[0]]));
      }
    };
    var handleRemoveButtonClick = function handleRemoveButtonClick(e, index) {
      e.preventDefault();
      var cpy = _toConsumableArray(items);
      cpy.splice(index, 1);
      setItems(cpy);
    };
    React$1.useEffect(function () {
      filterOptions();
    }, [items]);
    React$1.useEffect(function () {
      setItems([]);
    }, [options]);
    return /*#__PURE__*/React__default["default"].createElement(designSystem.Box, null, items.map(function (item, index) {
      return /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
        key: index,
        mb: 25
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, "[", index, "]"), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        error: errors["".concat(name, ".").concat(index)]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
        style: styles.flexRow
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
        width: "100%"
      }, /*#__PURE__*/React__default["default"].createElement(Select__default["default"], {
        name: "".concat(name, ".").concat(index),
        options: availableOptions,
        value: item,
        onChange: function onChange(option) {
          handleSelectionChange(option, index);
        },
        width: "100%"
      })), /*#__PURE__*/React__default["default"].createElement(designSystem.Button, {
        type: "button",
        variant: "danger",
        size: "sm",
        onClick: function onClick(e) {
          handleRemoveButtonClick(e, index);
        }
      }, /*#__PURE__*/React__default["default"].createElement(iconsReact.TrashCan16, null))), errors["".concat(name, ".").concat(index)] && errors["".concat(name, ".").concat(index)].message && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["".concat(name, ".").concat(index)].message)));
    }), /*#__PURE__*/React__default["default"].createElement(designSystem.Button, {
      type: "button",
      size: "md",
      disabled: items.length + 1 > options.length,
      onClick: handleAddButtonClick
    }, /*#__PURE__*/React__default["default"].createElement(iconsReact.Add16, {
      "aria-label": "Add"
    }), " Add New Item"));
  };
  var CollectionSelect$1 = /*#__PURE__*/React__default["default"].memo(CollectionSelect);

  var mapParamsToOptionsArray = function mapParamsToOptionsArray(params, regex) {
    return Object.keys(params).filter(function (key) {
      return key.match(regex) && typeof params[key] === 'string';
    }).map(function (key) {
      return {
        label: params[key],
        value: params[key]
      };
    });
  };
  var mapParamsToStringArray = function mapParamsToStringArray(params, regex) {
    return Object.keys(params).filter(function (key) {
      return key.match(regex) && typeof params[key] === 'string';
    }).map(function (key) {
      return params[key];
    });
  };
  var removeParams = function removeParams(params, regex) {
    var newParams = {};
    for (var key in params) if (!regex.test(key)) newParams[key] = params[key];
    return newParams;
  };

  var CreateResource = function CreateResource(_ref) {
    var resource = _ref.resource,
      initialRecord = _ref.record;
    var history = reactRouter.useHistory();
    var _useTranslation = adminBro.useTranslation(),
      translateButton = _useTranslation.translateButton;
    var _useRecord = adminBro.useRecord(initialRecord, resource.id),
      record = _useRecord.record,
      handleChange = _useRecord.handleChange,
      submit = _useRecord.submit,
      loading = _useRecord.loading,
      setRecord = _useRecord.setRecord;
    var _useState = React$1.useState(25),
      _useState2 = _slicedToArray(_useState, 1),
      mb = _useState2[0];
    var _useState3 = React$1.useState(''),
      _useState4 = _slicedToArray(_useState3, 2),
      name = _useState4[0],
      setName = _useState4[1];
    var _useState5 = React$1.useState([]),
      _useState6 = _slicedToArray(_useState5, 2),
      attributes = _useState6[0],
      setAttributes = _useState6[1];
    var _useState7 = React$1.useState(['CREATE', 'READ', 'UPDATE', 'DELETE']),
      _useState8 = _slicedToArray(_useState7, 1),
      actions = _useState8[0];
    var _useState9 = React$1.useState([]),
      _useState10 = _slicedToArray(_useState9, 2),
      allowedActions = _useState10[0],
      setAllowedActions = _useState10[1];
    var options = actions.map(function (action) {
      return {
        label: action,
        value: action
      };
    });
    var _useState11 = React$1.useState({}),
      _useState12 = _slicedToArray(_useState11, 2),
      errors = _useState12[0],
      setErrors = _useState12[1];
    var handleSubmit = function handleSubmit(e) {
      e.preventDefault();
      submit().then(function (res) {
        var _res$data = res.data,
          redirectUrl = _res$data.redirectUrl,
          record = _res$data.record;
        var errors = record.errors;
        if (errors && Object.keys(errors).length > 0) setErrors(errors);
        if (redirectUrl) history.push(redirectUrl);
        if (record.id) handleChange({
          params: {},
          populated: {},
          errors: {}
        });
      });
      return false;
    };
    React$1.useEffect(function () {
      if (initialRecord) setRecord(initialRecord);
    }, [initialRecord]);
    React$1.useEffect(function () {
      handleChange('name', name);
    }, [name]);
    React$1.useEffect(function () {
      var params = removeParams(record.params, /attributes.(\d+)/i);
      if (attributes.length) attributes.forEach(function (attribute, index) {
        params["attributes.".concat(index)] = attribute;
      });
      setRecord(_objectSpread2(_objectSpread2({}, record), {}, {
        params: params
      }));
    }, [attributes]);
    React$1.useEffect(function () {
      var params = removeParams(record.params, /allowedActions.(\d+)/i);
      if (allowedActions.length) {
        allowedActions.forEach(function (action, index) {
          params["allowedActions.".concat(index)] = action.value;
        });
        setRecord(_objectSpread2(_objectSpread2({}, record), {}, {
          params: params
        }));
      }
    }, [allowedActions]);
    return /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      variant: "grey"
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      as: "form",
      onSubmit: handleSubmit,
      flex: true,
      flexGrow: 1,
      flexDirection: "column",
      variant: "white"
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
      mb: mb,
      error: errors.name
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, {
      required: true
    }, "Name"), /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
      name: "name",
      value: name,
      onChange: function onChange(e) {
        setName(e.target.value);
      }
    }), errors.name && errors.name.message && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors.name.message)), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
      mb: mb
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, "Attributes"), /*#__PURE__*/React__default["default"].createElement(CollectionInput, {
      name: "attributes",
      items: attributes,
      setItems: setAttributes,
      errors: errors || {}
    })), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
      mb: mb,
      error: errors.allowedActions
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, {
      required: true
    }, "Allowed Actions"), /*#__PURE__*/React__default["default"].createElement(Select__default["default"], {
      isMulti: true,
      name: "allowedActions",
      options: options,
      value: allowedActions,
      onChange: function onChange(options) {
        options ? setAllowedActions(options) : setAllowedActions([]);
      }
    }), errors.allowedActions && errors.allowedActions.message && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors.allowedActions.message)), /*#__PURE__*/React__default["default"].createElement(adminBro.BasePropertyComponent, {
      resource: resource,
      property: resource.properties.createdBy,
      record: record,
      onChange: handleChange,
      where: "edit"
    }), /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      style: styles.center
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Button, {
      type: "submit",
      variant: "primary",
      size: "lg"
    }, loading ? /*#__PURE__*/React__default["default"].createElement(designSystem.Icon, {
      icon: "Fade",
      spin: true
    }) : null, translateButton('save', resource.id)))));
  };

  var EditResource = function EditResource(_ref) {
    var resource = _ref.resource,
      initialRecord = _ref.record;
    var history = reactRouter.useHistory();
    var _useTranslation = adminBro.useTranslation(),
      translateButton = _useTranslation.translateButton;
    var _useRecord = adminBro.useRecord(initialRecord, resource.id),
      record = _useRecord.record,
      handleChange = _useRecord.handleChange,
      submit = _useRecord.submit,
      loading = _useRecord.loading,
      setRecord = _useRecord.setRecord;
    var _useState = React$1.useState(25),
      _useState2 = _slicedToArray(_useState, 1),
      mb = _useState2[0];
    var _useState3 = React$1.useState(''),
      _useState4 = _slicedToArray(_useState3, 2),
      name = _useState4[0],
      setName = _useState4[1];
    var _useState5 = React$1.useState([]),
      _useState6 = _slicedToArray(_useState5, 2),
      attributes = _useState6[0],
      setAttributes = _useState6[1];
    var _useState7 = React$1.useState(['CREATE', 'READ', 'UPDATE', 'DELETE']),
      _useState8 = _slicedToArray(_useState7, 1),
      actions = _useState8[0];
    var _useState9 = React$1.useState([]),
      _useState10 = _slicedToArray(_useState9, 2),
      allowedActions = _useState10[0],
      setAllowedActions = _useState10[1];
    var options = actions.map(function (action) {
      return {
        label: action,
        value: action
      };
    });
    var _useState11 = React$1.useState({}),
      _useState12 = _slicedToArray(_useState11, 2),
      errors = _useState12[0],
      setErrors = _useState12[1];
    var mapAttributes = function mapAttributes(params) {
      return mapParamsToStringArray(params, /attributes.(\d+)/i);
    };
    var mapAllowedActions = function mapAllowedActions(params) {
      return mapParamsToOptionsArray(params, /allowedActions.(\d+)/i);
    };
    React$1.useEffect(function () {
      if (initialRecord) {
        setRecord(initialRecord);
        var params = initialRecord.params;
        setName(params.name);
        setAttributes(mapAttributes(params));
        setAllowedActions(mapAllowedActions(params));
      }
    }, [initialRecord]);
    React$1.useEffect(function () {
      handleChange('name', name);
    }, [name]);
    React$1.useEffect(function () {
      var params = removeParams(record.params, /attributes.(\d+)/i);
      if (attributes.length) attributes.forEach(function (attribute, index) {
        params["attributes.".concat(index)] = attribute;
      });else params.attributes = [];
      setRecord(_objectSpread2(_objectSpread2({}, record), {}, {
        params: params
      }));
    }, [attributes]);
    React$1.useEffect(function () {
      var params = removeParams(record.params, /allowedActions.(\d+)/i);
      if (allowedActions.length) {
        allowedActions.forEach(function (action, index) {
          params["allowedActions.".concat(index)] = action.value;
        });
        setRecord(_objectSpread2(_objectSpread2({}, record), {}, {
          params: params
        }));
      } else {
        params.allowedActions = [];
        setRecord(_objectSpread2(_objectSpread2({}, record), {}, {
          params: params
        }));
      }
    }, [allowedActions]);
    var handleSubmit = function handleSubmit(e) {
      e.preventDefault();
      submit().then(function (res) {
        var _res$data = res.data,
          redirectUrl = _res$data.redirectUrl,
          record = _res$data.record;
        var errors = record.errors;
        if (errors && Object.keys(errors).length > 0) setErrors(errors);
        if (redirectUrl) history.push(redirectUrl);
      });
      return false;
    };
    return /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      variant: "grey"
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      as: "form",
      onSubmit: handleSubmit,
      flex: true,
      flexGrow: 1,
      flexDirection: "column",
      variant: "white"
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
      mb: mb,
      error: errors.name
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, {
      required: true
    }, "Name"), /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
      name: "name",
      value: name,
      onChange: function onChange(e) {
        setName(e.target.value);
      }
    }), errors.name && errors.name.message && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors.name.message)), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
      mb: mb
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, "Attributes"), /*#__PURE__*/React__default["default"].createElement(CollectionInput, {
      name: "attributes",
      items: attributes,
      setItems: setAttributes,
      errors: errors || {}
    })), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
      mb: mb,
      error: errors.allowedActions
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, {
      required: true
    }, "Allowed Actions"), /*#__PURE__*/React__default["default"].createElement(Select__default["default"], {
      isMulti: true,
      name: "allowedActions",
      options: options,
      value: allowedActions,
      onChange: function onChange(options) {
        options ? setAllowedActions(options) : setAllowedActions([]);
      }
    }), errors.allowedActions && errors.allowedActions.message && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors.allowedActions.message)), /*#__PURE__*/React__default["default"].createElement(adminBro.BasePropertyComponent, {
      resource: resource,
      property: resource.properties.createdBy,
      record: record,
      onChange: handleChange,
      where: "edit"
    }), /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      style: styles.center
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Button, {
      type: "submit",
      variant: "primary",
      size: "lg"
    }, loading ? /*#__PURE__*/React__default["default"].createElement(designSystem.Icon, {
      icon: "Fade",
      spin: true
    }) : null, translateButton('save', resource.id)))));
  };

  var CreatePermission = function CreatePermission(_ref) {
    var resource = _ref.resource;
      _ref.action;
      var initialRecord = _ref.record;
    var history = reactRouter.useHistory();
    var api = new adminBro.ApiClient();
    var _useTranslation = adminBro.useTranslation(),
      translateButton = _useTranslation.translateButton;
    var _useRecord = adminBro.useRecord(initialRecord, resource.id),
      record = _useRecord.record,
      handleChange = _useRecord.handleChange,
      submit = _useRecord.submit,
      loading = _useRecord.loading,
      setRecord = _useRecord.setRecord;
    var _useState = React$1.useState(25),
      _useState2 = _slicedToArray(_useState, 1),
      mb = _useState2[0];
    var _useState3 = React$1.useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      fetchingResources = _useState4[0],
      setFetchingResources = _useState4[1];
    var _useState5 = React$1.useState(''),
      _useState6 = _slicedToArray(_useState5, 2),
      name = _useState6[0],
      setName = _useState6[1];
    var _useState7 = React$1.useState([]),
      _useState8 = _slicedToArray(_useState7, 2),
      records = _useState8[0],
      setRecords = _useState8[1];
    var _useState9 = React$1.useState([]),
      _useState10 = _slicedToArray(_useState9, 2),
      resources$1 = _useState10[0],
      setResources = _useState10[1];
    var _useState11 = React$1.useState(null),
      _useState12 = _slicedToArray(_useState11, 2),
      selectedResource = _useState12[0],
      setSelectedResource = _useState12[1];
    var _useState13 = React$1.useState([]),
      _useState14 = _slicedToArray(_useState13, 2),
      attributes = _useState14[0],
      setAttributes = _useState14[1];
    var _useState15 = React$1.useState(false),
      _useState16 = _slicedToArray(_useState15, 2),
      allowAllAttributes = _useState16[0],
      setAllowAllAttributes = _useState16[1];
    var _useState17 = React$1.useState(true),
      _useState18 = _slicedToArray(_useState17, 2),
      attributesRequired = _useState18[0],
      setAttributesRequired = _useState18[1];
    var _useState19 = React$1.useState([]),
      _useState20 = _slicedToArray(_useState19, 2),
      selectedAttributes = _useState20[0],
      setSelectedAttributes = _useState20[1];
    var _useState21 = React$1.useState([]),
      _useState22 = _slicedToArray(_useState21, 2),
      allowedActions = _useState22[0],
      setAllowedActions = _useState22[1];
    var _useState23 = React$1.useState(null),
      _useState24 = _slicedToArray(_useState23, 2),
      selectedAction = _useState24[0],
      setSelectedAction = _useState24[1];
    var _useState25 = React$1.useState(['OWN', 'ANY'].map(function (possession) {
        return {
          label: possession,
          value: possession
        };
      })),
      _useState26 = _slicedToArray(_useState25, 1),
      possessions = _useState26[0];
    var _useState27 = React$1.useState(null),
      _useState28 = _slicedToArray(_useState27, 2),
      selectedPossession = _useState28[0],
      setSelectedPossession = _useState28[1];
    var _useState29 = React$1.useState({}),
      _useState30 = _slicedToArray(_useState29, 2),
      errors = _useState30[0],
      setErrors = _useState30[1];
    var mapResources = function mapResources() {
      return records.map(function (record) {
        return {
          label: record.params.name,
          value: record.id
        };
      });
    };
    var mapAttributes = function mapAttributes(params) {
      return mapParamsToOptionsArray(params, /attributes.(\d+)/i);
    };
    var mapAllowedActions = function mapAllowedActions(params) {
      return mapParamsToOptionsArray(params, /allowedActions.(\d+)/i);
    };
    var reverseAttributes = function reverseAttributes(attributes) {
      return attributes && attributes.length > 0 && attributes.map(function (attribute) {
        return {
          label: allowAllAttributes ? "!".concat(attribute.label) : attribute.label.replace('!', ''),
          value: allowAllAttributes ? "!".concat(attribute.value) : attribute.value.replace('!', '')
        };
      }) || [];
    };
    var fetchResources = function fetchResources() {
      setFetchingResources(true);
      api.resourceAction({
        resourceId: resources.Resources,
        actionName: 'list?perPage=null'
      }).then(function (res) {
        var records = res.data.records;
        setRecords(records);
      })["catch"](function (err) {
        return console.error(err);
      })["finally"](function () {
        setFetchingResources(false);
      });
    };
    var handleSubmit = function handleSubmit(e) {
      e.preventDefault();
      submit().then(function (res) {
        var _res$data = res.data,
          redirectUrl = _res$data.redirectUrl,
          record = _res$data.record;
        var errors = record.errors;
        if (errors && Object.keys(errors).length > 0) setErrors(errors);
        if (redirectUrl) history.push(redirectUrl);
        if (record.id) handleChange({
          params: {},
          populated: {},
          errors: {}
        });
      });
      return false;
    };
    React$1.useEffect(function () {
      fetchResources();
    }, []);
    React$1.useEffect(function () {
      if (initialRecord) setRecord(initialRecord);
    }, [initialRecord]);
    React$1.useEffect(function () {
      if (records && Array.isArray(records) && records.length > 0) {
        var _resources = mapResources();
        setResources(_resources);
      }
    }, [records]);
    React$1.useEffect(function () {
      handleChange('name', name);
    }, [name]);
    React$1.useEffect(function () {
      if (selectedResource) handleChange('resource', selectedResource.value);
      if (selectedResource && selectedResource.value) {
        var id = selectedResource.value;
        var _record = records.find(function (record) {
          return record.id === id;
        });
        if (_record) {
          var _attributes = mapAttributes(_record.params);
          var _allowedActions = mapAllowedActions(_record.params);
          setAttributes(_attributes);
          setSelectedAttributes([]);
          setAllowedActions(_allowedActions);
        }
      }
    }, [selectedResource]);
    React$1.useEffect(function () {
      handleChange('allowAllAttributes', allowAllAttributes);
      if (allowAllAttributes) {
        setAttributesRequired(false);
        setAttributes(reverseAttributes(attributes));
        setSelectedAttributes(reverseAttributes(selectedAttributes));
      } else {
        setAttributesRequired(true);
        setAttributes(reverseAttributes(attributes));
        setSelectedAttributes(reverseAttributes(selectedAttributes));
      }
    }, [allowAllAttributes]);
    React$1.useEffect(function () {
      if (selectedAction) handleChange('action', selectedAction.value);
    }, [selectedAction]);
    React$1.useEffect(function () {
      var params = removeParams(record.params, /attributes.(\d+)/i);
      if (selectedAttributes.length) selectedAttributes.forEach(function (attribute, index) {
        params["attributes.".concat(index)] = attribute.value;
      });
      setRecord(_objectSpread2(_objectSpread2({}, record), {}, {
        params: params
      }));
    }, [selectedAttributes]);
    React$1.useEffect(function () {
      if (selectedPossession) handleChange('possession', selectedPossession.value);
    }, [selectedPossession]);
    return /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      variant: "grey"
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      as: "form",
      onSubmit: handleSubmit,
      flex: true,
      flexGrow: 1,
      flexDirection: "column",
      variant: "white"
    }, fetchingResources ? /*#__PURE__*/React__default["default"].createElement(designSystem.Loader, null) : /*#__PURE__*/React__default["default"].createElement("div", null, /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
      mb: mb,
      error: errors.name
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, {
      required: true
    }, "Name"), /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
      value: name,
      onChange: function onChange(e) {
        setName(e.target.value);
      }
    }), errors.name && errors.name.message && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors.name.message)), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
      mb: mb,
      error: errors.resource
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, {
      required: true
    }, "Resource"), /*#__PURE__*/React__default["default"].createElement(Select__default["default"], {
      options: resources$1,
      value: selectedResource,
      onChange: function onChange(option) {
        setSelectedResource(option);
      }
    }), errors.resource && errors.resource.message && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors.resource.message)), selectedResource && allowedActions.length > 0 && /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
      mb: mb,
      error: errors.action
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, {
      required: true
    }, "Action"), /*#__PURE__*/React__default["default"].createElement(Select__default["default"], {
      options: allowedActions,
      value: selectedAction,
      onChange: setSelectedAction
    }), errors.action && errors.action.message && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors.action.message)), selectedResource && selectedAction && ['READ', 'UPDATE'].includes(selectedAction.value) && attributes.length > 0 && /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
      mb: mb,
      error: errors.attributes
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, {
      required: attributesRequired
    }, "Attributes"), /*#__PURE__*/React__default["default"].createElement(Select__default["default"], {
      isMulti: true,
      options: attributes,
      value: selectedAttributes,
      onChange: function onChange(options) {
        options ? setSelectedAttributes(options) : setSelectedAttributes([]);
      }
    }), errors.attributes && errors.attributes.message && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors.attributes.message)), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
      mb: mb
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      style: styles.flexRow
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.CheckBox, {
      checked: allowAllAttributes,
      onChange: function onChange() {
        setAllowAllAttributes(!allowAllAttributes);
      }
    }), /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, "Allow All Attributes")))), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
      mb: mb,
      error: errors.possession
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, {
      required: true
    }, "Possession"), /*#__PURE__*/React__default["default"].createElement(Select__default["default"], {
      options: possessions,
      value: selectedPossession,
      onChange: setSelectedPossession
    }), errors.possession && errors.possession.message && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors.possession.message)), /*#__PURE__*/React__default["default"].createElement(adminBro.BasePropertyComponent, {
      resource: resource,
      property: resource.properties.createdBy,
      record: record,
      onChange: handleChange,
      where: "edit"
    }), /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      style: styles.center
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Button, {
      type: "submit",
      variant: "primary",
      size: "lg"
    }, loading ? /*#__PURE__*/React__default["default"].createElement(designSystem.Icon, {
      icon: "Fade",
      spin: true
    }) : null, translateButton('save', resource.id))))));
  };

  var EditPermission = function EditPermission(_ref) {
    var resource = _ref.resource;
      _ref.action;
      var initialRecord = _ref.record;
    var history = reactRouter.useHistory();
    var api = new adminBro.ApiClient();
    var _useTranslation = adminBro.useTranslation(),
      translateButton = _useTranslation.translateButton;
    var _useRecord = adminBro.useRecord(initialRecord, resource.id),
      record = _useRecord.record,
      handleChange = _useRecord.handleChange,
      submit = _useRecord.submit,
      loading = _useRecord.loading,
      setRecord = _useRecord.setRecord;
    var _useState = React$1.useState(25),
      _useState2 = _slicedToArray(_useState, 1),
      mb = _useState2[0];
    var _useState3 = React$1.useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      fetchingResources = _useState4[0],
      setFetchingResources = _useState4[1];
    var _useState5 = React$1.useState(''),
      _useState6 = _slicedToArray(_useState5, 2),
      name = _useState6[0],
      setName = _useState6[1];
    var _useState7 = React$1.useState([]),
      _useState8 = _slicedToArray(_useState7, 2),
      records = _useState8[0],
      setRecords = _useState8[1];
    var _useState9 = React$1.useState([]),
      _useState10 = _slicedToArray(_useState9, 2),
      resources$1 = _useState10[0],
      setResources = _useState10[1];
    var _useState11 = React$1.useState(null),
      _useState12 = _slicedToArray(_useState11, 2),
      selectedResource = _useState12[0],
      setSelectedResource = _useState12[1];
    var _useState13 = React$1.useState([]),
      _useState14 = _slicedToArray(_useState13, 2),
      attributes = _useState14[0],
      setAttributes = _useState14[1];
    var _useState15 = React$1.useState(false),
      _useState16 = _slicedToArray(_useState15, 2),
      allowAllAttributes = _useState16[0],
      setAllowAllAttributes = _useState16[1];
    var _useState17 = React$1.useState(true),
      _useState18 = _slicedToArray(_useState17, 2),
      attributesRequired = _useState18[0],
      setAttributesRequired = _useState18[1];
    var _useState19 = React$1.useState([]),
      _useState20 = _slicedToArray(_useState19, 2),
      selectedAttributes = _useState20[0],
      setSelectedAttributes = _useState20[1];
    var _useState21 = React$1.useState([]),
      _useState22 = _slicedToArray(_useState21, 2),
      allowedActions = _useState22[0],
      setAllowedActions = _useState22[1];
    var _useState23 = React$1.useState(null),
      _useState24 = _slicedToArray(_useState23, 2),
      selectedAction = _useState24[0],
      setSelectedAction = _useState24[1];
    var _useState25 = React$1.useState(['OWN', 'ANY'].map(function (possession) {
        return {
          label: possession,
          value: possession
        };
      })),
      _useState26 = _slicedToArray(_useState25, 1),
      possessions = _useState26[0];
    var _useState27 = React$1.useState(null),
      _useState28 = _slicedToArray(_useState27, 2),
      selectedPossession = _useState28[0],
      setSelectedPossession = _useState28[1];
    var _useState29 = React$1.useState({}),
      _useState30 = _slicedToArray(_useState29, 2),
      errors = _useState30[0],
      setErrors = _useState30[1];
    var mapResources = function mapResources() {
      return records.map(function (record) {
        return {
          label: record.params.name,
          value: record.id
        };
      });
    };
    var mapAttributes = function mapAttributes(params) {
      return mapParamsToOptionsArray(params, /attributes.(\d+)/i);
    };
    var mapAllowedActions = function mapAllowedActions(params) {
      return mapParamsToOptionsArray(params, /allowedActions.(\d+)/i);
    };
    var reverseAttributes = function reverseAttributes(attributes) {
      return attributes && attributes.length > 0 && attributes.map(function (attribute) {
        return {
          label: allowAllAttributes ? attribute.label.includes('!') ? attribute.label : "!".concat(attribute.label) : attribute.label.replace('!', ''),
          value: allowAllAttributes ? attribute.value.includes('!') ? attribute.value : "!".concat(attribute.value) : attribute.value.replace('!', '')
        };
      }) || [];
    };
    var fetchResources = function fetchResources() {
      setFetchingResources(true);
      api.resourceAction({
        resourceId: resources.Resources,
        actionName: 'list?perPage=null'
      }).then(function (res) {
        var records = res.data.records;
        setRecords(records);
      })["catch"](function (err) {
        return console.error(err);
      })["finally"](function () {
        setFetchingResources(false);
      });
    };
    var handleSubmit = function handleSubmit(e) {
      e.preventDefault();
      submit().then(function (res) {
        var _res$data = res.data,
          redirectUrl = _res$data.redirectUrl,
          record = _res$data.record;
        var errors = record.errors;
        if (errors && Object.keys(errors).length > 0) setErrors(errors);
        if (redirectUrl) history.push(redirectUrl);
      });
      return false;
    };
    React$1.useEffect(function () {
      fetchResources();
    }, []);
    React$1.useEffect(function () {
      if (initialRecord) {
        setRecord(initialRecord);
        var params = initialRecord.params;
        if (params.name) setName(params.name);
      }
    }, [initialRecord]);
    React$1.useEffect(function () {
      if (!fetchingResources && resources$1.length > 0) {
        var params = initialRecord.params;
        if (params.resource) setSelectedResource(resources$1.find(function (resource) {
          return resource.value === params.resource;
        }));
        if (params.possession) setSelectedPossession(possessions.find(function (possession) {
          return possession.value === params.possession;
        }));
      }
    }, [fetchingResources, resources$1]);
    React$1.useEffect(function () {
      if (!fetchingResources && allowedActions.length > 0) {
        var params = initialRecord.params;
        if (params.action) setSelectedAction(allowedActions.find(function (action) {
          return action.value === params.action;
        }));
        if (params.allowAllAttributes) setAllowAllAttributes(params.allowAllAttributes);
        setSelectedAttributes(mapAttributes(params));
      }
    }, [fetchingResources, allowedActions]);
    React$1.useEffect(function () {
      if (records && Array.isArray(records) && records.length > 0) {
        var _resources = mapResources();
        setResources(_resources);
      }
    }, [records]);
    React$1.useEffect(function () {
      handleChange('name', name);
    }, [name]);
    React$1.useEffect(function () {
      if (selectedResource) handleChange('resource', selectedResource.value);
      if (selectedResource && selectedResource.value) {
        var id = selectedResource.value;
        var _record = records.find(function (record) {
          return record.id === id;
        });
        if (_record) {
          var _attributes = mapAttributes(_record.params);
          var _allowedActions = mapAllowedActions(_record.params);
          setAttributes(_attributes);
          setSelectedAttributes([]);
          setAllowedActions(_allowedActions);
        }
      }
    }, [selectedResource]);
    React$1.useEffect(function () {
      if (selectedAction) handleChange('action', selectedAction.value);
    }, [selectedAction]);
    React$1.useEffect(function () {
      handleChange('allowAllAttributes', allowAllAttributes);
      if (allowAllAttributes) {
        setAttributesRequired(false);
        setAttributes(reverseAttributes(attributes));
        setSelectedAttributes(reverseAttributes(selectedAttributes));
      } else {
        setAttributesRequired(true);
        setAttributes(reverseAttributes(attributes));
        setSelectedAttributes(reverseAttributes(selectedAttributes));
      }
    }, [allowAllAttributes]);
    React$1.useEffect(function () {
      var params = removeParams(record.params, /attributes.(\d+)/i);
      if (selectedAttributes.length) selectedAttributes.forEach(function (attribute, index) {
        params["attributes.".concat(index)] = attribute.value;
      });else params.attributes = [];
      setRecord(_objectSpread2(_objectSpread2({}, record), {}, {
        params: params
      }));
    }, [selectedAttributes]);
    React$1.useEffect(function () {
      if (selectedPossession) handleChange('possession', selectedPossession.value);
    }, [selectedPossession]);
    return /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      variant: "grey"
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      as: "form",
      onSubmit: handleSubmit,
      flex: true,
      flexGrow: 1,
      flexDirection: "column",
      variant: "white"
    }, fetchingResources ? /*#__PURE__*/React__default["default"].createElement(designSystem.Loader, null) : /*#__PURE__*/React__default["default"].createElement("div", null, /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
      mb: mb,
      error: errors.name
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, {
      required: true
    }, "Name"), /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
      value: name,
      onChange: function onChange(e) {
        setName(e.target.value);
      }
    }), errors.name && errors.name.message && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors.name.message)), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
      mb: mb,
      error: errors.resource
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, {
      required: true
    }, "Resource"), /*#__PURE__*/React__default["default"].createElement(Select__default["default"], {
      options: resources$1,
      value: selectedResource,
      onChange: function onChange(option) {
        setSelectedResource(option);
      }
    }), errors.resource && errors.resource.message && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors.resource.message)), selectedResource && allowedActions.length > 0 && /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
      mb: mb,
      error: errors.action
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, {
      required: true
    }, "Action"), /*#__PURE__*/React__default["default"].createElement(Select__default["default"], {
      options: allowedActions,
      value: selectedAction,
      onChange: setSelectedAction
    }), errors.action && errors.action.message && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors.action.message)), selectedResource && selectedAction && ['READ', 'UPDATE'].includes(selectedAction.value) && attributes.length > 0 && /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
      mb: mb,
      error: errors.attributes
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, {
      required: attributesRequired
    }, "Attributes"), /*#__PURE__*/React__default["default"].createElement(Select__default["default"], {
      isMulti: true,
      options: attributes,
      value: selectedAttributes,
      onChange: function onChange(options) {
        options ? setSelectedAttributes(options) : setSelectedAttributes([]);
      }
    }), errors.attributes && errors.attributes.message && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors.attributes.message)), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
      mb: mb
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      style: styles.flexRow
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.CheckBox, {
      checked: allowAllAttributes,
      onChange: function onChange() {
        setAllowAllAttributes(!allowAllAttributes);
      }
    }), /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, "Allow All Attributes")))), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
      mb: mb,
      error: errors.possession
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, {
      required: true
    }, "Possession"), /*#__PURE__*/React__default["default"].createElement(Select__default["default"], {
      options: possessions,
      value: selectedPossession,
      onChange: setSelectedPossession
    }), errors.possession && errors.possession.message && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors.possession.message)), /*#__PURE__*/React__default["default"].createElement(adminBro.BasePropertyComponent, {
      resource: resource,
      property: resource.properties.createdBy,
      record: record,
      onChange: handleChange,
      where: "edit"
    }), /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      style: styles.center
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Button, {
      type: "submit",
      variant: "primary",
      size: "lg"
    }, loading ? /*#__PURE__*/React__default["default"].createElement(designSystem.Icon, {
      icon: "Fade",
      spin: true
    }) : null, translateButton('save', resource.id))))));
  };

  var CreateRole = function CreateRole(_ref) {
    var resource = _ref.resource;
      _ref.action;
      var initialRecord = _ref.record;
    var history = reactRouter.useHistory();
    var api = new adminBro.ApiClient();
    var _useTranslation = adminBro.useTranslation(),
      translateButton = _useTranslation.translateButton;
    var _useRecord = adminBro.useRecord(initialRecord, resource.id),
      record = _useRecord.record,
      handleChange = _useRecord.handleChange,
      submit = _useRecord.submit,
      loading = _useRecord.loading,
      setRecord = _useRecord.setRecord;
    var _useState = React$1.useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      fetchingPermissions = _useState2[0],
      setFetchingPermissions = _useState2[1];
    var _useState3 = React$1.useState(25),
      _useState4 = _slicedToArray(_useState3, 1),
      mb = _useState4[0];
    var _useState5 = React$1.useState(''),
      _useState6 = _slicedToArray(_useState5, 2),
      name = _useState6[0],
      setName = _useState6[1];
    var _useState7 = React$1.useState([]),
      _useState8 = _slicedToArray(_useState7, 2),
      records = _useState8[0],
      setRecords = _useState8[1];
    var _useState9 = React$1.useState([]),
      _useState10 = _slicedToArray(_useState9, 2),
      permissions = _useState10[0],
      setPermissions = _useState10[1];
    var _useState11 = React$1.useState([]),
      _useState12 = _slicedToArray(_useState11, 2),
      selectedPermissions = _useState12[0],
      setSelectedPermissions = _useState12[1];
    var _useState13 = React$1.useState({}),
      _useState14 = _slicedToArray(_useState13, 2),
      errors = _useState14[0],
      setErrors = _useState14[1];
    var mapPermissions = function mapPermissions() {
      return records.map(function (record) {
        return {
          label: record.params.name,
          value: record.id
        };
      });
    };
    var fetchPermissions = function fetchPermissions() {
      setFetchingPermissions(true);
      api.resourceAction({
        resourceId: resources.Privileges,
        actionName: 'list?perPage=null'
      }).then(function (res) {
        var records = res.data.records;
        setRecords(records);
      })["catch"](function (err) {
        return console.error(err);
      })["finally"](function () {
        setFetchingPermissions(false);
      });
    };
    var handleSubmit = function handleSubmit(e) {
      e.preventDefault();
      submit().then(function (res) {
        var _res$data = res.data,
          redirectUrl = _res$data.redirectUrl,
          record = _res$data.record;
        var errors = record.errors;
        if (errors && Object.keys(errors).length > 0) setErrors(errors);
        if (redirectUrl) history.push(redirectUrl);
        if (record.id) handleChange({
          params: {},
          populated: {},
          errors: {}
        });
      });
      return false;
    };
    React$1.useEffect(function () {
      fetchPermissions();
    }, []);
    React$1.useEffect(function () {
      if (initialRecord) setRecord(initialRecord);
    }, [initialRecord]);
    React$1.useEffect(function () {
      if (records && Array.isArray(records) && records.length > 0) {
        var _permissions = mapPermissions();
        setPermissions(_permissions);
      }
    }, [records]);
    React$1.useEffect(function () {
      handleChange('name', name);
    }, [name]);
    React$1.useEffect(function () {
      var params = removeParams(record.params, /permissions.(\d+)/i);
      if (selectedPermissions.length) selectedPermissions.forEach(function (permission, index) {
        params["permissions.".concat(index)] = permission.value;
      });
      setRecord(_objectSpread2(_objectSpread2({}, record), {}, {
        params: params
      }));
    }, [selectedPermissions]);
    return /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      variant: "grey"
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      as: "form",
      onSubmit: handleSubmit,
      flex: true,
      flexGrow: 1,
      flexDirection: "column",
      variant: "white"
    }, fetchingPermissions ? /*#__PURE__*/React__default["default"].createElement(designSystem.Loader, null) : /*#__PURE__*/React__default["default"].createElement("div", null, /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
      mb: mb,
      error: errors.name
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, {
      required: true
    }, "Name"), /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
      value: name,
      onChange: function onChange(e) {
        setName(e.target.value);
      }
    }), errors.name && errors.name.message && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors.name.message)), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
      mb: mb,
      error: errors.permissions
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, {
      required: true
    }, "Permissions"), /*#__PURE__*/React__default["default"].createElement(CollectionSelect$1, {
      name: "permissions",
      options: permissions,
      items: selectedPermissions,
      setItems: setSelectedPermissions
    }), errors.permissions && errors.permissions.message && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors.permissions.message)), /*#__PURE__*/React__default["default"].createElement(adminBro.BasePropertyComponent, {
      resource: resource,
      property: resource.properties.allowThisTagsOnly,
      record: record,
      onChange: handleChange,
      where: "edit"
    }), /*#__PURE__*/React__default["default"].createElement(adminBro.BasePropertyComponent, {
      resource: resource,
      property: resource.properties.authorizedOwnWebsites,
      record: record,
      onChange: handleChange,
      where: "edit"
    }), /*#__PURE__*/React__default["default"].createElement(adminBro.BasePropertyComponent, {
      resource: resource,
      property: resource.properties.clientAccess,
      record: record,
      onChange: handleChange,
      where: "edit"
    }), /*#__PURE__*/React__default["default"].createElement(adminBro.BasePropertyComponent, {
      resource: resource,
      property: resource.properties.createdBy,
      record: record,
      onChange: handleChange,
      where: "edit"
    }), /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      style: styles.center
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Button, {
      type: "submit",
      variant: "primary",
      size: "lg"
    }, loading ? /*#__PURE__*/React__default["default"].createElement(designSystem.Icon, {
      icon: "Fade",
      spin: true
    }) : null, translateButton('save', resource.id))))));
  };

  var EditRole = function EditRole(_ref) {
    var resource = _ref.resource;
      _ref.action;
      var initialRecord = _ref.record;
    var history = reactRouter.useHistory();
    var api = new adminBro.ApiClient();
    var _useTranslation = adminBro.useTranslation(),
      translateButton = _useTranslation.translateButton;
    var _useRecord = adminBro.useRecord(initialRecord, resource.id),
      record = _useRecord.record,
      handleChange = _useRecord.handleChange,
      submit = _useRecord.submit,
      loading = _useRecord.loading,
      setRecord = _useRecord.setRecord;
    var _useState = React$1.useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      fetchingPermissions = _useState2[0],
      setFetchingPermissions = _useState2[1];
    var _useState3 = React$1.useState(25),
      _useState4 = _slicedToArray(_useState3, 1),
      mb = _useState4[0];
    var _useState5 = React$1.useState(''),
      _useState6 = _slicedToArray(_useState5, 2),
      name = _useState6[0],
      setName = _useState6[1];
    var _useState7 = React$1.useState([]),
      _useState8 = _slicedToArray(_useState7, 2),
      records = _useState8[0],
      setRecords = _useState8[1];
    var _useState9 = React$1.useState([]),
      _useState10 = _slicedToArray(_useState9, 2),
      permissions = _useState10[0],
      setPermissions = _useState10[1];
    var _useState11 = React$1.useState([]),
      _useState12 = _slicedToArray(_useState11, 2),
      selectedPermissions = _useState12[0],
      setSelectedPermissions = _useState12[1];
    var _useState13 = React$1.useState({}),
      _useState14 = _slicedToArray(_useState13, 2),
      errors = _useState14[0],
      setErrors = _useState14[1];
    var mapPermissions = function mapPermissions() {
      return records.map(function (record) {
        return {
          label: record.params.name,
          value: record.id
        };
      });
    };
    var fetchPermissions = function fetchPermissions() {
      setFetchingPermissions(true);
      api.resourceAction({
        resourceId: resources.Privileges,
        actionName: 'list?perPage=null'
      }).then(function (res) {
        var records = res.data.records;
        setRecords(records);
      })["catch"](function (err) {
        return console.error(err);
      })["finally"](function () {
        setFetchingPermissions(false);
      });
    };
    var handleSubmit = function handleSubmit(e) {
      e.preventDefault();
      submit().then(function (res) {
        var _res$data = res.data,
          redirectUrl = _res$data.redirectUrl,
          record = _res$data.record;
        var errors = record.errors;
        if (errors && Object.keys(errors).length > 0) setErrors(errors);
        if (redirectUrl) history.push(redirectUrl);
      });
      return false;
    };
    React$1.useEffect(function () {
      fetchPermissions();
    }, []);
    React$1.useEffect(function () {
      if (initialRecord) {
        setRecord(initialRecord);
        var params = initialRecord.params;
        if (params.name) setName(params.name);
      }
    }, [initialRecord]);
    React$1.useEffect(function () {
      if (records && Array.isArray(records) && records.length > 0) {
        var _permissions = mapPermissions();
        setPermissions(_permissions);
      }
    }, [records]);
    React$1.useEffect(function () {
      if (!fetchingPermissions && permissions.length > 0) {
        var params = initialRecord.params;
        var _selectedPermissions = mapParamsToStringArray(params, /permissions.(\d+)/i);
        setSelectedPermissions(permissions.filter(function (permission) {
          return _selectedPermissions.includes(permission.value);
        }));
      }
    }, [fetchingPermissions, permissions]);
    React$1.useEffect(function () {
      handleChange('name', name);
    }, [name]);
    React$1.useEffect(function () {
      var params = removeParams(record.params, /permissions.(\d+)/i);
      if (selectedPermissions.length) selectedPermissions.forEach(function (permission, index) {
        params["permissions.".concat(index)] = permission.value;
      });else params.permissions = [];
      setRecord(_objectSpread2(_objectSpread2({}, record), {}, {
        params: params
      }));
    }, [selectedPermissions]);
    return /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      variant: "grey"
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      as: "form",
      onSubmit: handleSubmit,
      flex: true,
      flexGrow: 1,
      flexDirection: "column",
      variant: "white"
    }, fetchingPermissions ? /*#__PURE__*/React__default["default"].createElement(designSystem.Loader, null) : /*#__PURE__*/React__default["default"].createElement("div", null, /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
      mb: mb,
      error: errors.name
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, {
      required: true
    }, "Name"), /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
      value: name,
      onChange: function onChange(e) {
        setName(e.target.value);
      }
    }), errors.name && errors.name.message && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors.name.message)), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
      mb: mb,
      error: errors.permissions
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, {
      required: true
    }, "Permissions"), /*#__PURE__*/React__default["default"].createElement(CollectionSelect$1, {
      name: "permissions",
      options: permissions,
      items: selectedPermissions,
      setItems: setSelectedPermissions
    }), errors.permissions && errors.permissions.message && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors.permissions.message)), /*#__PURE__*/React__default["default"].createElement(adminBro.BasePropertyComponent, {
      resource: resource,
      property: resource.properties.allowThisTagsOnly,
      record: record,
      onChange: handleChange,
      where: "edit"
    }), /*#__PURE__*/React__default["default"].createElement(adminBro.BasePropertyComponent, {
      resource: resource,
      property: resource.properties.authorizedOwnWebsites,
      record: record,
      onChange: handleChange,
      where: "edit"
    }), /*#__PURE__*/React__default["default"].createElement(adminBro.BasePropertyComponent, {
      resource: resource,
      property: resource.properties.clientAccess,
      record: record,
      onChange: handleChange,
      where: "edit"
    }), /*#__PURE__*/React__default["default"].createElement(adminBro.BasePropertyComponent, {
      resource: resource,
      property: resource.properties.createdBy,
      record: record,
      onChange: handleChange,
      where: "edit"
    }), /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      style: styles.center
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Button, {
      type: "submit",
      variant: "primary",
      size: "lg"
    }, loading ? /*#__PURE__*/React__default["default"].createElement(designSystem.Icon, {
      icon: "Fade",
      spin: true
    }) : null, translateButton('save', resource.id))))));
  };

  var countries = [{
    name: 'Afghanistan',
    code: 'AF',
    capital: 'Kabul',
    region: 'AS',
    currency: {
      code: 'AFN',
      name: 'Afghan afghani',
      symbol: '؋'
    },
    language: {
      code: 'ps',
      name: 'Pashto'
    },
    flag: 'https://restcountries.eu/data/afg.svg'
  }, {
    name: 'Åland Islands',
    code: 'AX',
    capital: 'Mariehamn',
    region: 'EU',
    currency: {
      code: 'EUR',
      name: 'Euro',
      symbol: '€'
    },
    language: {
      code: 'sv',
      name: 'Swedish'
    },
    flag: 'https://restcountries.eu/data/ala.svg'
  }, {
    name: 'Albania',
    code: 'AL',
    capital: 'Tirana',
    region: 'EU',
    currency: {
      code: 'ALL',
      name: 'Albanian lek',
      symbol: 'L'
    },
    language: {
      code: 'sq',
      name: 'Albanian'
    },
    flag: 'https://restcountries.eu/data/alb.svg'
  }, {
    name: 'Algeria',
    code: 'DZ',
    capital: 'Algiers',
    region: 'AF',
    currency: {
      code: 'DZD',
      name: 'Algerian dinar',
      symbol: 'د.ج'
    },
    language: {
      code: 'ar',
      name: 'Arabic'
    },
    flag: 'https://restcountries.eu/data/dza.svg'
  }, {
    name: 'American Samoa',
    code: 'AS',
    capital: 'Pago Pago',
    region: 'OC',
    currency: {
      code: 'USD',
      name: 'United State Dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/asm.svg'
  }, {
    name: 'Andorra',
    code: 'AD',
    capital: 'Andorra la Vella',
    region: 'EU',
    currency: {
      code: 'EUR',
      name: 'Euro',
      symbol: '€'
    },
    language: {
      code: 'ca',
      name: 'Catalan'
    },
    flag: 'https://restcountries.eu/data/and.svg'
  }, {
    name: 'Angola',
    code: 'AO',
    capital: 'Luanda',
    region: 'AF',
    currency: {
      code: 'AOA',
      name: 'Angolan kwanza',
      symbol: 'Kz'
    },
    language: {
      code: 'pt',
      name: 'Portuguese'
    },
    flag: 'https://restcountries.eu/data/ago.svg'
  }, {
    name: 'Anguilla',
    code: 'AI',
    capital: 'The Valley',
    region: 'NA',
    currency: {
      code: 'XCD',
      name: 'East Caribbean dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/aia.svg'
  }, {
    name: 'Antigua and Barbuda',
    code: 'AG',
    capital: "Saint John's",
    region: 'NA',
    currency: {
      code: 'XCD',
      name: 'East Caribbean dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/atg.svg'
  }, {
    name: 'Argentina',
    code: 'AR',
    capital: 'Buenos Aires',
    region: 'SA',
    currency: {
      code: 'ARS',
      name: 'Argentine peso',
      symbol: '$'
    },
    language: {
      code: 'es',
      name: 'Spanish'
    },
    flag: 'https://restcountries.eu/data/arg.svg'
  }, {
    name: 'Armenia',
    code: 'AM',
    capital: 'Yerevan',
    region: 'AS',
    currency: {
      code: 'AMD',
      name: 'Armenian dram',
      symbol: null
    },
    language: {
      code: 'hy',
      name: 'Armenian'
    },
    flag: 'https://restcountries.eu/data/arm.svg'
  }, {
    name: 'Aruba',
    code: 'AW',
    capital: 'Oranjestad',
    region: 'SA',
    currency: {
      code: 'AWG',
      name: 'Aruban florin',
      symbol: 'ƒ'
    },
    language: {
      code: 'nl',
      name: 'Dutch'
    },
    flag: 'https://restcountries.eu/data/abw.svg'
  }, {
    name: 'Australia',
    code: 'AU',
    capital: 'Canberra',
    region: 'OC',
    currency: {
      code: 'AUD',
      name: 'Australian dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/aus.svg'
  }, {
    name: 'Austria',
    code: 'AT',
    capital: 'Vienna',
    region: 'EU',
    currency: {
      code: 'EUR',
      name: 'Euro',
      symbol: '€'
    },
    language: {
      code: 'de',
      name: 'German'
    },
    flag: 'https://restcountries.eu/data/aut.svg'
  }, {
    name: 'Azerbaijan',
    code: 'AZ',
    capital: 'Baku',
    region: 'AS',
    currency: {
      code: 'AZN',
      name: 'Azerbaijani manat',
      symbol: null
    },
    language: {
      code: 'az',
      name: 'Azerbaijani'
    },
    flag: 'https://restcountries.eu/data/aze.svg'
  }, {
    name: 'Bahamas',
    code: 'BS',
    capital: 'Nassau',
    region: 'NA',
    currency: {
      code: 'BSD',
      name: 'Bahamian dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/bhs.svg'
  }, {
    name: 'Bahrain',
    code: 'BH',
    capital: 'Manama',
    region: 'AS',
    currency: {
      code: 'BHD',
      name: 'Bahraini dinar',
      symbol: '.د.ب'
    },
    language: {
      code: 'ar',
      name: 'Arabic'
    },
    flag: 'https://restcountries.eu/data/bhr.svg'
  }, {
    name: 'Bangladesh',
    code: 'BD',
    capital: 'Dhaka',
    region: 'AS',
    currency: {
      code: 'BDT',
      name: 'Bangladeshi taka',
      symbol: '৳'
    },
    language: {
      code: 'bn',
      name: 'Bengali'
    },
    flag: 'https://restcountries.eu/data/bgd.svg'
  }, {
    name: 'Barbados',
    code: 'BB',
    capital: 'Bridgetown',
    region: 'NA',
    currency: {
      code: 'BBD',
      name: 'Barbadian dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/brb.svg'
  }, {
    name: 'Belarus',
    code: 'BY',
    capital: 'Minsk',
    region: 'EU',
    currency: {
      code: 'BYN',
      name: 'New Belarusian ruble',
      symbol: 'Br'
    },
    language: {
      code: 'be',
      name: 'Belarusian'
    },
    flag: 'https://restcountries.eu/data/blr.svg'
  }, {
    name: 'Belgium',
    code: 'BE',
    capital: 'Brussels',
    region: 'EU',
    currency: {
      code: 'EUR',
      name: 'Euro',
      symbol: '€'
    },
    language: {
      code: 'nl',
      name: 'Dutch'
    },
    flag: 'https://restcountries.eu/data/bel.svg'
  }, {
    name: 'Belize',
    code: 'BZ',
    capital: 'Belmopan',
    region: 'NA',
    currency: {
      code: 'BZD',
      name: 'Belize dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/blz.svg'
  }, {
    name: 'Benin',
    code: 'BJ',
    capital: 'Porto-Novo',
    region: 'AF',
    currency: {
      code: 'XOF',
      name: 'West African CFA franc',
      symbol: 'Fr'
    },
    language: {
      code: 'fr',
      name: 'French'
    },
    flag: 'https://restcountries.eu/data/ben.svg'
  }, {
    name: 'Bermuda',
    code: 'BM',
    capital: 'Hamilton',
    region: 'NA',
    currency: {
      code: 'BMD',
      name: 'Bermudian dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/bmu.svg'
  }, {
    name: 'Bhutan',
    code: 'BT',
    capital: 'Thimphu',
    region: 'AS',
    currency: {
      code: 'BTN',
      name: 'Bhutanese ngultrum',
      symbol: 'Nu.'
    },
    language: {
      code: 'dz',
      name: 'Dzongkha'
    },
    flag: 'https://restcountries.eu/data/btn.svg'
  }, {
    name: 'Bolivia (Plurinational State of)',
    code: 'BO',
    capital: 'Sucre',
    region: 'SA',
    currency: {
      code: 'BOB',
      name: 'Bolivian boliviano',
      symbol: 'Bs.'
    },
    language: {
      code: 'es',
      name: 'Spanish'
    },
    flag: 'https://restcountries.eu/data/bol.svg'
  }, {
    name: 'Bonaire, Sint Eustatius and Saba',
    code: 'BQ',
    capital: 'Kralendijk',
    region: 'SA',
    currency: {
      code: 'USD',
      name: 'United States dollar',
      symbol: '$'
    },
    language: {
      code: 'nl',
      name: 'Dutch'
    },
    flag: 'https://restcountries.eu/data/bes.svg'
  }, {
    name: 'Bosnia and Herzegovina',
    code: 'BA',
    capital: 'Sarajevo',
    region: 'EU',
    currency: {
      code: 'BAM',
      name: 'Bosnia and Herzegovina convertible mark',
      symbol: null
    },
    language: {
      code: 'bs',
      name: 'Bosnian'
    },
    flag: 'https://restcountries.eu/data/bih.svg'
  }, {
    name: 'Botswana',
    code: 'BW',
    capital: 'Gaborone',
    region: 'AF',
    currency: {
      code: 'BWP',
      name: 'Botswana pula',
      symbol: 'P'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/bwa.svg'
  }, {
    name: 'Bouvet Island',
    code: 'BV',
    capital: '',
    region: 'AN',
    currency: {
      code: 'NOK',
      name: 'Norwegian krone',
      symbol: 'kr'
    },
    language: {
      code: 'no',
      name: 'Norwegian'
    },
    flag: 'https://restcountries.eu/data/bvt.svg'
  }, {
    name: 'Brazil',
    code: 'BR',
    capital: 'Brasília',
    region: 'SA',
    currency: {
      code: 'BRL',
      name: 'Brazilian real',
      symbol: 'R$'
    },
    language: {
      code: 'pt',
      name: 'Portuguese'
    },
    flag: 'https://restcountries.eu/data/bra.svg'
  }, {
    name: 'British Indian Ocean Territory',
    code: 'IO',
    capital: 'Diego Garcia',
    region: 'AF',
    currency: {
      code: 'USD',
      name: 'United States dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/iot.svg'
  }, {
    name: 'United States Minor Outlying Islands',
    code: 'UM',
    capital: '',
    region: 'NA',
    currency: {
      code: 'USD',
      name: 'United States Dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/umi.svg'
  }, {
    name: 'Virgin Islands (British)',
    code: 'VG',
    capital: 'Road Town',
    region: 'NA',
    currency: {
      code: 'USD',
      name: 'United States dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/vgb.svg'
  }, {
    name: 'Virgin Islands (U.S.)',
    code: 'VI',
    capital: 'Charlotte Amalie',
    region: 'NA',
    currency: {
      code: 'USD',
      name: 'United States dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/vir.svg'
  }, {
    name: 'Brunei Darussalam',
    code: 'BN',
    capital: 'Bandar Seri Begawan',
    region: 'AS',
    currency: {
      code: 'BND',
      name: 'Brunei dollar',
      symbol: '$'
    },
    language: {
      code: 'ms',
      name: 'Malay'
    },
    flag: 'https://restcountries.eu/data/brn.svg'
  }, {
    name: 'Bulgaria',
    code: 'BG',
    capital: 'Sofia',
    region: 'EU',
    currency: {
      code: 'BGN',
      name: 'Bulgarian lev',
      symbol: 'лв'
    },
    language: {
      code: 'bg',
      name: 'Bulgarian'
    },
    flag: 'https://restcountries.eu/data/bgr.svg'
  }, {
    name: 'Burkina Faso',
    code: 'BF',
    capital: 'Ouagadougou',
    region: 'AF',
    currency: {
      code: 'XOF',
      name: 'West African CFA franc',
      symbol: 'Fr'
    },
    language: {
      code: 'fr',
      name: 'French'
    },
    flag: 'https://restcountries.eu/data/bfa.svg'
  }, {
    name: 'Burundi',
    code: 'BI',
    capital: 'Bujumbura',
    region: 'AF',
    currency: {
      code: 'BIF',
      name: 'Burundian franc',
      symbol: 'Fr'
    },
    language: {
      code: 'fr',
      name: 'French'
    },
    flag: 'https://restcountries.eu/data/bdi.svg'
  }, {
    name: 'Cambodia',
    code: 'KH',
    capital: 'Phnom Penh',
    region: 'AS',
    currency: {
      code: 'KHR',
      name: 'Cambodian riel',
      symbol: '៛'
    },
    language: {
      code: 'km',
      name: 'Khmer'
    },
    flag: 'https://restcountries.eu/data/khm.svg'
  }, {
    name: 'Cameroon',
    code: 'CM',
    capital: 'Yaoundé',
    region: 'AF',
    currency: {
      code: 'XAF',
      name: 'Central African CFA franc',
      symbol: 'Fr'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/cmr.svg'
  }, {
    name: 'Canada',
    code: 'CA',
    capital: 'Ottawa',
    region: 'NA',
    currency: {
      code: 'CAD',
      name: 'Canadian dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/can.svg'
  }, {
    name: 'Cabo Verde',
    code: 'CV',
    capital: 'Praia',
    region: 'AF',
    currency: {
      code: 'CVE',
      name: 'Cape Verdean escudo',
      symbol: 'Esc'
    },
    language: {
      code: 'pt',
      iso639_2: 'por',
      name: 'Portuguese',
      nativeName: 'Português'
    },
    flag: 'https://restcountries.eu/data/cpv.svg'
  }, {
    name: 'Cayman Islands',
    code: 'KY',
    capital: 'George Town',
    region: 'NA',
    demonym: 'Caymanian',
    currency: {
      code: 'KYD',
      name: 'Cayman Islands dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/cym.svg'
  }, {
    name: 'Central African Republic',
    code: 'CF',
    capital: 'Bangui',
    region: 'AF',
    currency: {
      code: 'XAF',
      name: 'Central African CFA franc',
      symbol: 'Fr'
    },
    language: {
      code: 'fr',
      name: 'French'
    },
    flag: 'https://restcountries.eu/data/caf.svg'
  }, {
    name: 'Chad',
    code: 'TD',
    capital: "N'Djamena",
    region: 'AF',
    currency: {
      code: 'XAF',
      name: 'Central African CFA franc',
      symbol: 'Fr'
    },
    language: {
      code: 'fr',
      name: 'French'
    },
    flag: 'https://restcountries.eu/data/tcd.svg'
  }, {
    name: 'Chile',
    code: 'CL',
    capital: 'Santiago',
    region: 'SA',
    currency: {
      code: 'CLP',
      name: 'Chilean peso',
      symbol: '$'
    },
    language: {
      code: 'es',
      iso639_2: 'spa',
      name: 'Spanish',
      nativeName: 'Español'
    },
    flag: 'https://restcountries.eu/data/chl.svg'
  }, {
    name: 'China',
    code: 'CN',
    capital: 'Beijing',
    region: 'AS',
    currency: {
      code: 'CNY',
      name: 'Chinese yuan',
      symbol: '¥'
    },
    language: {
      code: 'zh',
      name: 'Chinese'
    },
    flag: 'https://restcountries.eu/data/chn.svg'
  }, {
    name: 'Christmas Island',
    code: 'CX',
    capital: 'Flying Fish Cove',
    region: 'OC',
    currency: {
      code: 'AUD',
      name: 'Australian dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/cxr.svg'
  }, {
    name: 'Cocos (Keeling) Islands',
    code: 'CC',
    capital: 'West Island',
    region: 'OC',
    currency: {
      code: 'AUD',
      name: 'Australian dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/cck.svg'
  }, {
    name: 'Colombia',
    code: 'CO',
    capital: 'Bogotá',
    region: 'SA',
    currency: {
      code: 'COP',
      name: 'Colombian peso',
      symbol: '$'
    },
    language: {
      code: 'es',
      name: 'Spanish'
    },
    flag: 'https://restcountries.eu/data/col.svg'
  }, {
    name: 'Comoros',
    code: 'KM',
    capital: 'Moroni',
    region: 'AF',
    currency: {
      code: 'KMF',
      name: 'Comorian franc',
      symbol: 'Fr'
    },
    language: {
      code: 'fr',
      name: 'French'
    },
    flag: 'https://restcountries.eu/data/com.svg'
  }, {
    name: 'Congo',
    code: 'CG',
    capital: 'Brazzaville',
    region: 'AF',
    currency: {
      code: 'XAF',
      name: 'Central African CFA franc',
      symbol: 'Fr'
    },
    language: {
      code: 'fr',
      name: 'French'
    },
    flag: 'https://restcountries.eu/data/cog.svg'
  }, {
    name: 'Congo (Democratic Republic of the)',
    code: 'CD',
    capital: 'Kinshasa',
    region: 'AF',
    currency: {
      code: 'CDF',
      name: 'Congolese franc',
      symbol: 'Fr'
    },
    language: {
      code: 'fr',
      name: 'French'
    },
    flag: 'https://restcountries.eu/data/cod.svg'
  }, {
    name: 'Cook Islands',
    code: 'CK',
    capital: 'Avarua',
    region: 'OC',
    currency: {
      code: 'NZD',
      name: 'New Zealand dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/cok.svg'
  }, {
    name: 'Costa Rica',
    code: 'CR',
    capital: 'San José',
    region: 'NA',
    currency: {
      code: 'CRC',
      name: 'Costa Rican colón',
      symbol: '₡'
    },
    language: {
      code: 'es',
      name: 'Spanish'
    },
    flag: 'https://restcountries.eu/data/cri.svg'
  }, {
    name: 'Croatia',
    code: 'HR',
    capital: 'Zagreb',
    region: 'EU',
    currency: {
      code: 'HRK',
      name: 'Croatian kuna',
      symbol: 'kn'
    },
    language: {
      code: 'hr',
      name: 'Croatian'
    },
    flag: 'https://restcountries.eu/data/hrv.svg'
  }, {
    name: 'Cuba',
    code: 'CU',
    capital: 'Havana',
    region: 'NA',
    currency: {
      code: 'CUC',
      name: 'Cuban convertible peso',
      symbol: '$'
    },
    language: {
      code: 'es',
      name: 'Spanish'
    },
    flag: 'https://restcountries.eu/data/cub.svg'
  }, {
    name: 'Curaçao',
    code: 'CW',
    capital: 'Willemstad',
    region: 'SA',
    currency: {
      code: 'ANG',
      name: 'Netherlands Antillean guilder',
      symbol: 'ƒ'
    },
    language: {
      code: 'nl',
      name: 'Dutch'
    },
    flag: 'https://restcountries.eu/data/cuw.svg'
  }, {
    name: 'Cyprus',
    code: 'CY',
    capital: 'Nicosia',
    region: 'EU',
    currency: {
      code: 'EUR',
      name: 'Euro',
      symbol: '€'
    },
    language: {
      code: 'tr',
      name: 'Turkish'
    },
    flag: 'https://restcountries.eu/data/cyp.svg'
  }, {
    name: 'Czech Republic',
    code: 'CZ',
    capital: 'Prague',
    region: 'EU',
    currency: {
      code: 'CZK',
      name: 'Czech koruna',
      symbol: 'Kč'
    },
    language: {
      code: 'cs',
      name: 'Czech'
    },
    flag: 'https://restcountries.eu/data/cze.svg'
  }, {
    name: 'Denmark',
    code: 'DK',
    capital: 'Copenhagen',
    region: 'EU',
    currency: {
      code: 'DKK',
      name: 'Danish krone',
      symbol: 'kr'
    },
    language: {
      code: 'da',
      name: 'Danish'
    },
    flag: 'https://restcountries.eu/data/dnk.svg'
  }, {
    name: 'Djibouti',
    code: 'DJ',
    capital: 'Djibouti',
    region: 'AF',
    currency: {
      code: 'DJF',
      name: 'Djiboutian franc',
      symbol: 'Fr'
    },
    language: {
      code: 'fr',
      name: 'French'
    },
    flag: 'https://restcountries.eu/data/dji.svg'
  }, {
    name: 'Dominica',
    code: 'DM',
    capital: 'Roseau',
    region: 'NA',
    currency: {
      code: 'XCD',
      name: 'East Caribbean dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/dma.svg'
  }, {
    name: 'Dominican Republic',
    code: 'DO',
    capital: 'Santo Domingo',
    region: 'NA',
    currency: {
      code: 'DOP',
      name: 'Dominican peso',
      symbol: '$'
    },
    language: {
      code: 'es',
      name: 'Spanish'
    },
    flag: 'https://restcountries.eu/data/dom.svg'
  }, {
    name: 'Ecuador',
    code: 'EC',
    capital: 'Quito',
    region: 'SA',
    currency: {
      code: 'USD',
      name: 'United States dollar',
      symbol: '$'
    },
    language: {
      code: 'es',
      name: 'Spanish'
    },
    flag: 'https://restcountries.eu/data/ecu.svg'
  }, {
    name: 'Egypt',
    code: 'EG',
    capital: 'Cairo',
    region: 'AF',
    currency: {
      code: 'EGP',
      name: 'Egyptian pound',
      symbol: '£'
    },
    language: {
      code: 'ar',
      name: 'Arabic'
    },
    flag: 'https://restcountries.eu/data/egy.svg'
  }, {
    name: 'El Salvador',
    code: 'SV',
    capital: 'San Salvador',
    region: 'NA',
    currency: {
      code: 'USD',
      name: 'United States dollar',
      symbol: '$'
    },
    language: {
      code: 'es',
      name: 'Spanish'
    },
    flag: 'https://restcountries.eu/data/slv.svg'
  }, {
    name: 'Equatorial Guinea',
    code: 'GQ',
    capital: 'Malabo',
    region: 'AF',
    currency: {
      code: 'XAF',
      name: 'Central African CFA franc',
      symbol: 'Fr'
    },
    language: {
      code: 'es',
      iso639_2: 'spa',
      name: 'Spanish',
      nativeName: 'Español'
    },
    flag: 'https://restcountries.eu/data/gnq.svg'
  }, {
    name: 'Eritrea',
    code: 'ER',
    capital: 'Asmara',
    region: 'AF',
    currency: {
      code: 'ERN',
      name: 'Eritrean nakfa',
      symbol: 'Nfk'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/eri.svg'
  }, {
    name: 'Estonia',
    code: 'EE',
    capital: 'Tallinn',
    region: 'EU',
    currency: {
      code: 'EUR',
      name: 'Euro',
      symbol: '€'
    },
    language: {
      code: 'et',
      name: 'Estonian'
    },
    flag: 'https://restcountries.eu/data/est.svg'
  }, {
    name: 'Ethiopia',
    code: 'ET',
    capital: 'Addis Ababa',
    region: 'AF',
    currency: {
      code: 'ETB',
      name: 'Ethiopian birr',
      symbol: 'Br'
    },
    language: {
      code: 'am',
      name: 'Amharic'
    },
    flag: 'https://restcountries.eu/data/eth.svg'
  }, {
    name: 'Falkland Islands (Malvinas)',
    code: 'FK',
    capital: 'Stanley',
    region: 'SA',
    currency: {
      code: 'FKP',
      name: 'Falkland Islands pound',
      symbol: '£'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/flk.svg'
  }, {
    name: 'Faroe Islands',
    code: 'FO',
    capital: 'Tórshavn',
    region: 'EU',
    currency: {
      code: 'DKK',
      name: 'Danish krone',
      symbol: 'kr'
    },
    language: {
      code: 'fo',
      name: 'Faroese'
    },
    flag: 'https://restcountries.eu/data/fro.svg'
  }, {
    name: 'Fiji',
    code: 'FJ',
    capital: 'Suva',
    region: 'OC',
    currency: {
      code: 'FJD',
      name: 'Fijian dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/fji.svg'
  }, {
    name: 'Finland',
    code: 'FI',
    capital: 'Helsinki',
    region: 'EU',
    currency: {
      code: 'EUR',
      name: 'Euro',
      symbol: '€'
    },
    language: {
      code: 'fi',
      iso639_2: 'fin',
      name: 'Finnish',
      nativeName: 'suomi'
    },
    flag: 'https://restcountries.eu/data/fin.svg'
  }, {
    name: 'France',
    code: 'FR',
    capital: 'Paris',
    region: 'EU',
    demonym: 'French',
    currency: {
      code: 'EUR',
      name: 'Euro',
      symbol: '€'
    },
    language: {
      code: 'fr',
      name: 'French'
    },
    flag: 'https://restcountries.eu/data/fra.svg'
  }, {
    name: 'French Guiana',
    code: 'GF',
    capital: 'Cayenne',
    region: 'SA',
    currency: {
      code: 'EUR',
      name: 'Euro',
      symbol: '€'
    },
    language: {
      code: 'fr',
      name: 'French'
    },
    flag: 'https://restcountries.eu/data/guf.svg'
  }, {
    name: 'French Polynesia',
    code: 'PF',
    capital: 'Papeetē',
    region: 'OC',
    currency: {
      code: 'XPF',
      name: 'CFP franc',
      symbol: 'Fr'
    },
    language: {
      code: 'fr',
      name: 'French'
    },
    flag: 'https://restcountries.eu/data/pyf.svg'
  }, {
    name: 'French Southern Territories',
    code: 'TF',
    capital: 'Port-aux-Français',
    region: 'AF',
    currency: {
      code: 'EUR',
      name: 'Euro',
      symbol: '€'
    },
    language: {
      code: 'fr',
      name: 'French'
    },
    flag: 'https://restcountries.eu/data/atf.svg'
  }, {
    name: 'Gabon',
    code: 'GA',
    capital: 'Libreville',
    region: 'AF',
    currency: {
      code: 'XAF',
      name: 'Central African CFA franc',
      symbol: 'Fr'
    },
    language: {
      code: 'fr',
      name: 'French'
    },
    flag: 'https://restcountries.eu/data/gab.svg'
  }, {
    name: 'Gambia',
    code: 'GM',
    capital: 'Banjul',
    region: 'AF',
    currency: {
      code: 'GMD',
      name: 'Gambian dalasi',
      symbol: 'D'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/gmb.svg'
  }, {
    name: 'Georgia',
    code: 'GE',
    capital: 'Tbilisi',
    region: 'AS',
    currency: {
      code: 'GEL',
      name: 'Georgian Lari',
      symbol: 'ლ'
    },
    language: {
      code: 'ka',
      name: 'Georgian'
    },
    flag: 'https://restcountries.eu/data/geo.svg'
  }, {
    name: 'Germany',
    code: 'DE',
    capital: 'Berlin',
    region: 'EU',
    currency: {
      code: 'EUR',
      name: 'Euro',
      symbol: '€'
    },
    language: {
      code: 'de',
      name: 'German'
    },
    flag: 'https://restcountries.eu/data/deu.svg'
  }, {
    name: 'Ghana',
    code: 'GH',
    capital: 'Accra',
    region: 'AF',
    currency: {
      code: 'GHS',
      name: 'Ghanaian cedi',
      symbol: '₵'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/gha.svg'
  }, {
    name: 'Gibraltar',
    code: 'GI',
    capital: 'Gibraltar',
    region: 'EU',
    currency: {
      code: 'GIP',
      name: 'Gibraltar pound',
      symbol: '£'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/gib.svg'
  }, {
    name: 'Greece',
    code: 'GR',
    capital: 'Athens',
    region: 'EU',
    currency: {
      code: 'EUR',
      name: 'Euro',
      symbol: '€'
    },
    language: {
      code: 'el',
      name: 'Greek (modern)'
    },
    flag: 'https://restcountries.eu/data/grc.svg'
  }, {
    name: 'Greenland',
    code: 'GL',
    capital: 'Nuuk',
    region: 'NA',
    currency: {
      code: 'DKK',
      name: 'Danish krone',
      symbol: 'kr'
    },
    language: {
      code: 'kl',
      name: 'Kalaallisut'
    },
    flag: 'https://restcountries.eu/data/grl.svg'
  }, {
    name: 'Grenada',
    code: 'GD',
    capital: "St. George's",
    region: 'NA',
    currency: {
      code: 'XCD',
      name: 'East Caribbean dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/grd.svg'
  }, {
    name: 'Guadeloupe',
    code: 'GP',
    capital: 'Basse-Terre',
    region: 'NA',
    currency: {
      code: 'EUR',
      name: 'Euro',
      symbol: '€'
    },
    language: {
      code: 'fr',
      name: 'French'
    },
    flag: 'https://restcountries.eu/data/glp.svg'
  }, {
    name: 'Guam',
    code: 'GU',
    capital: 'Hagåtña',
    region: 'OC',
    currency: {
      code: 'USD',
      name: 'United States dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/gum.svg'
  }, {
    name: 'Guatemala',
    code: 'GT',
    capital: 'Guatemala City',
    region: 'NA',
    currency: {
      code: 'GTQ',
      name: 'Guatemalan quetzal',
      symbol: 'Q'
    },
    language: {
      code: 'es',
      name: 'Spanish'
    },
    flag: 'https://restcountries.eu/data/gtm.svg'
  }, {
    name: 'Guernsey',
    code: 'GG',
    capital: 'St. Peter Port',
    region: 'EU',
    currency: {
      code: 'GBP',
      name: 'British pound',
      symbol: '£'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/ggy.svg'
  }, {
    name: 'Guinea',
    code: 'GN',
    capital: 'Conakry',
    region: 'AF',
    currency: {
      code: 'GNF',
      name: 'Guinean franc',
      symbol: 'Fr'
    },
    language: {
      code: 'fr',
      name: 'French'
    },
    flag: 'https://restcountries.eu/data/gin.svg'
  }, {
    name: 'Guinea-Bissau',
    code: 'GW',
    capital: 'Bissau',
    region: 'AF',
    currency: {
      code: 'XOF',
      name: 'West African CFA franc',
      symbol: 'Fr'
    },
    language: {
      code: 'pt',
      name: 'Portuguese'
    },
    flag: 'https://restcountries.eu/data/gnb.svg'
  }, {
    name: 'Guyana',
    code: 'GY',
    capital: 'Georgetown',
    region: 'SA',
    currency: {
      code: 'GYD',
      name: 'Guyanese dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/guy.svg'
  }, {
    name: 'Haiti',
    code: 'HT',
    capital: 'Port-au-Prince',
    region: 'Americas',
    currency: {
      code: 'HTG',
      name: 'Haitian gourde',
      symbol: 'G'
    },
    language: {
      code: 'fr',
      name: 'French'
    },
    flag: 'https://restcountries.eu/data/hti.svg'
  }, {
    name: 'Heard Island and McDonald Islands',
    code: 'HM',
    capital: '',
    region: '',
    currency: {
      code: 'AUD',
      name: 'Australian dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/hmd.svg'
  }, {
    name: 'Holy See',
    code: 'VA',
    capital: 'Rome',
    region: 'EU',
    currency: {
      code: 'EUR',
      name: 'Euro',
      symbol: '€'
    },
    language: {
      code: 'fr',
      name: 'French'
    },
    flag: 'https://restcountries.eu/data/vat.svg'
  }, {
    name: 'Honduras',
    code: 'HN',
    capital: 'Tegucigalpa',
    region: 'NA',
    currency: {
      code: 'HNL',
      name: 'Honduran lempira',
      symbol: 'L'
    },
    language: {
      code: 'es',
      name: 'Spanish'
    },
    flag: 'https://restcountries.eu/data/hnd.svg'
  }, {
    name: 'Hong Kong',
    code: 'HK',
    capital: 'City of Victoria',
    region: 'AS',
    currency: {
      code: 'HKD',
      name: 'Hong Kong dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/hkg.svg'
  }, {
    name: 'Hungary',
    code: 'HU',
    capital: 'Budapest',
    region: 'EU',
    currency: {
      code: 'HUF',
      name: 'Hungarian forint',
      symbol: 'Ft'
    },
    language: {
      code: 'hu',
      name: 'Hungarian'
    },
    flag: 'https://restcountries.eu/data/hun.svg'
  }, {
    name: 'Iceland',
    code: 'IS',
    capital: 'Reykjavík',
    region: 'EU',
    currency: {
      code: 'ISK',
      name: 'Icelandic króna',
      symbol: 'kr'
    },
    language: {
      code: 'is',
      name: 'Icelandic'
    },
    flag: 'https://restcountries.eu/data/isl.svg'
  }, {
    name: 'India',
    code: 'IN',
    capital: 'New Delhi',
    region: 'AS',
    currency: {
      code: 'INR',
      name: 'Indian rupee',
      symbol: '₹'
    },
    language: {
      code: 'hi',
      name: 'Hindi'
    },
    flag: 'https://restcountries.eu/data/ind.svg'
  }, {
    name: 'Indonesia',
    code: 'ID',
    capital: 'Jakarta',
    region: 'AS',
    currency: {
      code: 'IDR',
      name: 'Indonesian rupiah',
      symbol: 'Rp'
    },
    language: {
      code: 'id',
      name: 'Indonesian'
    },
    flag: 'https://restcountries.eu/data/idn.svg'
  }, {
    name: "Côte d'Ivoire",
    code: 'CI',
    capital: 'Yamoussoukro',
    region: 'AF',
    currency: {
      code: 'XOF',
      name: 'West African CFA franc',
      symbol: 'Fr'
    },
    language: {
      code: 'fr',
      name: 'French'
    },
    flag: 'https://restcountries.eu/data/civ.svg'
  }, {
    name: 'Iran (Islamic Republic of)',
    code: 'IR',
    capital: 'Tehran',
    region: 'AS',
    currency: {
      code: 'IRR',
      name: 'Iranian rial',
      symbol: '﷼'
    },
    language: {
      code: 'fa',
      name: 'Persian (Farsi)'
    },
    flag: 'https://restcountries.eu/data/irn.svg'
  }, {
    name: 'Iraq',
    code: 'IQ',
    capital: 'Baghdad',
    region: 'AS',
    currency: {
      code: 'IQD',
      name: 'Iraqi dinar',
      symbol: 'ع.د'
    },
    language: {
      code: 'ar',
      name: 'Arabic'
    },
    flag: 'https://restcountries.eu/data/irq.svg'
  }, {
    name: 'Ireland',
    code: 'IE',
    capital: 'Dublin',
    region: 'EU',
    currency: {
      code: 'EUR',
      name: 'Euro',
      symbol: '€'
    },
    language: {
      code: 'ga',
      name: 'Irish'
    },
    flag: 'https://restcountries.eu/data/irl.svg'
  }, {
    name: 'Isle of Man',
    code: 'IM',
    capital: 'Douglas',
    region: 'EU',
    currency: {
      code: 'GBP',
      name: 'British pound',
      symbol: '£'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/imn.svg'
  }, {
    name: 'Israel',
    code: 'IL',
    capital: 'Jerusalem',
    region: 'AS',
    currency: {
      code: 'ILS',
      name: 'Israeli new shekel',
      symbol: '₪'
    },
    language: {
      code: 'he',
      name: 'Hebrew (modern)'
    },
    flag: 'https://restcountries.eu/data/isr.svg'
  }, {
    name: 'Italy',
    code: 'IT',
    capital: 'Rome',
    region: 'EU',
    currency: {
      code: 'EUR',
      name: 'Euro',
      symbol: '€'
    },
    language: {
      code: 'it',
      name: 'Italian'
    },
    flag: 'https://restcountries.eu/data/ita.svg'
  }, {
    name: 'Jamaica',
    code: 'JM',
    capital: 'Kingston',
    region: 'NA',
    currency: {
      code: 'JMD',
      name: 'Jamaican dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/jam.svg'
  }, {
    name: 'Japan',
    code: 'JP',
    capital: 'Tokyo',
    region: 'AS',
    currency: {
      code: 'JPY',
      name: 'Japanese yen',
      symbol: '¥'
    },
    language: {
      code: 'ja',
      name: 'Japanese'
    },
    flag: 'https://restcountries.eu/data/jpn.svg'
  }, {
    name: 'Jersey',
    code: 'JE',
    capital: 'Saint Helier',
    region: 'EU',
    currency: {
      code: 'GBP',
      name: 'British pound',
      symbol: '£'
    },
    language: {
      code: 'en',
      iso639_2: 'eng',
      name: 'English',
      nativeName: 'English'
    },
    flag: 'https://restcountries.eu/data/jey.svg'
  }, {
    name: 'Jordan',
    code: 'JO',
    capital: 'Amman',
    region: 'AS',
    currency: {
      code: 'JOD',
      name: 'Jordanian dinar',
      symbol: 'د.ا'
    },
    language: {
      code: 'ar',
      name: 'Arabic'
    },
    flag: 'https://restcountries.eu/data/jor.svg'
  }, {
    name: 'Kazakhstan',
    code: 'KZ',
    capital: 'Astana',
    region: 'AS',
    currency: {
      code: 'KZT',
      name: 'Kazakhstani tenge',
      symbol: null
    },
    language: {
      code: 'kk',
      name: 'Kazakh'
    },
    flag: 'https://restcountries.eu/data/kaz.svg'
  }, {
    name: 'Kenya',
    code: 'KE',
    capital: 'Nairobi',
    region: 'AF',
    currency: {
      code: 'KES',
      name: 'Kenyan shilling',
      symbol: 'Sh'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/ken.svg'
  }, {
    name: 'Kiribati',
    code: 'KI',
    capital: 'South Tarawa',
    region: 'OC',
    currency: {
      code: 'AUD',
      name: 'Australian dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/kir.svg'
  }, {
    name: 'Kuwait',
    code: 'KW',
    capital: 'Kuwait City',
    region: 'AS',
    currency: {
      code: 'KWD',
      name: 'Kuwaiti dinar',
      symbol: 'د.ك'
    },
    language: {
      code: 'ar',
      name: 'Arabic'
    },
    flag: 'https://restcountries.eu/data/kwt.svg'
  }, {
    name: 'Kyrgyzstan',
    code: 'KG',
    capital: 'Bishkek',
    region: 'AS',
    currency: {
      code: 'KGS',
      name: 'Kyrgyzstani som',
      symbol: 'с'
    },
    language: {
      code: 'ky',
      name: 'Kyrgyz'
    },
    flag: 'https://restcountries.eu/data/kgz.svg'
  }, {
    name: "Lao People's Democratic Republic",
    code: 'LA',
    capital: 'Vientiane',
    region: 'AS',
    currency: {
      code: 'LAK',
      name: 'Lao kip',
      symbol: '₭'
    },
    language: {
      code: 'lo',
      name: 'Lao'
    },
    flag: 'https://restcountries.eu/data/lao.svg'
  }, {
    name: 'Latvia',
    code: 'LV',
    capital: 'Riga',
    region: 'EU',
    currency: {
      code: 'EUR',
      name: 'Euro',
      symbol: '€'
    },
    language: {
      code: 'lv',
      name: 'Latvian'
    },
    flag: 'https://restcountries.eu/data/lva.svg'
  }, {
    name: 'Lebanon',
    code: 'LB',
    capital: 'Beirut',
    region: 'AS',
    currency: {
      code: 'LBP',
      name: 'Lebanese pound',
      symbol: 'ل.ل'
    },
    language: {
      code: 'ar',
      name: 'Arabic'
    },
    flag: 'https://restcountries.eu/data/lbn.svg'
  }, {
    name: 'Lesotho',
    code: 'LS',
    capital: 'Maseru',
    region: 'AF',
    currency: {
      code: 'LSL',
      name: 'Lesotho loti',
      symbol: 'L'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/lso.svg'
  }, {
    name: 'Liberia',
    code: 'LR',
    capital: 'Monrovia',
    region: 'AF',
    currency: {
      code: 'LRD',
      name: 'Liberian dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/lbr.svg'
  }, {
    name: 'Libya',
    code: 'LY',
    capital: 'Tripoli',
    region: 'AF',
    currency: {
      code: 'LYD',
      name: 'Libyan dinar',
      symbol: 'ل.د'
    },
    language: {
      code: 'ar',
      name: 'Arabic'
    },
    flag: 'https://restcountries.eu/data/lby.svg'
  }, {
    name: 'Liechtenstein',
    code: 'LI',
    capital: 'Vaduz',
    region: 'EU',
    currency: {
      code: 'CHF',
      name: 'Swiss franc',
      symbol: 'Fr'
    },
    language: {
      code: 'de',
      name: 'German'
    },
    flag: 'https://restcountries.eu/data/lie.svg'
  }, {
    name: 'Lithuania',
    code: 'LT',
    capital: 'Vilnius',
    region: 'EU',
    currency: {
      code: 'EUR',
      name: 'Euro',
      symbol: '€'
    },
    language: {
      code: 'lt',
      name: 'Lithuanian'
    },
    flag: 'https://restcountries.eu/data/ltu.svg'
  }, {
    name: 'Luxembourg',
    code: 'LU',
    capital: 'Luxembourg',
    region: 'EU',
    currency: {
      code: 'EUR',
      name: 'Euro',
      symbol: '€'
    },
    language: {
      code: 'fr',
      name: 'French'
    },
    flag: 'https://restcountries.eu/data/lux.svg'
  }, {
    name: 'Macao',
    code: 'MO',
    capital: '',
    region: 'AS',
    currency: {
      code: 'MOP',
      name: 'Macanese pataca',
      symbol: 'P'
    },
    language: {
      code: 'zh',
      name: 'Chinese'
    },
    flag: 'https://restcountries.eu/data/mac.svg'
  }, {
    name: 'Macedonia (the former Yugoslav Republic of)',
    code: 'MK',
    capital: 'Skopje',
    region: 'EU',
    currency: {
      code: 'MKD',
      name: 'Macedonian denar',
      symbol: 'ден'
    },
    language: {
      code: 'mk',
      name: 'Macedonian'
    },
    flag: 'https://restcountries.eu/data/mkd.svg'
  }, {
    name: 'Madagascar',
    code: 'MG',
    capital: 'Antananarivo',
    region: 'AF',
    currency: {
      code: 'MGA',
      name: 'Malagasy ariary',
      symbol: 'Ar'
    },
    language: {
      code: 'fr',
      name: 'French'
    },
    flag: 'https://restcountries.eu/data/mdg.svg'
  }, {
    name: 'Malawi',
    code: 'MW',
    capital: 'Lilongwe',
    region: 'AF',
    currency: {
      code: 'MWK',
      name: 'Malawian kwacha',
      symbol: 'MK'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/mwi.svg'
  }, {
    name: 'Malaysia',
    code: 'MY',
    capital: 'Kuala Lumpur',
    region: 'AS',
    currency: {
      code: 'MYR',
      name: 'Malaysian ringgit',
      symbol: 'RM'
    },
    language: {
      code: null,
      name: 'Malaysian'
    },
    flag: 'https://restcountries.eu/data/mys.svg'
  }, {
    name: 'Maldives',
    code: 'MV',
    capital: 'Malé',
    region: 'AS',
    currency: {
      code: 'MVR',
      name: 'Maldivian rufiyaa',
      symbol: '.ރ'
    },
    language: {
      code: 'dv',
      name: 'Divehi'
    },
    flag: 'https://restcountries.eu/data/mdv.svg'
  }, {
    name: 'Mali',
    code: 'ML',
    capital: 'Bamako',
    region: 'AF',
    currency: {
      code: 'XOF',
      name: 'West African CFA franc',
      symbol: 'Fr'
    },
    language: {
      code: 'fr',
      name: 'French'
    },
    flag: 'https://restcountries.eu/data/mli.svg'
  }, {
    name: 'Malta',
    code: 'MT',
    capital: 'Valletta',
    region: 'EU',
    currency: {
      code: 'EUR',
      name: 'Euro',
      symbol: '€'
    },
    language: {
      code: 'mt',
      name: 'Maltese'
    },
    flag: 'https://restcountries.eu/data/mlt.svg'
  }, {
    name: 'Marshall Islands',
    code: 'MH',
    capital: 'Majuro',
    region: 'OC',
    currency: {
      code: 'USD',
      name: 'United States dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/mhl.svg'
  }, {
    name: 'Martinique',
    code: 'MQ',
    capital: 'Fort-de-France',
    region: 'Americas',
    currency: {
      code: 'EUR',
      name: 'Euro',
      symbol: '€'
    },
    language: {
      code: 'fr',
      name: 'French'
    },
    flag: 'https://restcountries.eu/data/mtq.svg'
  }, {
    name: 'Mauritania',
    code: 'MR',
    capital: 'Nouakchott',
    region: 'AF',
    currency: {
      code: 'MRO',
      name: 'Mauritanian ouguiya',
      symbol: 'UM'
    },
    language: {
      code: 'ar',
      name: 'Arabic'
    },
    flag: 'https://restcountries.eu/data/mrt.svg'
  }, {
    name: 'Mauritius',
    code: 'MU',
    capital: 'Port Louis',
    region: 'AF',
    currency: {
      code: 'MUR',
      name: 'Mauritian rupee',
      symbol: '₨'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/mus.svg'
  }, {
    name: 'Mayotte',
    code: 'YT',
    capital: 'Mamoudzou',
    region: 'AF',
    currency: {
      code: 'EUR',
      name: 'Euro',
      symbol: '€'
    },
    language: {
      code: 'fr',
      name: 'French'
    },
    flag: 'https://restcountries.eu/data/myt.svg'
  }, {
    name: 'Mexico',
    code: 'MX',
    capital: 'Mexico City',
    region: 'NA',
    currency: {
      code: 'MXN',
      name: 'Mexican peso',
      symbol: '$'
    },
    language: {
      code: 'es',
      name: 'Spanish'
    },
    flag: 'https://restcountries.eu/data/mex.svg'
  }, {
    name: 'Micronesia (Federated States of)',
    code: 'FM',
    capital: 'Palikir',
    region: 'OC',
    currency: {
      code: 'USD',
      name: 'United States dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/fsm.svg'
  }, {
    name: 'Moldova (Republic of)',
    code: 'MD',
    capital: 'Chișinău',
    region: 'EU',
    currency: {
      code: 'MDL',
      name: 'Moldovan leu',
      symbol: 'L'
    },
    language: {
      code: 'ro',
      name: 'Romanian'
    },
    flag: 'https://restcountries.eu/data/mda.svg'
  }, {
    name: 'Monaco',
    code: 'MC',
    capital: 'Monaco',
    region: 'EU',
    currency: {
      code: 'EUR',
      name: 'Euro',
      symbol: '€'
    },
    language: {
      code: 'fr',
      name: 'French'
    },
    flag: 'https://restcountries.eu/data/mco.svg'
  }, {
    name: 'Mongolia',
    code: 'MN',
    capital: 'Ulan Bator',
    region: 'AS',
    currency: {
      code: 'MNT',
      name: 'Mongolian tögrög',
      symbol: '₮'
    },
    language: {
      code: 'mn',
      name: 'Mongolian'
    },
    flag: 'https://restcountries.eu/data/mng.svg'
  }, {
    name: 'Montenegro',
    code: 'ME',
    capital: 'Podgorica',
    region: 'EU',
    currency: {
      code: 'EUR',
      name: 'Euro',
      symbol: '€'
    },
    language: {
      code: 'sr',
      name: 'Serbian'
    },
    flag: 'https://restcountries.eu/data/mne.svg'
  }, {
    name: 'Montserrat',
    code: 'MS',
    capital: 'Plymouth',
    region: 'NA',
    currency: {
      code: 'XCD',
      name: 'East Caribbean dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/msr.svg'
  }, {
    name: 'Morocco',
    code: 'MA',
    capital: 'Rabat',
    region: 'AF',
    currency: {
      code: 'MAD',
      name: 'Moroccan dirham',
      symbol: 'د.م.'
    },
    language: {
      code: 'ar',
      name: 'Arabic'
    },
    flag: 'https://restcountries.eu/data/mar.svg'
  }, {
    name: 'Mozambique',
    code: 'MZ',
    capital: 'Maputo',
    region: 'AF',
    currency: {
      code: 'MZN',
      name: 'Mozambican metical',
      symbol: 'MT'
    },
    language: {
      code: 'pt',
      name: 'Portuguese'
    },
    flag: 'https://restcountries.eu/data/moz.svg'
  }, {
    name: 'Myanmar',
    code: 'MM',
    capital: 'Naypyidaw',
    region: 'AS',
    currency: {
      code: 'MMK',
      name: 'Burmese kyat',
      symbol: 'Ks'
    },
    language: {
      code: 'my',
      name: 'Burmese'
    },
    flag: 'https://restcountries.eu/data/mmr.svg'
  }, {
    name: 'Namibia',
    code: 'NA',
    capital: 'Windhoek',
    region: 'AF',
    currency: {
      code: 'NAD',
      name: 'Namibian dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/nam.svg'
  }, {
    name: 'Nauru',
    code: 'NR',
    capital: 'Yaren',
    region: 'OC',
    currency: {
      code: 'AUD',
      name: 'Australian dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/nru.svg'
  }, {
    name: 'Nepal',
    code: 'NP',
    capital: 'Kathmandu',
    region: 'AS',
    currency: {
      code: 'NPR',
      name: 'Nepalese rupee',
      symbol: '₨'
    },
    language: {
      code: 'ne',
      name: 'Nepali'
    },
    flag: 'https://restcountries.eu/data/npl.svg'
  }, {
    name: 'Netherlands',
    code: 'NL',
    capital: 'Amsterdam',
    region: 'EU',
    currency: {
      code: 'EUR',
      name: 'Euro',
      symbol: '€'
    },
    language: {
      code: 'nl',
      name: 'Dutch'
    },
    flag: 'https://restcountries.eu/data/nld.svg'
  }, {
    name: 'New Caledonia',
    code: 'NC',
    capital: 'Nouméa',
    region: 'OC',
    currency: {
      code: 'XPF',
      name: 'CFP franc',
      symbol: 'Fr'
    },
    language: {
      code: 'fr',
      name: 'French'
    },
    flag: 'https://restcountries.eu/data/ncl.svg'
  }, {
    name: 'New Zealand',
    code: 'NZ',
    capital: 'Wellington',
    region: 'OC',
    currency: {
      code: 'NZD',
      name: 'New Zealand dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/nzl.svg'
  }, {
    name: 'Nicaragua',
    code: 'NI',
    capital: 'Managua',
    region: 'NA',
    currency: {
      code: 'NIO',
      name: 'Nicaraguan córdoba',
      symbol: 'C$'
    },
    language: {
      code: 'es',
      name: 'Spanish'
    },
    flag: 'https://restcountries.eu/data/nic.svg'
  }, {
    name: 'Niger',
    code: 'NE',
    capital: 'Niamey',
    region: 'AF',
    currency: {
      code: 'XOF',
      name: 'West African CFA franc',
      symbol: 'Fr'
    },
    language: {
      code: 'fr',
      name: 'French'
    },
    flag: 'https://restcountries.eu/data/ner.svg'
  }, {
    name: 'Nigeria',
    code: 'NG',
    capital: 'Abuja',
    region: 'AF',
    currency: {
      code: 'NGN',
      name: 'Nigerian naira',
      symbol: '₦'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/nga.svg'
  }, {
    name: 'Niue',
    code: 'NU',
    capital: 'Alofi',
    region: 'OC',
    currency: {
      code: 'NZD',
      name: 'New Zealand dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/niu.svg'
  }, {
    name: 'Norfolk Island',
    code: 'NF',
    capital: 'Kingston',
    region: 'OC',
    currency: {
      code: 'AUD',
      name: 'Australian dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/nfk.svg'
  }, {
    name: "Korea (Democratic People's Republic of)",
    code: 'KP',
    capital: 'Pyongyang',
    region: 'AS',
    currency: {
      code: 'KPW',
      name: 'North Korean won',
      symbol: '₩'
    },
    language: {
      code: 'ko',
      name: 'Korean'
    },
    flag: 'https://restcountries.eu/data/prk.svg'
  }, {
    name: 'Northern Mariana Islands',
    code: 'MP',
    capital: 'Saipan',
    region: 'OC',
    currency: {
      code: 'USD',
      name: 'United States dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/mnp.svg'
  }, {
    name: 'Norway',
    code: 'NO',
    capital: 'Oslo',
    region: 'EU',
    currency: {
      code: 'NOK',
      name: 'Norwegian krone',
      symbol: 'kr'
    },
    language: {
      code: 'no',
      name: 'Norwegian'
    },
    flag: 'https://restcountries.eu/data/nor.svg'
  }, {
    name: 'Oman',
    code: 'OM',
    capital: 'Muscat',
    region: 'AS',
    currency: {
      code: 'OMR',
      name: 'Omani rial',
      symbol: 'ر.ع.'
    },
    language: {
      code: 'ar',
      name: 'Arabic'
    },
    flag: 'https://restcountries.eu/data/omn.svg'
  }, {
    name: 'Pakistan',
    code: 'PK',
    capital: 'Islamabad',
    region: 'AS',
    currency: {
      code: 'PKR',
      name: 'Pakistani rupee',
      symbol: '₨'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/pak.svg'
  }, {
    name: 'Palau',
    code: 'PW',
    capital: 'Ngerulmud',
    region: 'OC',
    currency: {
      code: 'USD',
      name: 'United States dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/plw.svg'
  }, {
    name: 'Palestine, State of',
    code: 'PS',
    capital: 'Ramallah',
    region: 'AS',
    currency: {
      code: 'ILS',
      name: 'Israeli new sheqel',
      symbol: '₪'
    },
    language: {
      code: 'ar',
      name: 'Arabic'
    },
    flag: 'https://restcountries.eu/data/pse.svg'
  }, {
    name: 'Panama',
    code: 'PA',
    capital: 'Panama City',
    region: 'NA',
    currency: {
      code: 'USD',
      name: 'United States dollar',
      symbol: '$'
    },
    language: {
      code: 'es',
      name: 'Spanish'
    },
    flag: 'https://restcountries.eu/data/pan.svg'
  }, {
    name: 'Papua New Guinea',
    code: 'PG',
    capital: 'Port Moresby',
    region: 'OC',
    currency: {
      code: 'PGK',
      name: 'Papua New Guinean kina',
      symbol: 'K'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/png.svg'
  }, {
    name: 'Paraguay',
    code: 'PY',
    capital: 'Asunción',
    region: 'SA',
    currency: {
      code: 'PYG',
      name: 'Paraguayan guaraní',
      symbol: '₲'
    },
    language: {
      code: 'es',
      name: 'Spanish'
    },
    flag: 'https://restcountries.eu/data/pry.svg'
  }, {
    name: 'Peru',
    code: 'PE',
    capital: 'Lima',
    region: 'SA',
    currency: {
      code: 'PEN',
      name: 'Peruvian sol',
      symbol: 'S/.'
    },
    language: {
      code: 'es',
      name: 'Spanish'
    },
    flag: 'https://restcountries.eu/data/per.svg'
  }, {
    name: 'Philippines',
    code: 'PH',
    capital: 'Manila',
    region: 'AS',
    currency: {
      code: 'PHP',
      name: 'Philippine peso',
      symbol: '₱'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/phl.svg'
  }, {
    name: 'Pitcairn',
    code: 'PN',
    capital: 'Adamstown',
    region: 'OC',
    currency: {
      code: 'NZD',
      name: 'New Zealand dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/pcn.svg'
  }, {
    name: 'Poland',
    code: 'PL',
    capital: 'Warsaw',
    region: 'EU',
    currency: {
      code: 'PLN',
      name: 'Polish złoty',
      symbol: 'zł'
    },
    language: {
      code: 'pl',
      name: 'Polish'
    },
    flag: 'https://restcountries.eu/data/pol.svg'
  }, {
    name: 'Portugal',
    code: 'PT',
    capital: 'Lisbon',
    region: 'EU',
    currency: {
      code: 'EUR',
      name: 'Euro',
      symbol: '€'
    },
    language: {
      code: 'pt',
      name: 'Portuguese'
    },
    flag: 'https://restcountries.eu/data/prt.svg'
  }, {
    name: 'Puerto Rico',
    code: 'PR',
    capital: 'San Juan',
    region: 'NA',
    currency: {
      code: 'USD',
      name: 'United States dollar',
      symbol: '$'
    },
    language: {
      code: 'es',
      name: 'Spanish'
    },
    flag: 'https://restcountries.eu/data/pri.svg'
  }, {
    name: 'Qatar',
    code: 'QA',
    capital: 'Doha',
    region: 'AS',
    currency: {
      code: 'QAR',
      name: 'Qatari riyal',
      symbol: 'ر.ق'
    },
    language: {
      code: 'ar',
      name: 'Arabic'
    },
    flag: 'https://restcountries.eu/data/qat.svg'
  }, {
    name: 'Republic of Kosovo',
    code: 'XK',
    capital: 'Pristina',
    region: 'EU',
    currency: {
      code: 'EUR',
      name: 'Euro',
      symbol: '€'
    },
    language: {
      code: 'sq',
      name: 'Albanian'
    },
    flag: 'https://restcountries.eu/data/kos.svg'
  }, {
    name: 'Réunion',
    code: 'RE',
    capital: 'Saint-Denis',
    region: 'AF',
    currency: {
      code: 'EUR',
      name: 'Euro',
      symbol: '€'
    },
    language: {
      code: 'fr',
      name: 'French'
    },
    flag: 'https://restcountries.eu/data/reu.svg'
  }, {
    name: 'Romania',
    code: 'RO',
    capital: 'Bucharest',
    region: 'EU',
    currency: {
      code: 'RON',
      name: 'Romanian leu',
      symbol: 'lei'
    },
    language: {
      code: 'ro',
      name: 'Romanian'
    },
    flag: 'https://restcountries.eu/data/rou.svg'
  }, {
    name: 'Russian Federation',
    code: 'RU',
    capital: 'Moscow',
    region: 'EU',
    currency: {
      code: 'RUB',
      name: 'Russian ruble',
      symbol: '₽'
    },
    language: {
      code: 'ru',
      name: 'Russian'
    },
    flag: 'https://restcountries.eu/data/rus.svg'
  }, {
    name: 'Rwanda',
    code: 'RW',
    capital: 'Kigali',
    region: 'AF',
    currency: {
      code: 'RWF',
      name: 'Rwandan franc',
      symbol: 'Fr'
    },
    language: {
      code: 'rw',
      name: 'Kinyarwanda'
    },
    flag: 'https://restcountries.eu/data/rwa.svg'
  }, {
    name: 'Saint Barthélemy',
    code: 'BL',
    capital: 'Gustavia',
    region: 'NA',
    currency: {
      code: 'EUR',
      name: 'Euro',
      symbol: '€'
    },
    language: {
      code: 'fr',
      name: 'French'
    },
    flag: 'https://restcountries.eu/data/blm.svg'
  }, {
    name: 'Saint Helena, Ascension and Tristan da Cunha',
    code: 'SH',
    capital: 'Jamestown',
    region: 'AF',
    currency: {
      code: 'SHP',
      name: 'Saint Helena pound',
      symbol: '£'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/shn.svg'
  }, {
    name: 'Saint Kitts and Nevis',
    code: 'KN',
    capital: 'Basseterre',
    region: 'NA',
    currency: {
      code: 'XCD',
      name: 'East Caribbean dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/kna.svg'
  }, {
    name: 'Saint Lucia',
    code: 'LC',
    capital: 'Castries',
    region: 'NA',
    currency: {
      code: 'XCD',
      name: 'East Caribbean dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/lca.svg'
  }, {
    name: 'Saint Martin (French part)',
    code: 'MF',
    capital: 'Marigot',
    region: 'NA',
    currency: {
      code: 'EUR',
      name: 'Euro',
      symbol: '€'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/maf.svg'
  }, {
    name: 'Saint Pierre and Miquelon',
    code: 'PM',
    capital: 'Saint-Pierre',
    region: 'NA',
    currency: {
      code: 'EUR',
      name: 'Euro',
      symbol: '€'
    },
    language: {
      code: 'fr',
      name: 'French'
    },
    flag: 'https://restcountries.eu/data/spm.svg'
  }, {
    name: 'Saint Vincent and the Grenadines',
    code: 'VC',
    capital: 'Kingstown',
    region: 'NA',
    currency: {
      code: 'XCD',
      name: 'East Caribbean dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/vct.svg'
  }, {
    name: 'Samoa',
    code: 'WS',
    capital: 'Apia',
    region: 'OC',
    currency: {
      code: 'WST',
      name: 'Samoan tālā',
      symbol: 'T'
    },
    language: {
      code: 'sm',
      name: 'Samoan'
    },
    flag: 'https://restcountries.eu/data/wsm.svg'
  }, {
    name: 'San Marino',
    code: 'SM',
    capital: 'City of San Marino',
    region: 'EU',
    currency: {
      code: 'EUR',
      name: 'Euro',
      symbol: '€'
    },
    language: {
      code: 'it',
      name: 'Italian'
    },
    flag: 'https://restcountries.eu/data/smr.svg'
  }, {
    name: 'Sao Tome and Principe',
    code: 'ST',
    capital: 'São Tomé',
    region: 'AF',
    currency: {
      code: 'STD',
      name: 'São Tomé and Príncipe dobra',
      symbol: 'Db'
    },
    language: {
      code: 'pt',
      name: 'Portuguese'
    },
    flag: 'https://restcountries.eu/data/stp.svg'
  }, {
    name: 'Saudi Arabia',
    code: 'SA',
    capital: 'Riyadh',
    region: 'AS',
    currency: {
      code: 'SAR',
      name: 'Saudi riyal',
      symbol: 'ر.س'
    },
    language: {
      code: 'ar',
      name: 'Arabic'
    },
    flag: 'https://restcountries.eu/data/sau.svg'
  }, {
    name: 'Senegal',
    code: 'SN',
    capital: 'Dakar',
    region: 'AF',
    currency: {
      code: 'XOF',
      name: 'West African CFA franc',
      symbol: 'Fr'
    },
    language: {
      code: 'fr',
      name: 'French'
    },
    flag: 'https://restcountries.eu/data/sen.svg'
  }, {
    name: 'Serbia',
    code: 'RS',
    capital: 'Belgrade',
    region: 'EU',
    currency: {
      code: 'RSD',
      name: 'Serbian dinar',
      symbol: 'дин.'
    },
    language: {
      code: 'sr',
      name: 'Serbian'
    },
    flag: 'https://restcountries.eu/data/srb.svg'
  }, {
    name: 'Seychelles',
    code: 'SC',
    capital: 'Victoria',
    region: 'AF',
    currency: {
      code: 'SCR',
      name: 'Seychellois rupee',
      symbol: '₨'
    },
    language: {
      code: 'fr',
      name: 'French'
    },
    flag: 'https://restcountries.eu/data/syc.svg'
  }, {
    name: 'Sierra Leone',
    code: 'SL',
    capital: 'Freetown',
    region: 'AF',
    currency: {
      code: 'SLL',
      name: 'Sierra Leonean leone',
      symbol: 'Le'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/sle.svg'
  }, {
    name: 'Singapore',
    code: 'SG',
    capital: 'Singapore',
    region: 'AS',
    currency: {
      code: 'SGD',
      name: 'Singapore dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/sgp.svg'
  }, {
    name: 'Sint Maarten (Dutch part)',
    code: 'SX',
    capital: 'Philipsburg',
    region: 'Americas',
    currency: {
      code: 'ANG',
      name: 'Netherlands Antillean guilder',
      symbol: 'ƒ'
    },
    language: {
      code: 'nl',
      name: 'Dutch'
    },
    flag: 'https://restcountries.eu/data/sxm.svg'
  }, {
    name: 'Slovakia',
    code: 'SK',
    capital: 'Bratislava',
    region: 'EU',
    currency: {
      code: 'EUR',
      name: 'Euro',
      symbol: '€'
    },
    language: {
      code: 'sk',
      name: 'Slovak'
    },
    flag: 'https://restcountries.eu/data/svk.svg'
  }, {
    name: 'Slovenia',
    code: 'SI',
    capital: 'Ljubljana',
    region: 'EU',
    currency: {
      code: 'EUR',
      name: 'Euro',
      symbol: '€'
    },
    language: {
      code: 'sl',
      name: 'Slovene'
    },
    flag: 'https://restcountries.eu/data/svn.svg'
  }, {
    name: 'Solomon Islands',
    code: 'SB',
    capital: 'Honiara',
    region: 'OC',
    currency: {
      code: 'SBD',
      name: 'Solomon Islands dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/slb.svg'
  }, {
    name: 'Somalia',
    code: 'SO',
    capital: 'Mogadishu',
    region: 'AF',
    currency: {
      code: 'SOS',
      name: 'Somali shilling',
      symbol: 'Sh'
    },
    language: {
      code: 'ar',
      name: 'Arabic'
    },
    flag: 'https://restcountries.eu/data/som.svg'
  }, {
    name: 'South Africa',
    code: 'ZA',
    capital: 'Pretoria',
    region: 'AF',
    currency: {
      code: 'ZAR',
      name: 'South African rand',
      symbol: 'R'
    },
    language: {
      code: 'en',
      iso639_2: 'eng',
      name: 'English',
      nativeName: 'English'
    },
    flag: 'https://restcountries.eu/data/zaf.svg'
  }, {
    name: 'South Georgia and the South Sandwich Islands',
    code: 'GS',
    capital: 'King Edward Point',
    region: 'NA',
    currency: {
      code: 'GBP',
      name: 'British pound',
      symbol: '£'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/sgs.svg'
  }, {
    name: 'Korea (Republic of)',
    code: 'KR',
    capital: 'Seoul',
    region: 'AS',
    currency: {
      code: 'KRW',
      name: 'South Korean won',
      symbol: '₩'
    },
    language: {
      code: 'ko',
      name: 'Korean'
    },
    flag: 'https://restcountries.eu/data/kor.svg'
  }, {
    name: 'South Sudan',
    code: 'SS',
    capital: 'Juba',
    region: 'AF',
    currency: {
      code: 'SSP',
      name: 'South Sudanese pound',
      symbol: '£'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/ssd.svg'
  }, {
    name: 'Spain',
    code: 'ES',
    capital: 'Madrid',
    region: 'EU',
    currency: {
      code: 'EUR',
      name: 'Euro',
      symbol: '€'
    },
    language: {
      code: 'es',
      name: 'Spanish'
    },
    flag: 'https://restcountries.eu/data/esp.svg'
  }, {
    name: 'Sri Lanka',
    code: 'LK',
    capital: 'Colombo',
    region: 'AS',
    currency: {
      code: 'LKR',
      name: 'Sri Lankan rupee',
      symbol: 'Rs'
    },
    language: {
      code: 'si',
      iso639_2: 'sin',
      name: 'Sinhalese',
      nativeName: 'සිංහල'
    },
    flag: 'https://restcountries.eu/data/lka.svg'
  }, {
    name: 'Sudan',
    code: 'SD',
    capital: 'Khartoum',
    region: 'AF',
    currency: {
      code: 'SDG',
      name: 'Sudanese pound',
      symbol: 'ج.س.'
    },
    language: {
      code: 'ar',
      name: 'Arabic'
    },
    flag: 'https://restcountries.eu/data/sdn.svg'
  }, {
    name: 'Suriname',
    code: 'SR',
    capital: 'Paramaribo',
    region: 'SA',
    currency: {
      code: 'SRD',
      name: 'Surinamese dollar',
      symbol: '$'
    },
    language: {
      code: 'nl',
      name: 'Dutch'
    },
    flag: 'https://restcountries.eu/data/sur.svg'
  }, {
    name: 'Svalbard and Jan Mayen',
    code: 'SJ',
    capital: 'Longyearbyen',
    region: 'EU',
    currency: {
      code: 'NOK',
      name: 'Norwegian krone',
      symbol: 'kr'
    },
    language: {
      code: 'no',
      name: 'Norwegian'
    },
    flag: 'https://restcountries.eu/data/sjm.svg'
  }, {
    name: 'Swaziland',
    code: 'SZ',
    capital: 'Lobamba',
    region: 'AF',
    currency: {
      code: 'SZL',
      name: 'Swazi lilangeni',
      symbol: 'L'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/swz.svg'
  }, {
    name: 'Sweden',
    code: 'SE',
    capital: 'Stockholm',
    region: 'EU',
    currency: {
      code: 'SEK',
      name: 'Swedish krona',
      symbol: 'kr'
    },
    language: {
      code: 'sv',
      name: 'Swedish'
    },
    flag: 'https://restcountries.eu/data/swe.svg'
  }, {
    name: 'Switzerland',
    code: 'CH',
    capital: 'Bern',
    region: 'EU',
    currency: {
      code: 'CHF',
      name: 'Swiss franc',
      symbol: 'Fr'
    },
    language: {
      code: 'de',
      name: 'German'
    },
    flag: 'https://restcountries.eu/data/che.svg'
  }, {
    name: 'Syrian Arab Republic',
    code: 'SY',
    capital: 'Damascus',
    region: 'AS',
    currency: {
      code: 'SYP',
      name: 'Syrian pound',
      symbol: '£'
    },
    language: {
      code: 'ar',
      name: 'Arabic'
    },
    flag: 'https://restcountries.eu/data/syr.svg'
  }, {
    name: 'Taiwan',
    code: 'TW',
    capital: 'Taipei',
    region: 'AS',
    currency: {
      code: 'TWD',
      name: 'New Taiwan dollar',
      symbol: '$'
    },
    language: {
      code: 'zh',
      name: 'Chinese'
    },
    flag: 'https://restcountries.eu/data/twn.svg'
  }, {
    name: 'Tajikistan',
    code: 'TJ',
    capital: 'Dushanbe',
    region: 'AS',
    currency: {
      code: 'TJS',
      name: 'Tajikistani somoni',
      symbol: 'ЅМ'
    },
    language: {
      code: 'tg',
      name: 'Tajik'
    },
    flag: 'https://restcountries.eu/data/tjk.svg'
  }, {
    name: 'Tanzania, United Republic of',
    code: 'TZ',
    capital: 'Dodoma',
    region: 'AF',
    currency: {
      code: 'TZS',
      name: 'Tanzanian shilling',
      symbol: 'Sh'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/tza.svg'
  }, {
    name: 'Thailand',
    code: 'TH',
    capital: 'Bangkok',
    region: 'AS',
    currency: {
      code: 'THB',
      name: 'Thai baht',
      symbol: '฿'
    },
    language: {
      code: 'th',
      name: 'Thai'
    },
    flag: 'https://restcountries.eu/data/tha.svg'
  }, {
    name: 'Timor-Leste',
    code: 'TL',
    capital: 'Dili',
    region: 'AS',
    currency: {
      code: 'USD',
      name: 'United States dollar',
      symbol: '$'
    },
    language: {
      code: 'pt',
      name: 'Portuguese'
    },
    flag: 'https://restcountries.eu/data/tls.svg'
  }, {
    name: 'Togo',
    code: 'TG',
    capital: 'Lomé',
    region: 'AF',
    currency: {
      code: 'XOF',
      name: 'West African CFA franc',
      symbol: 'Fr'
    },
    language: {
      code: 'fr',
      name: 'French'
    },
    flag: 'https://restcountries.eu/data/tgo.svg'
  }, {
    name: 'Tokelau',
    code: 'TK',
    capital: 'Fakaofo',
    region: 'OC',
    currency: {
      code: 'NZD',
      name: 'New Zealand dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/tkl.svg'
  }, {
    name: 'Tonga',
    code: 'TO',
    capital: "Nuku'alofa",
    region: 'OC',
    currency: {
      code: 'TOP',
      name: 'Tongan paʻanga',
      symbol: 'T$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/ton.svg'
  }, {
    name: 'Trinidad and Tobago',
    code: 'TT',
    capital: 'Port of Spain',
    region: 'SA',
    currency: {
      code: 'TTD',
      name: 'Trinidad and Tobago dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/tto.svg'
  }, {
    name: 'Tunisia',
    code: 'TN',
    capital: 'Tunis',
    region: 'AF',
    currency: {
      code: 'TND',
      name: 'Tunisian dinar',
      symbol: 'د.ت'
    },
    language: {
      code: 'ar',
      name: 'Arabic'
    },
    flag: 'https://restcountries.eu/data/tun.svg'
  }, {
    name: 'Turkey',
    code: 'TR',
    capital: 'Ankara',
    region: 'AS',
    currency: {
      code: 'TRY',
      name: 'Turkish lira',
      symbol: null
    },
    language: {
      code: 'tr',
      name: 'Turkish'
    },
    flag: 'https://restcountries.eu/data/tur.svg'
  }, {
    name: 'Turkmenistan',
    code: 'TM',
    capital: 'Ashgabat',
    region: 'AS',
    currency: {
      code: 'TMT',
      name: 'Turkmenistan manat',
      symbol: 'm'
    },
    language: {
      code: 'tk',
      name: 'Turkmen'
    },
    flag: 'https://restcountries.eu/data/tkm.svg'
  }, {
    name: 'Turks and Caicos Islands',
    code: 'TC',
    capital: 'Cockburn Town',
    region: 'NA',
    currency: {
      code: 'USD',
      name: 'United States dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/tca.svg'
  }, {
    name: 'Tuvalu',
    code: 'TV',
    capital: 'Funafuti',
    region: 'OC',
    currency: {
      code: 'AUD',
      name: 'Australian dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/tuv.svg'
  }, {
    name: 'Uganda',
    code: 'UG',
    capital: 'Kampala',
    region: 'AF',
    currency: {
      code: 'UGX',
      name: 'Ugandan shilling',
      symbol: 'Sh'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/uga.svg'
  }, {
    name: 'Ukraine',
    code: 'UA',
    capital: 'Kiev',
    region: 'EU',
    currency: {
      code: 'UAH',
      name: 'Ukrainian hryvnia',
      symbol: '₴'
    },
    language: {
      code: 'uk',
      name: 'Ukrainian'
    },
    flag: 'https://restcountries.eu/data/ukr.svg'
  }, {
    name: 'United Arab Emirates',
    code: 'AE',
    capital: 'Abu Dhabi',
    region: 'AS',
    currency: {
      code: 'AED',
      name: 'United Arab Emirates dirham',
      symbol: 'د.إ'
    },
    language: {
      code: 'ar',
      name: 'Arabic'
    },
    flag: 'https://restcountries.eu/data/are.svg'
  }, {
    name: 'United Kingdom of Great Britain and Northern Ireland',
    code: 'GB',
    capital: 'London',
    region: 'EU',
    currency: {
      code: 'GBP',
      name: 'British pound',
      symbol: '£'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/gbr.svg'
  }, {
    name: 'United States of America',
    code: 'US',
    capital: 'Washington, D.C.',
    region: 'NA',
    currency: {
      code: 'USD',
      name: 'United States dollar',
      symbol: '$'
    },
    language: {
      code: 'en',
      iso639_2: 'eng',
      name: 'English',
      nativeName: 'English'
    },
    flag: 'https://restcountries.eu/data/usa.svg'
  }, {
    name: 'Uruguay',
    code: 'UY',
    capital: 'Montevideo',
    region: 'SA',
    currency: {
      code: 'UYU',
      name: 'Uruguayan peso',
      symbol: '$'
    },
    language: {
      code: 'es',
      name: 'Spanish'
    },
    flag: 'https://restcountries.eu/data/ury.svg'
  }, {
    name: 'Uzbekistan',
    code: 'UZ',
    capital: 'Tashkent',
    region: 'AS',
    currency: {
      code: 'UZS',
      name: "Uzbekistani so'm",
      symbol: null
    },
    language: {
      code: 'uz',
      name: 'Uzbek'
    },
    flag: 'https://restcountries.eu/data/uzb.svg'
  }, {
    name: 'Vanuatu',
    code: 'VU',
    capital: 'Port Vila',
    region: 'OC',
    currency: {
      code: 'VUV',
      name: 'Vanuatu vatu',
      symbol: 'Vt'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/vut.svg'
  }, {
    name: 'Venezuela (Bolivarian Republic of)',
    code: 'VE',
    capital: 'Caracas',
    region: 'SA',
    currency: {
      code: 'VEF',
      name: 'Venezuelan bolívar',
      symbol: 'Bs F'
    },
    language: {
      code: 'es',
      name: 'Spanish'
    },
    flag: 'https://restcountries.eu/data/ven.svg'
  }, {
    name: 'Viet Nam',
    code: 'VN',
    capital: 'Hanoi',
    region: 'AS',
    currency: {
      code: 'VND',
      name: 'Vietnamese đồng',
      symbol: '₫'
    },
    language: {
      code: 'vi',
      name: 'Vietnamese'
    },
    flag: 'https://restcountries.eu/data/vnm.svg'
  }, {
    name: 'Wallis and Futuna',
    code: 'WF',
    capital: 'Mata-Utu',
    region: 'OC',
    currency: {
      code: 'XPF',
      name: 'CFP franc',
      symbol: 'Fr'
    },
    language: {
      code: 'fr',
      name: 'French'
    },
    flag: 'https://restcountries.eu/data/wlf.svg'
  }, {
    name: 'Western Sahara',
    code: 'EH',
    capital: 'El Aaiún',
    region: 'AF',
    currency: {
      code: 'MAD',
      name: 'Moroccan dirham',
      symbol: 'د.م.'
    },
    language: {
      code: 'es',
      name: 'Spanish'
    },
    flag: 'https://restcountries.eu/data/esh.svg'
  }, {
    name: 'Yemen',
    code: 'YE',
    capital: "Sana'a",
    region: 'AS',
    currency: {
      code: 'YER',
      name: 'Yemeni rial',
      symbol: '﷼'
    },
    language: {
      code: 'ar',
      name: 'Arabic'
    },
    flag: 'https://restcountries.eu/data/yem.svg'
  }, {
    name: 'Zambia',
    code: 'ZM',
    capital: 'Lusaka',
    region: 'AF',
    currency: {
      code: 'ZMW',
      name: 'Zambian kwacha',
      symbol: 'ZK'
    },
    language: {
      code: 'en',
      name: 'English'
    },
    flag: 'https://restcountries.eu/data/zmb.svg'
  }, {
    name: 'Zimbabwe',
    code: 'ZW',
    capital: 'Harare',
    region: 'AF',
    currency: {
      code: 'BWP',
      name: 'Botswana pula',
      symbol: 'P'
    },
    language: {
      code: 'en',
      iso639_2: 'eng',
      name: 'English',
      nativeName: 'English'
    },
    flag: 'https://restcountries.eu/data/zwe.svg'
  }];

  function CountrySelect(_ref) {
    var _onChange = _ref.onChange,
      record = _ref.record;
    var _useState = React$1.useState(function () {
        var selectedCountry = record.params['billingInformation.country'];
        if (selectedCountry) {
          var country = countries.find(function (country) {
            return country.code === selectedCountry;
          });
          if (country) return {
            value: country.code,
            label: country.name
          };
        }
        return null;
      }),
      _useState2 = _slicedToArray(_useState, 1),
      defaultCountry = _useState2[0];
    var _useState3 = React$1.useState(function () {
        return countries.map(function (country) {
          return {
            value: country.code,
            label: country.name
          };
        });
      }),
      _useState4 = _slicedToArray(_useState3, 1),
      options = _useState4[0];
    return /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      mb: "3rem"
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, "Country"), /*#__PURE__*/React__default["default"].createElement(Select__default["default"], {
      name: "country",
      options: options,
      onChange: function onChange(option) {
        _onChange('billingInformation.country', option.value);
      },
      defaultValue: defaultCountry
    }));
  }

  var ShowOrder = function ShowOrder(_ref) {
    var resource = _ref.resource,
      record = _ref.record;
    var _useState = React$1.useState(25),
      _useState2 = _slicedToArray(_useState, 1),
      mb = _useState2[0];
    var _useState3 = React$1.useState(resource.showProperties.reduce(function (showProperties, property) {
        return _objectSpread2(_objectSpread2({}, showProperties), {}, _defineProperty({}, property.name, property));
      }, {})),
      _useState4 = _slicedToArray(_useState3, 1),
      showProperties = _useState4[0];
    var _useState5 = React$1.useState(adminBro.flat.unflatten(record.params).items),
      _useState6 = _slicedToArray(_useState5, 1),
      items = _useState6[0];
    return /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      variant: "grey"
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      flex: true,
      flexGrow: 1,
      flexDirection: "column",
      variant: "white"
    }, showProperties._id && /*#__PURE__*/React__default["default"].createElement(adminBro.BasePropertyComponent, {
      resource: resource,
      property: resource.properties._id,
      record: record,
      where: "show"
    }), showProperties.status && /*#__PURE__*/React__default["default"].createElement(adminBro.BasePropertyComponent, {
      resource: resource,
      property: resource.properties.status,
      record: record,
      where: "show"
    }), showProperties.isRead && /*#__PURE__*/React__default["default"].createElement(adminBro.BasePropertyComponent, {
      resource: resource,
      property: resource.properties.isRead,
      record: record,
      where: "show"
    }), showProperties.items && /*#__PURE__*/React__default["default"].createElement(designSystem.ValueGroup, {
      label: resource.properties.items.name
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Section, null, items.map(function (item, index) {
      return /*#__PURE__*/React__default["default"].createElement(designSystem.ValueGroup, {
        key: index,
        label: "[".concat(index + 1, "]")
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Section, null, item.status && /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
        mb: mb
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.status'].label), /*#__PURE__*/React__default["default"].createElement(designSystem.Badge, null, item.status)), item.linkText && /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
        mb: mb
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.linkText'].label), /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, item.linkText)), item.linkType && /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
        mb: mb
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.linkType'].label), /*#__PURE__*/React__default["default"].createElement(designSystem.Badge, null, item.linkType)), item.publishDate && /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
        mb: mb
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.publishDate'].label), /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, new Date(item.publishDate).toDateString())), item.isPermanent !== (null) && /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
        mb: mb
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.isPermanent'].label), /*#__PURE__*/React__default["default"].createElement(designSystem.Badge, {
        style: {
          backgroundColor: 'inherit',
          color: 'darkgrey'
        }
      }, item.isPermanent ? 'Yes' : 'No')), item.contentOrder && /*#__PURE__*/React__default["default"].createElement(designSystem.ValueGroup, {
        label: resource.properties.items.contentOrder && resource.properties.items.contentOrder.name || 'Content Order'
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Section, null, /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
        mb: mb
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.contentOrder.language'] && resource.properties['items.contentOrder.language'].label || 'Language'), /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, item.contentOrder.language)), /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
        mb: mb
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.contentOrder.status'] && resource.properties['items.contentOrder.status'].label || 'Status'), /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, item.contentOrder.status)), /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
        mb: mb
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.contentOrder.tone_of_voice'] && resource.properties['items.contentOrder.tone_of_voice'].label || 'Tone Of Voice'), /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, item.contentOrder.tone_of_voice)), item.contentOrder.sub_keywords && Array.isArray(item.contentOrder.sub_keywords.length) && item.contentOrder.sub_keywords.length && /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
        mb: mb
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.contentOrder.sub_keywords'] && resource.properties['items.contentOrder.sub_keywords'].label || 'Sub Keywords'), item.contentOrder.sub_keywords.map(function (subKeyword, index) {
        return /*#__PURE__*/React__default["default"].createElement(designSystem.Text, {
          key: index
        }, subKeyword.keyword);
      })))), item.contentLength && /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
        mb: mb
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, "Item Content Length"), /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, "".concat(item.contentLength.title, " - ").concat(item.contentLength.price, " \u20AC"))), item.filePath && /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
        mb: mb
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.filePath'].label), /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, item.filePath)), item.request && /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
        mb: mb
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.request'].label), /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, item.request)), item.linkPrice && /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
        mb: mb
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.linkPrice'].label), /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, item.linkPrice)), item.marketLink && /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
        mb: mb
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.marketLink'].label), /*#__PURE__*/React__default["default"].createElement(designSystem.Link, {
        variant: "primary",
        href: record.populated["items.".concat(index, ".marketLink")].params.url,
        rel: "opener"
      }, record.populated["items.".concat(index, ".marketLink")].params.name)), item.subPage && /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
        mb: mb
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.subPage'].label), /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, item.subPage)), item.linkFromUrl && /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
        mb: mb
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.linkFromUrl'].label), /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, item.linkFromUrl)), item.createdAt && /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
        mb: mb
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.createdAt'].label), /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, new Date(item.createdAt).toDateString())), item.commission && /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
        mb: mb
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.commission'].label), /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, item.commission))));
    }))), showProperties.payment && /*#__PURE__*/React__default["default"].createElement(adminBro.BasePropertyComponent, {
      resource: resource,
      property: resource.properties.payment,
      record: record,
      where: "show"
    }), showProperties.creditNote && /*#__PURE__*/React__default["default"].createElement(adminBro.BasePropertyComponent, {
      resource: resource,
      property: resource.properties.creditNote,
      record: record,
      where: "show"
    }), showProperties.outreach && /*#__PURE__*/React__default["default"].createElement(adminBro.BasePropertyComponent, {
      resource: resource,
      property: resource.properties.outreach,
      record: record,
      where: "show"
    }), showProperties.createdBy && /*#__PURE__*/React__default["default"].createElement(adminBro.BasePropertyComponent, {
      resource: resource,
      property: resource.properties.createdBy,
      record: record,
      where: "show"
    }), showProperties.ignoreJustification && /*#__PURE__*/React__default["default"].createElement(adminBro.BasePropertyComponent, {
      resource: resource,
      property: resource.properties.ignoreJustification,
      record: record,
      where: "show"
    }), showProperties.updatedAt && /*#__PURE__*/React__default["default"].createElement(adminBro.BasePropertyComponent, {
      resource: resource,
      property: resource.properties.updatedAt,
      record: record,
      where: "show"
    })));
  };

  var _excluded$1 = ["items"];
  var EditOrder = function EditOrder(_ref) {
    var initialRecord = _ref.record,
      resource = _ref.resource;
    var history = reactRouter.useHistory();
    var _useState = React$1.useState({}),
      _useState2 = _slicedToArray(_useState, 2),
      errors = _useState2[0],
      setErrors = _useState2[1];
    var _useState3 = React$1.useState(resource.editProperties.reduce(function (editProperties, property) {
        return _objectSpread2(_objectSpread2({}, editProperties), {}, _defineProperty({}, property.name, property));
      }, {})),
      _useState4 = _slicedToArray(_useState3, 1);
      _useState4[0];
    var _useState5 = React$1.useState(adminBro.flat.unflatten(initialRecord.params).items),
      _useState6 = _slicedToArray(_useState5, 1),
      items = _useState6[0];
    var _useRecord = adminBro.useRecord(initialRecord, resource.id),
      record = _useRecord.record,
      submit = _useRecord.submit,
      handleChange = _useRecord.handleChange,
      setRecord = _useRecord.setRecord;
    var _useState7 = React$1.useState(_objectSpread2(_objectSpread2({}, record.params), {}, {
        items: items
      })),
      _useState8 = _slicedToArray(_useState7, 2),
      formValues = _useState8[0],
      setFormValues = _useState8[1];
    var _useState9 = React$1.useState(adminBro.flat.unflatten(record.populated).items),
      _useState10 = _slicedToArray(_useState9, 1),
      populatedItemValues = _useState10[0];
    var contentlessLinkTypes = ['Index', 'Subpage'];
    var _useState11 = React$1.useState(35),
      _useState12 = _slicedToArray(_useState11, 1),
      mb = _useState12[0];
    var initialItemValues = {
      articleTitle: '',
      commission: 0,
      contentLength: {
        title: '',
        price: '',
        length: ''
      },
      contentOrder: {
        language: '',
        min_length: 5,
        focus_keyword: '',
        status: 'Not Started',
        sub_keywords: [],
        tone_of_voice: ''
      },
      createdAt: '',
      filePath: '',
      ignoreJustification: '',
      isPermanent: false,
      linkFromUrl: '',
      linkPrice: 0,
      linkText: '',
      linkType: '',
      marketLink: '',
      publishDate: '',
      requests: '',
      status: 'Pending',
      subPage: '',
      website: ''
    };
    var handleAddNewItem = function handleAddNewItem(e) {
      e.preventDefault();
      // to remove error colored item fields when the first item is added after submit error
      if (errors.items) {
        errors.items;
          var rest = _objectWithoutProperties(errors, _excluded$1);
        setErrors({
          rest: rest
        });
      }
      var newValues = _objectSpread2({}, formValues);
      newValues.items.push(initialItemValues);
      Object.keys(initialItemValues).map(function (key) {
        return newValues["items.".concat(newValues.items.length - 1, ".").concat(key)] = initialItemValues[key];
      });
      setRecord(_objectSpread2(_objectSpread2({}, record), {}, {
        params: newValues
      }));
    };
    var handleDeleteItem = function handleDeleteItem(e, index) {
      e.preventDefault();
      var newValues = _objectSpread2({}, formValues);
      newValues.items.splice(index, 1);
      Object.keys(initialItemValues).map(function (key) {
        return delete newValues["items.".concat(index, ".").concat(key)];
      });
      setRecord(_objectSpread2(_objectSpread2({}, record), {}, {
        params: newValues
      }));
    };

    // select field option values
    var itemSubPropterties = resource.editProperties.find(function (OrderProperty) {
      return OrderProperty.propertyPath === 'items';
    }).subProperties;
    var itemStatusOptions = itemSubPropterties.find(function (itemProperty) {
      return itemProperty.propertyPath === 'items.status';
    }).availableValues;
    var itemLinkTypeOptions = itemSubPropterties.find(function (itemProperty) {
      return itemProperty.propertyPath === 'items.linkType';
    }).availableValues;
    var contentLanguageOptions = itemSubPropterties.find(function (itemProperty) {
      return itemProperty.propertyPath === 'items.contentOrder';
    }).subProperties.find(function (contentSubProps) {
      return contentSubProps.propertyPath === 'items.contentOrder.language';
    }).availableValues || [];
    var contentStatusOptions = itemSubPropterties.find(function (itemProperty) {
      return itemProperty.propertyPath === 'items.contentOrder';
    }).subProperties.find(function (contentSubProps) {
      return contentSubProps.propertyPath === 'items.contentOrder.status';
    }).availableValues || [];
    var _useState13 = React$1.useState([]),
      _useState14 = _slicedToArray(_useState13, 2),
      subKeywordOptions = _useState14[0],
      setSubKeywordOptions = _useState14[1];
    var _useState15 = React$1.useState([]),
      _useState16 = _slicedToArray(_useState15, 2),
      itemMarketLinkOptions = _useState16[0],
      setItemMarketLinkOptions = _useState16[1];
    var _useState17 = React$1.useState([]),
      _useState18 = _slicedToArray(_useState17, 2),
      itemWebsiteOptions = _useState18[0],
      setItemWebsiteOptions = _useState18[1];

    // non-enum select field option fetch and search handlers
    var api = new adminBro.ApiClient();
    var handleFetchMarketLinks = function handleFetchMarketLinks() {
      api.resourceAction({
        resourceId: resources.LinkMarket,
        actionName: 'list?perPage=20'
      }).then(function (_ref2) {
        var data = _ref2.data;
        var marketLinkOptions = data.records.map(function (_ref3) {
          var title = _ref3.title,
            id = _ref3.id;
          return title ? {
            label: title,
            value: id
          } : {
            label: null,
            value: null
          };
        });
        items.forEach(function (item, index) {
          marketLinkOptions.find(function (option) {
            return option.value && option.value === item.marketLink;
          }) ? null : marketLinkOptions.push({
            label: populatedItemValues[index].marketLink.title,
            value: populatedItemValues[index].marketLink.id
          });
        });
        setItemMarketLinkOptions(marketLinkOptions);
      });
    };
    var handleFetchLinks = function handleFetchLinks() {
      api.resourceAction({
        resourceId: resources.Links,
        actionName: 'list?perPage=20'
      }).then(function (_ref4) {
        var data = _ref4.data;
        var websiteOptions = data.records.map(function (_ref5) {
          var title = _ref5.title,
            id = _ref5.id;
          return title ? {
            label: title,
            value: id
          } : {
            label: null,
            value: null
          };
        });
        items.forEach(function (item, index) {
          websiteOptions.find(function (option) {
            return option.value && option.value === item.marketLink;
          }) ? null : websiteOptions.push({
            label: populatedItemValues[index].website.title,
            value: populatedItemValues[index].website.id
          });
        });
        setItemWebsiteOptions(websiteOptions);
      });
    };
    var handleFetchKeywords = function handleFetchKeywords() {
      api.resourceAction({
        resourceId: resources.Keywords,
        actionName: 'list?perPage=20'
      }).then(function (_ref6) {
        var data = _ref6.data;
        var keywordOptions = data.records.map(function (_ref7) {
          var title = _ref7.title;
            _ref7.id;
          return title ? {
            label: title,
            value: title
          } : {
            label: null,
            value: null
          };
        });
        items.forEach(function (item) {
          item.contentOrder && Array.isArray(item.contentOrder.sub_keywords) && item.contentOrder.sub_keywords.length > 0 && (keywordOptions.find(function (option) {
            return option.value && item.contentOrder.sub_keywords.includes(option.value);
          }) ? null : keywordOptions = [].concat(_toConsumableArray(keywordOptions), _toConsumableArray(item.contentOrder.sub_keywords.map(function (subKeyword) {
            return {
              label: subKeyword,
              value: subKeyword
            };
          }))));
        });
        setSubKeywordOptions(keywordOptions);
      });
    };
    var handleSearchKeywords = function handleSearchKeywords(value) {
      // first rendition to be redone
      api.searchRecords({
        resourceId: resources.Keywords,
        query: value
      }).then(function (res) {
        return res.map(function (optionRecord) {
          return {
            value: optionRecord.title,
            label: optionRecord.title
            // record: optionRecord
          };
        });
      }).then(function (optionValues) {
        var options = _toConsumableArray(optionValues);
        if (!subKeywordOptions[0].value.includes(value)) options.unshift({
          value: value,
          label: value
        });
        options[0] = {
          value: value,
          label: value
        };
        setSubKeywordOptions(options);
      });
    };
    var handleSearchMarketLink = function handleSearchMarketLink(searchValue) {
      api.searchRecords({
        resourceId: resources.LinkMarket,
        query: searchValue
      }).then(function (res) {
        return res.map(function (optionRecord) {
          return {
            value: optionRecord.id,
            label: optionRecord.title
            // record: optionRecord
          };
        });
      }).then(function (optionValues) {
        return setItemMarketLinkOptions(optionValues);
      });
    };
    var handleSearchLinks = function handleSearchLinks(searchValue) {
      api.searchRecords({
        resourceId: resources.Links,
        query: searchValue
      }).then(function (res) {
        return res.map(function (optionRecord) {
          return {
            value: optionRecord.id,
            label: optionRecord.title
            // record: optionRecord
          };
        });
      }).then(function (optionValues) {
        return setItemWebsiteOptions(optionValues);
      });
    };
    React$1.useEffect(function () {
      handleFetchMarketLinks();
      handleFetchLinks();
      handleFetchKeywords();
    }, []);
    var handleAddingContentOrder = function handleAddingContentOrder() {
      var initialContentOrders = {
        language: '',
        min_length: 0,
        focus_keyword: '',
        sub_keywords: [],
        title: '',
        tone_of_voice: '',
        source_url: '',
        status: 'Not Started'
      };
      var newItems = adminBro.flat.unflatten(initialRecord.params).items;
      newItems.forEach(function (item, index) {
        if (!item.contentOrder) newItems[index].contentOrder = initialContentOrders;
      });
      setRecord(_objectSpread2(_objectSpread2({}, record), {}, {
        params: adminBro.flat.flatten(_objectSpread2(_objectSpread2({}, record.params), {}, {
          items: newItems
        }))
      }));
      setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
        items: newItems
      }));
    };
    React$1.useEffect(function () {
      handleAddingContentOrder();
    }, []);
    React$1.useEffect(function () {
      if (Array.isArray(formValues.items)) {
        formValues.items.forEach(function (item, index) {
          if ((item.linkType === 'Article' || item.isPermanent) && (!item.publishDateStart || !item.publishDateEnd)) {
            // substracts 3 days for the publish date start and adds 4 days for the publish date end
            var publishDateStart = new Date(item.publishDate);
            publishDateStart.setDate(publishDateStart.getDate() - 3);
            var publishDateEnd = new Date(item.publishDate);
            publishDateEnd.setDate(publishDateEnd.getDate() + 4);
            handleChange("items.".concat(index, ".publishDateStart"), publishDateStart.toISOString());
            handleChange("items.".concat(index, ".publishDateEnd"), publishDateEnd.toISOString());
          }
        });
      }
    }, [formValues.items]);
    var handleSubmit = function handleSubmit(e) {
      e.preventDefault();
      submit().then(function (res) {
        var _res$data = res.data,
          redirectUrl = _res$data.redirectUrl,
          record = _res$data.record;
        var errors = record.errors;
        if (errors && Object.keys(errors).length > 0) setErrors(errors);
        if (redirectUrl) history.push(redirectUrl);
      });
      return false;
    };
    return /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      overflowY: "hidden",
      variant: "grey"
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      width: "100%",
      as: "form",
      flex: true,
      flexGrow: 1,
      onSubmit: handleSubmit,
      flexDirection: "column",
      variant: "white"
    }, /*#__PURE__*/React__default["default"].createElement(adminBro.BasePropertyComponent, {
      where: "edit",
      resource: resource,
      record: record,
      onChange: handleChange,
      property: resource.properties.status
    }), /*#__PURE__*/React__default["default"].createElement(adminBro.BasePropertyComponent, {
      where: "edit",
      resource: resource,
      record: record,
      onChange: handleChange,
      property: resource.properties.isRead
    }), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
      error: errors && errors.items && errors.items.message
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties.items.label), /*#__PURE__*/React__default["default"].createElement(designSystem.Section, {
      mb: mb
    }, formValues.items && formValues.items.map(function (item, index) {
      return /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
        key: index,
        width: "100%",
        flex: true,
        flexDirection: "row"
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
        width: "95%",
        mb: mb,
        key: index
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, "[".concat(index + 1, "]")), /*#__PURE__*/React__default["default"].createElement(designSystem.Section, null, /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        mb: mb,
        error: errors && errors["items.".concat(index, ".status")] && errors["items.".concat(index, ".status")]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.status'].label), /*#__PURE__*/React__default["default"].createElement(Select__default["default"], {
        value: itemStatusOptions.find(function (itemOption) {
          return itemOption.value === item.status;
        }),
        options: itemStatusOptions,
        onChange: function onChange(_ref8) {
          var value = _ref8.value;
          var newOption = _toConsumableArray(formValues.items);
          newOption[index].status = value;
          setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
            items: newOption
          }));
          handleChange("items.".concat(index, ".status"), value);
        }
      }), errors && errors["items.".concat(index, ".status")] && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["items.".concat(index, ".status")].message)), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        mb: mb,
        error: errors && errors["items.".concat(index, ".linkText")] && errors["items.".concat(index, ".linkText")]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.linkText'].label), /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
        value: item.linkText,
        onChange: function onChange(e) {
          var newOption = _toConsumableArray(formValues.items);
          newOption[index].linkText = e.target.value;
          setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
            items: newOption
          }));
          handleChange("items.".concat(index, ".linkText"), e.target.value);
        }
      }), errors && errors["items.".concat(index, ".linkText")] && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["items.".concat(index, ".linkText")].message)), !item.isPermanent && /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        mb: mb,
        error: errors && errors["items.".concat(index, ".linkType")] && errors["items.".concat(index, ".linkType")]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.linkType'].label), /*#__PURE__*/React__default["default"].createElement(Select__default["default"], {
        value: itemLinkTypeOptions.find(function (linkTypeOption) {
          return linkTypeOption.value === item.linkType;
        }),
        onChange: function onChange(_ref9) {
          var value = _ref9.value;
          var newOption = _toConsumableArray(formValues.items);
          newOption[index].linkType = value;
          setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
            items: newOption
          }));
          handleChange("items.".concat(index, ".linkType"), value);
        },
        options: itemLinkTypeOptions
      }), errors && errors["items.".concat(index, ".linkType")] && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["items.".concat(index, ".linkType")].message)), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        mb: mb,
        error: errors && errors["items.".concat(index, ".publishDate")] && errors["items.".concat(index, ".publishDate")]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.publishDate'].label), /*#__PURE__*/React__default["default"].createElement(designSystem.DatePicker, {
        value: item.publishDate,
        onChange: function onChange(value) {
          var newOption = _toConsumableArray(formValues.items);
          newOption[index].publishDate = value;
          setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
            items: newOption
          }));
          handleChange("items.".concat(index, ".publishDate"), value);
        }
      }), errors && errors["items.".concat(index, ".publishDate")] && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["items.".concat(index, ".publishDate")].message)), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        mb: mb,
        error: errors && errors["items.".concat(index, ".isPermanent")] && errors["items.".concat(index, ".isPermanent")]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.isPermanent'].label), /*#__PURE__*/React__default["default"].createElement(designSystem.CheckBox, {
        checked: item.isPermanent,
        onChange: function onChange() {
          var newOption = _toConsumableArray(formValues.items);
          newOption[index].isPermanent = !newOption[index].isPermanent;
          setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
            items: newOption
          }));
          handleChange("items.".concat(index, ".isPermanent"), !record.params["items.".concat(index, ".isPermanent")]);
        }
      }), errors && errors["items.".concat(index, ".isPermanent")] && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["items.".concat(index, ".isPermanent")].message)), !item.filePath && /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        mb: mb,
        error: errors && errors["items.".concat(index, ".articleTitle")] && errors["items.".concat(index, ".articleTitle")]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.articleTitle'].label), /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
        value: item.articleTitle,
        onChange: function onChange(e) {
          var newOption = _toConsumableArray(formValues.items);
          newOption[index].articleTitle = e.target.value;
          setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
            items: newOption
          }));
          handleChange("items.".concat(index, ".articleTitle"), e.target.value);
        }
      }), errors && errors["items.".concat(index, ".articleTitle")] && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["items.".concat(index, ".articleTitle")].message)), !contentlessLinkTypes.includes(item.linkType) && /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        mb: mb,
        error: errors && errors["items.".concat(index, ".contentLength.title")] && errors["items.".concat(index, ".contentLength.title")]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.contentLength.title'].label), /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
        value: item.contentLength && item.contentLength.title,
        onChange: function onChange(e) {
          var newOption = _toConsumableArray(formValues.items);
          newOption[index].contentLength.title = e.target.value;
          setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
            items: newOption
          }));
          handleChange("items.".concat(index, ".contentLength.title"), e.target.value);
        }
      }), errors && errors["items.".concat(index, ".contentLength.title")] && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["items.".concat(index, ".contentLength.title")].message)), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        mb: mb,
        error: errors && errors["items.".concat(index, ".contentLength.price")] && errors["items.".concat(index, ".contentLength.price")]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.contentLength.price'].label), /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
        type: "number",
        min: 0,
        value: item.contentLength && item.contentLength.price,
        onChange: function onChange(e) {
          var newOption = _toConsumableArray(formValues.items);
          newOption[index].contentLength.price = e.target.value;
          setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
            items: newOption
          }));
          handleChange("items.".concat(index, ".contentLength.price"), e.target.value);
        }
      }), errors && errors["items.".concat(index, ".contentLength.price")] && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["items.".concat(index, ".contentLength.price")].message)), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        mb: mb,
        error: errors && errors["items.".concat(index, ".contentLength.length")] && errors["items.".concat(index, ".contentLength.length")]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.contentLength.length'].label), /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
        type: "number",
        min: 5,
        value: item.contentLength && item.contentLength.length,
        onChange: function onChange(e) {
          var newOption = _toConsumableArray(formValues.items);
          newOption[index].contentLength.length = e.target.value;
          setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
            items: newOption
          }));
          handleChange("items.".concat(index, ".contentLength.length"), e.target.value);
        }
      }), errors && errors["items.".concat(index, ".contentLength.length")] && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["items.".concat(index, ".contentLength.length")].message))), item.contentOrder && /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, resource.properties['items.contentOrder.status'] && /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        mb: mb,
        error: errors && errors["items.".concat(index, ".contentOrder.status")] && errors["items.".concat(index, ".contentOrder.status")]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.contentOrder.status'].label), /*#__PURE__*/React__default["default"].createElement(Select__default["default"], {
        value: contentStatusOptions.find(function (itemOption) {
          return itemOption.value === item.contentOrder.status;
        }),
        options: contentStatusOptions,
        onChange: function onChange(_ref10) {
          var value = _ref10.value;
          var newOption = _toConsumableArray(formValues.items);
          newOption[index].contentOrder.status = value;
          setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
            items: newOption
          }));
          handleChange("items.".concat(index, ".contentOrder.status"), value);
        }
      }), errors && errors["items.".concat(index, ".contentOrder.status")] && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["items.".concat(index, ".contentOrder.status")].message)), resource.properties['items.contentOrder.language'] && /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        mb: mb,
        error: errors && errors["items.".concat(index, ".contentOrder.language")] && errors["items.".concat(index, ".contentOrder.language")]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.contentOrder.language'].label), /*#__PURE__*/React__default["default"].createElement(Select__default["default"], {
        value: contentLanguageOptions.find(function (itemOption) {
          return itemOption.value === item.contentOrder.language;
        }),
        options: contentLanguageOptions,
        onChange: function onChange(_ref11) {
          var value = _ref11.value;
          var newOption = _toConsumableArray(formValues.items);
          newOption[index].contentOrder.language = value;
          setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
            items: newOption
          }));
          handleChange("items.".concat(index, ".contentOrder.language"), value);
        }
      }), errors && errors["items.".concat(index, ".contentOrder.language")] && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["items.".concat(index, ".contentOrder.language")].message)), resource.properties['items.contentOrder.source_url'] && /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        mb: mb,
        error: errors && errors["items.".concat(index, ".contentOrder.source_url")] && errors["items.".concat(index, ".contentOrder.source_url")]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.contentOrder.source_url'] && resource.properties['items.contentOrder.source_url'].label || 'source_url'), /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
        value: item.contentOrder && item.contentOrder.source_url,
        onChange: function onChange(_ref12) {
          var value = _ref12.value;
          var newOption = _toConsumableArray(formValues.items);
          newOption[index].contentOrder.source_url = value;
          setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
            items: newOption
          }));
          handleChange("items.".concat(index, ".contentOrder.source_url"), value);
        }
      }), errors && errors["items.".concat(index, ".contentOrder.source_url")] && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["items.".concat(index, ".contentOrder.source_url")].message)), resource.properties['items.contentOrder.focus_keyword'] && /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        mb: mb,
        error: errors && errors["items.".concat(index, ".contentOrder.focus_keyword")] && errors["items.".concat(index, ".contentOrder.focus_keyword")]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.contentOrder.focus_keyword'] && resource.properties['items.contentOrder.focus_keyword'].label || 'focus_keyword'), /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
        value: item.contentOrder && item.contentOrder.focus_keyword,
        onChange: function onChange(_ref13) {
          var value = _ref13.value;
          var newOption = _toConsumableArray(formValues.items);
          newOption[index].contentOrder.focus_keyword = value;
          setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
            items: newOption
          }));
          handleChange("items.".concat(index, ".contentOrder.focus_keyword"), value);
        }
      }), errors && errors["items.".concat(index, ".contentOrder.focus_keyword")] && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["items.".concat(index, ".contentOrder.focus_keyword")].message)), resource.properties['items.contentOrder.sub_keywords'] && /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        mb: mb,
        error: errors && errors["items.".concat(index, ".contentOrder.sub_keywords")] && errors["items.".concat(index, ".contentOrder.sub_keywords")]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.contentOrder.sub_keywords'] && resource.properties['items.contentOrder.sub_keywords'].label || 'sub_keywords'), /*#__PURE__*/React__default["default"].createElement(Select__default["default"], {
        isMulti: true,
        value: item.contentOrder && Array.isArray(item.contentOrder.sub_keywords) && item.contentOrder.sub_keywords.map(function (sub_keyword) {
          return {
            label: sub_keyword,
            value: sub_keyword
          };
        }),
        onChange: function onChange(value) {
          var newValues = value.map(function (_ref14) {
            var value = _ref14.value;
            return value;
          });
          var newOption = _toConsumableArray(formValues.items);
          newOption[index].contentOrder.sub_keywords = newValues;
          setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
            items: newOption
          }));
          handleChange("items.".concat(index, ".contentOrder.sub_keywords"), newValues);
        },
        onInputChange: function onInputChange(value) {
          handleSearchKeywords(value);
        },
        options: subKeywordOptions
      }), errors && errors["items.".concat(index, ".contentOrder.sub_keywords")] && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["items.".concat(index, ".contentOrder.sub_keywords")].message))), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        mb: mb,
        error: errors && errors["items.".concat(index, ".requests")] && errors["items.".concat(index, ".requests")]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.requests'].label), /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
        value: item.requests,
        onChange: function onChange(e) {
          var newOption = _toConsumableArray(formValues.items);
          newOption[index].requests = e.target.value;
          setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
            items: newOption
          }));
          handleChange("items.".concat(index, ".request"), e.target.value);
        }
      }), errors && errors["items.".concat(index, ".requests")] && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["items.".concat(index, ".requests")].message)), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        mb: mb,
        error: errors && errors["items.".concat(index, ".linkPrice")] && errors["items.".concat(index, ".linkPrice")]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.linkPrice'].label), /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
        value: item.linkPrice,
        onChange: function onChange(e) {
          var newOption = _toConsumableArray(formValues.items);
          newOption[index].linkPrice = e.target.value;
          setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
            items: newOption
          }));
          handleChange("items.".concat(index, ".linkPrice"), e.target.value);
        },
        type: "number"
      }), errors && errors["items.".concat(index, ".linkPrice")] && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["items.".concat(index, ".linkPrice")].message)), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        mb: mb,
        error: errors && errors["items.".concat(index, ".filePath")] && errors["items.".concat(index, ".filePath")]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.filePath'].label), /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
        value: item.filePath,
        onChange: function onChange(e) {
          var newOption = _toConsumableArray(formValues.items);
          newOption[index].filePath = e.target.value;
          setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
            items: newOption
          }));
          handleChange("items.".concat(index, ".filePath"), e.target.value);
        }
      }), errors && errors["items.".concat(index, ".filePath")] && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["items.".concat(index, ".filePath")].message)), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        mb: mb,
        error: errors && errors["items.".concat(index, ".marketLink")] && errors["items.".concat(index, ".marketLink")]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.marketLink'].label), /*#__PURE__*/React__default["default"].createElement(Select__default["default"], {
        value: itemMarketLinkOptions && itemMarketLinkOptions.find(function (marketLinkOption) {
          return marketLinkOption && marketLinkOption.value === item.marketLink;
        }),
        onChange: function onChange(_ref15) {
          var value = _ref15.value;
          var newOption = _toConsumableArray(formValues.items);
          newOption[index].marketLink = value;
          setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
            items: newOption
          }));
          handleChange("items.".concat(index, ".marketLink"), value);
        },
        onInputChange: function onInputChange(value) {
          return handleSearchMarketLink(value);
        },
        options: itemMarketLinkOptions
      }), errors && errors["items.".concat(index, ".marketLink")] && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["items.".concat(index, ".marketLink")].message)), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        mb: mb,
        error: errors && errors["items.".concat(index, ".website")] && errors["items.".concat(index, ".website")]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.website'].label), /*#__PURE__*/React__default["default"].createElement(Select__default["default"], {
        value: itemWebsiteOptions && itemWebsiteOptions.find(function (websiteOption) {
          return websiteOption && websiteOption.value === item.website;
        }),
        onChange: function onChange(_ref16) {
          var value = _ref16.value;
          var newOption = _toConsumableArray(formValues.items);
          newOption[index].website = value;
          setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
            items: newOption
          }));
          handleChange("items.".concat(index, ".website"), value);
        },
        onInputChange: function onInputChange(value) {
          return handleSearchLinks(value);
        },
        options: itemWebsiteOptions
      }), errors && errors["items.".concat(index, ".website")] && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["items.".concat(index, ".website")].message)), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        mb: mb,
        error: errors && errors["items.".concat(index, ".subPage")] && errors["items.".concat(index, ".subPage")]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.subPage'].label), /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
        value: item.subPage,
        onChange: function onChange(e) {
          var newOption = _toConsumableArray(formValues.items);
          newOption[index].subPage = e.target.value;
          setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
            items: newOption
          }));
          handleChange("items.".concat(index, ".subPage"), e.target.value);
        }
      }), errors && errors["items.".concat(index, ".subPage")] && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["items.".concat(index, ".subPage")].message)), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        mb: mb,
        error: errors && errors["items.".concat(index, ".linkFromUrl")] && errors["items.".concat(index, ".linkFromUrl")]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.linkFromUrl'].label), /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
        value: item.linkFromUrl,
        onChange: function onChange(e) {
          var newOption = _toConsumableArray(formValues.items);
          newOption[index].linkFromUrl = e.target.value;
          setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
            items: newOption
          }));
          handleChange("items.".concat(index, ".linkFromUrl"), e.target.value);
        }
      }), errors && errors["items.".concat(index, ".linkFromUrl")] && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["items.".concat(index, ".linkFromUrl")].message)), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        mb: mb,
        error: errors && errors["items.".concat(index, ".createdAt")] && errors["items.".concat(index, ".createdAt")]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.createdAt'].label), /*#__PURE__*/React__default["default"].createElement(designSystem.DatePicker, {
        value: item.createdAt,
        onChange: function onChange(value) {
          var newOption = _toConsumableArray(formValues.items);
          newOption[index].createdAt = value;
          setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
            items: newOption
          }));
          handleChange("items.".concat(index, ".createdAt"), value);
        }
      }), errors && errors["items.".concat(index, ".createdAt")] && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["items.".concat(index, ".createdAt")].message)), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        mb: mb,
        error: errors && errors["items.".concat(index, ".ignoreJustification")] && errors["items.".concat(index, ".ignoreJustification")]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.ignoreJustification'].label), /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
        value: item.ignoreJustification,
        onChange: function onChange(e) {
          var newOption = _toConsumableArray(formValues.items);
          newOption[index].ignoreJustification = e.target.value;
          setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
            items: newOption
          }));
          handleChange("items.".concat(index, ".ignoreJustification"), e.target.value);
        }
      }), errors && errors["items.".concat(index, ".ignoreJustification")] && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["items.".concat(index, ".ignoreJustification")].message)), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        mb: mb,
        error: errors && errors["items.".concat(index, ".commission")] && errors["items.".concat(index, ".commission")]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.commission'].label), /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
        value: item.commission,
        onChange: function onChange(e) {
          var newOption = _toConsumableArray(formValues.items);
          newOption[index].commission = e.target.value;
          setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
            items: newOption
          }));
          handleChange("items.".concat(index, ".commission"), e.target.value);
        }
      }), errors && errors["items.".concat(index, ".commission")] && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["items.".concat(index, ".commission")].message)))), /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
        flex: true,
        alignSelf: "center",
        justifyContent: "center",
        width: "5%"
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Button, {
        onClick: function onClick(e) {
          return handleDeleteItem(e, index);
        },
        rounded: true,
        size: "icon",
        variant: "danger"
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Icon, {
        icon: "Delete"
      }))));
    }), /*#__PURE__*/React__default["default"].createElement(designSystem.Button, {
      onClick: handleAddNewItem,
      style: {
        borderRadius: '9999px'
      }
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Icon, {
      icon: "Add"
    }), " Add New Item")), errors && errors.items && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors.items.message)), /*#__PURE__*/React__default["default"].createElement(adminBro.BasePropertyComponent, {
      where: "edit",
      resource: resource,
      record: record,
      onChange: handleChange,
      property: resource.properties.outreach
    }), /*#__PURE__*/React__default["default"].createElement(adminBro.BasePropertyComponent, {
      where: "edit",
      resource: resource,
      record: record,
      onChange: handleChange,
      property: resource.properties.createdBy
    }), /*#__PURE__*/React__default["default"].createElement(adminBro.BasePropertyComponent, {
      where: "edit",
      resource: resource,
      record: record,
      onChange: handleChange,
      property: resource.properties.updatedAt
    }), /*#__PURE__*/React__default["default"].createElement(adminBro.BasePropertyComponent, {
      where: "edit",
      resource: resource,
      record: record,
      onChange: handleChange,
      property: resource.properties.createdAt
    }), /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      flex: true,
      justifyContent: "center",
      alignItems: "flex-end",
      height: 100,
      width: "100%"
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Button, {
      variant: "primary",
      size: "lg",
      type: "submit"
    }, "Save"))));
  };

  var _excluded = ["items"];
  var AddOrder = function AddOrder(_ref) {
    var initialRecord = _ref.record,
      resource = _ref.resource;
    var history = reactRouter.useHistory();
    var _useState = React$1.useState({}),
      _useState2 = _slicedToArray(_useState, 2),
      errors = _useState2[0],
      setErrors = _useState2[1];
    var _useRecord = adminBro.useRecord(initialRecord, resource.id),
      record = _useRecord.record,
      submit = _useRecord.submit,
      handleChange = _useRecord.handleChange,
      setRecord = _useRecord.setRecord;
    var _useState3 = React$1.useState(record.params && adminBro.flat.unflatten(record.params).items && adminBro.flat.unflatten(record.params).items || []),
      _useState4 = _slicedToArray(_useState3, 1),
      items = _useState4[0];
    var _useState5 = React$1.useState(_objectSpread2(_objectSpread2({}, record.params), {}, {
        items: items
      })),
      _useState6 = _slicedToArray(_useState5, 2),
      formValues = _useState6[0],
      setFormValues = _useState6[1];

    // const [populatedItemValues] = useState(
    //   flat.unflatten(record.populated).items
    // );
    var contentlessLinkTypes = ['Index', 'Subpage'];
    var _useState7 = React$1.useState(35),
      _useState8 = _slicedToArray(_useState7, 1),
      mb = _useState8[0];
    var initialItemValues = {
      articleTitle: '',
      commission: 0,
      contentLength: {
        title: '',
        price: '',
        length: ''
      },
      contentOrder: {
        language: '',
        min_length: 5,
        focus_keyword: '',
        sub_keywords: [],
        tone_of_voice: ''
      },
      createdAt: '',
      filePath: '',
      ignoreJustification: '',
      isPermanent: false,
      linkFromUrl: '',
      linkPrice: 0,
      linkText: '',
      linkType: '',
      marketLink: '',
      publishDate: '',
      requests: '',
      status: 'Pending',
      subPage: '',
      website: ''
    };
    var handleAddNewItem = function handleAddNewItem() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
      e && e.preventDefault();
      // to remove error colored item fields when the first item is added after submit error
      if (errors.items) {
        errors.items;
          var rest = _objectWithoutProperties(errors, _excluded);
        setErrors({
          rest: rest
        });
      }
      var newValues = _objectSpread2({}, formValues);
      newValues.items.push(initialItemValues);
      Object.keys(initialItemValues).map(function (key) {
        return newValues["items.".concat(newValues.items.length - 1, ".").concat(key)] = initialItemValues[key];
      });
      setRecord(_objectSpread2(_objectSpread2({}, record), {}, {
        params: newValues
      }));
    };
    var handleDeleteItem = function handleDeleteItem(e, index) {
      e.preventDefault();
      var newValues = _objectSpread2({}, formValues);
      newValues.items.splice(index, 1);
      Object.keys(initialItemValues).map(function (key) {
        return delete newValues["items.".concat(index, ".").concat(key)];
      });
      setRecord(_objectSpread2(_objectSpread2({}, record), {}, {
        params: newValues
      }));
    };

    // select field option values
    var itemSubPropterties = resource.editProperties.find(function (OrderProperty) {
      return OrderProperty.propertyPath === 'items';
    }).subProperties;
    var itemStatusOptions = itemSubPropterties.find(function (itemProperty) {
      return itemProperty.propertyPath === 'items.status';
    }).availableValues;
    var itemLinkTypeOptions = itemSubPropterties.find(function (itemProperty) {
      return itemProperty.propertyPath === 'items.linkType';
    }).availableValues;
    var contentLanguageOptions = itemSubPropterties.find(function (itemProperty) {
      return itemProperty.propertyPath === 'items.contentOrder';
    }).subProperties.find(function (contentSubProps) {
      return contentSubProps.propertyPath === 'items.contentOrder.language';
    }).availableValues || [];
    var _useState9 = React$1.useState([]),
      _useState10 = _slicedToArray(_useState9, 2),
      subKeywordOptions = _useState10[0],
      setSubKeywordOptions = _useState10[1];
    var _useState11 = React$1.useState([]),
      _useState12 = _slicedToArray(_useState11, 2),
      itemMarketLinkOptions = _useState12[0],
      setItemMarketLinkOptions = _useState12[1];
    var _useState13 = React$1.useState([]),
      _useState14 = _slicedToArray(_useState13, 2),
      itemWebsiteOptions = _useState14[0],
      setItemWebsiteOptions = _useState14[1];

    // non-enum select field option fetch and search handlers
    var api = new adminBro.ApiClient();
    var handleFetchMarketLinks = function handleFetchMarketLinks() {
      api.resourceAction({
        resourceId: resources.LinkMarket,
        actionName: 'list?perPage=20'
      }).then(function (_ref2) {
        var data = _ref2.data;
        var marketLinkOptions = data.records.map(function (_ref3) {
          var title = _ref3.title,
            id = _ref3.id;
          return title ? {
            label: title,
            value: id
          } : {
            title: null,
            value: null
          };
        });
        setItemMarketLinkOptions(marketLinkOptions);
      });
    };
    var handleFetchLinks = function handleFetchLinks() {
      api.resourceAction({
        resourceId: resources.Links,
        actionName: 'list?perPage=20'
      }).then(function (_ref4) {
        var data = _ref4.data;
        var websiteOptions = data.records.map(function (_ref5) {
          var title = _ref5.title,
            id = _ref5.id;
          return title ? {
            label: title,
            value: id
          } : {
            label: null,
            value: null
          };
        });
        setItemWebsiteOptions(websiteOptions);
      });
    };
    var handleFetchKeywords = function handleFetchKeywords() {
      api.resourceAction({
        resourceId: resources.Keywords,
        actionName: 'list?perPage=20'
      }).then(function (_ref6) {
        var data = _ref6.data;
        var keywordOptions = data.records.map(function (_ref7) {
          var title = _ref7.title;
            _ref7.id;
          return title ? {
            label: title,
            value: title
          } : {
            title: null,
            value: null
          };
        });
        setSubKeywordOptions(keywordOptions);
      });
    };
    var handleSearchKeywords = function handleSearchKeywords(value) {
      // first rendition to be redone
      api.searchRecords({
        resourceId: resources.Keywords,
        query: value
      }).then(function (res) {
        return res.map(function (optionRecord) {
          return {
            value: optionRecord.title,
            label: optionRecord.title
            // record: optionRecord
          };
        });
      }).then(function (optionValues) {
        var options = _toConsumableArray(optionValues);
        if (!subKeywordOptions[0].value.includes(value)) options.unshift({
          value: value,
          label: value
        });
        options[0] = {
          value: value,
          label: value
        };
        setSubKeywordOptions(options);
      });
    };
    var handleSearchMarketLink = function handleSearchMarketLink(searchValue) {
      api.searchRecords({
        resourceId: resources.LinkMarket,
        query: searchValue
      }).then(function (res) {
        return res.map(function (optionRecord) {
          return {
            value: optionRecord.id,
            label: optionRecord.title
            // record: optionRecord
          };
        });
      }).then(function (optionValues) {
        return setItemMarketLinkOptions(optionValues);
      });
    };
    var handleSearchLinks = function handleSearchLinks(searchValue) {
      api.searchRecords({
        resourceId: resources.Links,
        query: searchValue
      }).then(function (res) {
        return res.map(function (optionRecord) {
          return {
            value: optionRecord.id,
            label: optionRecord.title
            // record: optionRecord
          };
        });
      }).then(function (optionValues) {
        return setItemWebsiteOptions(optionValues);
      });
    };
    var handleAddNewFormValues = function handleAddNewFormValues() {
      var initialRecordValues = {
        items: [initialItemValues],
        outreach: '',
        createdBy: '',
        updatedAt: '',
        createdAt: '',
        status: 'Pending',
        isRead: false
      };
      var items = initialRecordValues.items;
      var flatParamValues = adminBro.flat.flatten(initialRecordValues);
      console.log('flatValues', flatParamValues);
      setFormValues(_objectSpread2({
        items: items
      }, flatParamValues));
      setRecord(_objectSpread2(_objectSpread2({}, record), {}, {
        params: flatParamValues
      }));
    };
    React$1.useEffect(function () {
      handleFetchMarketLinks();
      handleFetchLinks();
      handleFetchKeywords();
    }, []);
    React$1.useEffect(function () {
      handleAddNewFormValues();
    }, []);
    React$1.useEffect(function () {
      if (Array.isArray(formValues.items)) {
        formValues.items.forEach(function (item, index) {
          if ((item.linkType === 'Article' || item.isPermanent) && (!item.publishDateStart || !item.publishDateEnd)) {
            // substracts 3 days for the publish date start and adds 4 days for the publish date end
            var publishDateStart = new Date(item.publishDate);
            publishDateStart.setDate(publishDateStart.getDate() - 3);
            var publishDateEnd = new Date(item.publishDate);
            publishDateEnd.setDate(publishDateEnd.getDate() + 4);
            handleChange("items.".concat(index, ".publishDateStart"), publishDateStart.toISOString());
            handleChange("items.".concat(index, ".publishDateEnd"), publishDateEnd.toISOString());
          }
        });
      }
    }, [formValues.items]);
    var handleSubmit = function handleSubmit(e) {
      e.preventDefault();
      submit().then(function (res) {
        var _res$data = res.data,
          redirectUrl = _res$data.redirectUrl,
          record = _res$data.record;
        var errors = record.errors;
        if (errors && Object.keys(errors).length > 0) setErrors(errors);
        if (redirectUrl) history.push(redirectUrl);
      });
      return false;
    };
    return /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      overflowY: "hidden",
      variant: "grey"
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      width: "100%",
      as: "form",
      flex: true,
      flexGrow: 1,
      onSubmit: handleSubmit,
      flexDirection: "column",
      variant: "white"
    }, /*#__PURE__*/React__default["default"].createElement(adminBro.BasePropertyComponent, {
      where: "edit",
      resource: resource,
      record: record,
      onChange: handleChange,
      property: resource.properties.status
    }), /*#__PURE__*/React__default["default"].createElement(adminBro.BasePropertyComponent, {
      where: "edit",
      resource: resource,
      record: record,
      onChange: handleChange,
      property: resource.properties.isRead
    }), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
      error: errors && errors.items && errors.items.message
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties.items.label), /*#__PURE__*/React__default["default"].createElement(designSystem.Section, {
      mb: mb
    }, formValues.items && formValues.items.map(function (item, index) {
      return /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
        key: index,
        width: "100%",
        flex: true,
        flexDirection: "row"
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
        width: "95%",
        mb: mb,
        key: index
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, "[".concat(index + 1, "]")), /*#__PURE__*/React__default["default"].createElement(designSystem.Section, null, /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        mb: mb,
        error: errors && errors["items.".concat(index, ".status")] && errors["items.".concat(index, ".status")]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.status'].label), /*#__PURE__*/React__default["default"].createElement(Select__default["default"], {
        value: itemStatusOptions.find(function (itemOption) {
          return itemOption.value === item.status;
        }),
        options: itemStatusOptions,
        onChange: function onChange(_ref8) {
          var value = _ref8.value;
          var newOption = _toConsumableArray(formValues.items);
          newOption[index].status = value;
          setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
            items: newOption
          }));
          handleChange("items.".concat(index, ".status"), value);
        }
      }), errors && errors["items.".concat(index, ".status")] && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["items.".concat(index, ".status")].message)), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        mb: mb,
        error: errors && errors["items.".concat(index, ".linkText")] && errors["items.".concat(index, ".linkText")]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, {
        required: true
      }, resource.properties['items.linkText'].label), /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
        value: item.linkText,
        onChange: function onChange(e) {
          var newOption = _toConsumableArray(formValues.items);
          newOption[index].linkText = e.target.value;
          setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
            items: newOption
          }));
          handleChange("items.".concat(index, ".linkText"), e.target.value);
        }
      }), errors && errors["items.".concat(index, ".linkText")] && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["items.".concat(index, ".linkText")].message)), !item.isPermanent && /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        mb: mb,
        error: errors && errors["items.".concat(index, ".linkType")] && errors["items.".concat(index, ".linkType")]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, {
        required: true
      }, resource.properties['items.linkType'].label), /*#__PURE__*/React__default["default"].createElement(Select__default["default"], {
        value: itemLinkTypeOptions.find(function (linkTypeOption) {
          return linkTypeOption.value === item.linkType;
        }),
        onChange: function onChange(_ref9) {
          var value = _ref9.value;
          var newOption = _toConsumableArray(formValues.items);
          newOption[index].linkType = value;
          setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
            items: newOption
          }));
          handleChange("items.".concat(index, ".linkType"), value);
        },
        options: itemLinkTypeOptions
      }), errors && errors["items.".concat(index, ".linkType")] && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["items.".concat(index, ".linkType")].message)), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        mb: mb,
        error: errors && errors["items.".concat(index, ".publishDate")] && errors["items.".concat(index, ".publishDate")]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, {
        required: true
      }, resource.properties['items.publishDate'].label), /*#__PURE__*/React__default["default"].createElement(designSystem.DatePicker, {
        value: item.publishDate,
        onChange: function onChange(value) {
          var newOption = _toConsumableArray(formValues.items);
          newOption[index].publishDate = value;
          setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
            items: newOption
          }));
          handleChange("items.".concat(index, ".publishDate"), value);
        }
      }), errors && errors["items.".concat(index, ".publishDate")] && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["items.".concat(index, ".publishDate")].message)), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        mb: mb,
        error: errors && errors["items.".concat(index, ".isPermanent")] && errors["items.".concat(index, ".isPermanent")]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.isPermanent'].label), /*#__PURE__*/React__default["default"].createElement(designSystem.CheckBox, {
        checked: item.isPermanent,
        onChange: function onChange() {
          var newOption = _toConsumableArray(formValues.items);
          newOption[index].isPermanent = !newOption[index].isPermanent;
          setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
            items: newOption
          }));
          handleChange("items.".concat(index, ".isPermanent"), !record.params["items.".concat(index, ".isPermanent")]);
        }
      }), errors && errors["items.".concat(index, ".isPermanent")] && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["items.".concat(index, ".isPermanent")].message)), !item.filePath && /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        mb: mb,
        error: errors && errors["items.".concat(index, ".articleTitle")] && errors["items.".concat(index, ".articleTitle")]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, {
        required: item.contentOrder
      }, resource.properties['items.articleTitle'].label), /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
        value: item.articleTitle,
        onChange: function onChange(e) {
          var newOption = _toConsumableArray(formValues.items);
          newOption[index].articleTitle = e.target.value;
          setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
            items: newOption
          }));
          handleChange("items.".concat(index, ".articleTitle"), e.target.value);
        }
      }), errors && errors["items.".concat(index, ".articleTitle")] && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["items.".concat(index, ".articleTitle")].message)), !contentlessLinkTypes.includes(item.linkType) && /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        mb: mb,
        error: errors && errors["items.".concat(index, ".contentLength.title")] && errors["items.".concat(index, ".contentLength.title")]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.contentLength.title'].label), /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
        value: item.contentLength.title,
        onChange: function onChange(e) {
          var newOption = _toConsumableArray(formValues.items);
          newOption[index].contentLength.title = e.target.value;
          setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
            items: newOption
          }));
          handleChange("items.".concat(index, ".contentLength.title"), e.target.value);
        }
      }), errors && errors["items.".concat(index, ".contentLength.title")] && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["items.".concat(index, ".contentLength.title")].message)), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        mb: mb,
        error: errors && errors["items.".concat(index, ".contentLength.price")] && errors["items.".concat(index, ".contentLength.price")]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.contentLength.price'].label), /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
        type: "number",
        min: 0,
        value: item.contentLength.price,
        onChange: function onChange(e) {
          var newOption = _toConsumableArray(formValues.items);
          newOption[index].contentLength.price = e.target.value;
          setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
            items: newOption
          }));
          handleChange("items.".concat(index, ".contentLength.price"), e.target.value);
        }
      }), errors && errors["items.".concat(index, ".contentLength.price")] && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["items.".concat(index, ".contentLength.price")].message)), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        mb: mb,
        error: errors && errors["items.".concat(index, ".contentLength.length")] && errors["items.".concat(index, ".contentLength.length")]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.contentLength.length'].label), /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
        type: "number",
        min: 5,
        value: item.contentLength.length,
        onChange: function onChange(e) {
          var newOption = _toConsumableArray(formValues.items);
          newOption[index].contentLength.length = e.target.value;
          setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
            items: newOption
          }));
          handleChange("items.".concat(index, ".contentLength.length"), e.target.value);
        }
      }), errors && errors["items.".concat(index, ".contentLength.length")] && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["items.".concat(index, ".contentLength.length")].message))), !contentlessLinkTypes.includes(item.linkType) && resource.properties['items.contentOrder.language'] && /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        mb: mb,
        error: errors && errors["items.".concat(index, ".contentOrder.language")] && errors["items.".concat(index, ".contentOrder.language")]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, {
        required: true
      }, resource.properties['items.contentOrder.language'].label), /*#__PURE__*/React__default["default"].createElement(Select__default["default"], {
        value: contentLanguageOptions.find(function (itemOption) {
          return itemOption.value === item.contentOrder.language;
        }),
        options: contentLanguageOptions,
        onChange: function onChange(_ref10) {
          var value = _ref10.value;
          var newOption = _toConsumableArray(formValues.items);
          newOption[index].contentOrder.language = value;
          setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
            items: newOption
          }));
          handleChange("items.".concat(index, ".contentOrder.language"), value);
        }
      }), errors && errors["items.".concat(index, ".contentOrder.language")] && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["items.".concat(index, ".contentOrder.language")].message)), !contentlessLinkTypes.includes(item.linkType) && resource.properties['items.contentOrder.source_url'] && /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        mb: mb,
        error: errors && errors["items.".concat(index, ".contentOrder.source_url")] && errors["items.".concat(index, ".contentOrder.source_url")]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.contentOrder.source_url'] && resource.properties['items.contentOrder.source_url'].label || 'source_url'), /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
        value: item.contentOrder && item.contentOrder.source_url,
        onChange: function onChange(_ref11) {
          var value = _ref11.value;
          var newOption = _toConsumableArray(formValues.items);
          newOption[index].contentOrder.source_url = value;
          setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
            items: newOption
          }));
          handleChange("items.".concat(index, ".contentOrder.source_url"), value);
        }
      }), errors && errors["items.".concat(index, ".contentOrder.source_url")] && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["items.".concat(index, ".contentOrder.source_url")].message)), !contentlessLinkTypes.includes(item.linkType) && resource.properties['items.contentOrder.focus_keyword'] && /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        mb: mb,
        error: errors && errors["items.".concat(index, ".contentOrder.focus_keyword")] && errors["items.".concat(index, ".contentOrder.focus_keyword")]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.contentOrder.focus_keyword'] && resource.properties['items.contentOrder.focus_keyword'].label || 'focus_keyword'), /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
        value: item.contentOrder && item.contentOrder.focus_keyword,
        onChange: function onChange(_ref12) {
          var value = _ref12.value;
          var newOption = _toConsumableArray(formValues.items);
          newOption[index].contentOrder.focus_keyword = value;
          setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
            items: newOption
          }));
          handleChange("items.".concat(index, ".contentOrder.focus_keyword"), value);
        }
      }), errors && errors["items.".concat(index, ".contentOrder.focus_keyword")] && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["items.".concat(index, ".contentOrder.focus_keyword")].message)), !contentlessLinkTypes.includes(item.linkType) && resource.properties['items.contentOrder.sub_keywords'] && /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        mb: mb,
        error: errors && errors["items.".concat(index, ".contentOrder.sub_keywords")] && errors["items.".concat(index, ".contentOrder.sub_keywords")]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.contentOrder.sub_keywords'] && resource.properties['items.contentOrder.sub_keywords'].label || 'sub_keywords'), /*#__PURE__*/React__default["default"].createElement(Select__default["default"], {
        isMulti: true,
        value: item.contentOrder && subKeywordOptions.find(function (subKeywordOption) {
          return item.contentOrder && item.contentOrder.sub_keywords && item.contentOrder.sub_keywords.includes(subKeywordOption);
        }),
        onChange: function onChange(value) {
          var newValues = value.map(function (_ref13) {
            var value = _ref13.value;
            return value;
          });
          var newOption = _toConsumableArray(formValues.items);
          newOption[index].contentOrder.sub_keywords = newValues;
          setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
            items: newOption
          }));
          handleChange("items.".concat(index, ".contentOrder.sub_keywords"), newValues);
        },
        onInputChange: function onInputChange(value) {
          handleSearchKeywords(value);
        },
        options: subKeywordOptions
      }), errors && errors["items.".concat(index, ".contentOrder.sub_keywords")] && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["items.".concat(index, ".contentOrder.sub_keywords")].message)), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        mb: mb,
        error: errors && errors["items.".concat(index, ".requests")] && errors["items.".concat(index, ".requests")]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.requests'].label), /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
        value: item.requests,
        onChange: function onChange(e) {
          var newOption = _toConsumableArray(formValues.items);
          newOption[index].requests = e.target.value;
          setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
            items: newOption
          }));
          handleChange("items.".concat(index, ".request"), e.target.value);
        }
      }), errors && errors["items.".concat(index, ".requests")] && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["items.".concat(index, ".requests")].message)), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        mb: mb,
        error: errors && errors["items.".concat(index, ".linkPrice")] && errors["items.".concat(index, ".linkPrice")]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.linkPrice'].label), /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
        value: item.linkPrice,
        onChange: function onChange(e) {
          var newOption = _toConsumableArray(formValues.items);
          newOption[index].linkPrice = e.target.value;
          setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
            items: newOption
          }));
          handleChange("items.".concat(index, ".linkPrice"), e.target.value);
        },
        type: "number"
      }), errors && errors["items.".concat(index, ".linkPrice")] && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["items.".concat(index, ".linkPrice")].message)), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        mb: mb,
        error: errors && errors["items.".concat(index, ".filePath")] && errors["items.".concat(index, ".filePath")]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.filePath'].label), /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
        value: item.filePath,
        onChange: function onChange(e) {
          var newOption = _toConsumableArray(formValues.items);
          newOption[index].filePath = e.target.value;
          setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
            items: newOption
          }));
          handleChange("items.".concat(index, ".filePath"), e.target.value);
        }
      }), errors && errors["items.".concat(index, ".filePath")] && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["items.".concat(index, ".filePath")].message)), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        mb: mb,
        error: errors && errors["items.".concat(index, ".marketLink")] && errors["items.".concat(index, ".marketLink")]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, {
        required: true
      }, resource.properties['items.marketLink'].label), /*#__PURE__*/React__default["default"].createElement(Select__default["default"], {
        value: itemMarketLinkOptions && itemMarketLinkOptions.find(function (marketLinkOption) {
          return marketLinkOption && marketLinkOption.value === item.marketLink;
        }),
        onChange: function onChange(_ref14) {
          var value = _ref14.value;
          var newOption = _toConsumableArray(formValues.items);
          newOption[index].marketLink = value;
          setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
            items: newOption
          }));
          handleChange("items.".concat(index, ".marketLink"), value);
        },
        onInputChange: function onInputChange(value) {
          return handleSearchMarketLink(value);
        },
        options: itemMarketLinkOptions
      }), errors && errors["items.".concat(index, ".marketLink")] && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["items.".concat(index, ".marketLink")].message)), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        mb: mb,
        error: errors && errors["items.".concat(index, ".website")] && errors["items.".concat(index, ".website")]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, {
        required: true
      }, resource.properties['items.website'].label), /*#__PURE__*/React__default["default"].createElement(Select__default["default"], {
        value: itemWebsiteOptions && itemWebsiteOptions.find(function (websiteOption) {
          return websiteOption && websiteOption.value === item.website;
        }),
        onChange: function onChange(_ref15) {
          var value = _ref15.value;
          var newOption = _toConsumableArray(formValues.items);
          newOption[index].website = value;
          setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
            items: newOption
          }));
          handleChange("items.".concat(index, ".website"), value);
        },
        onInputChange: function onInputChange(value) {
          return handleSearchLinks(value);
        },
        options: itemWebsiteOptions
      }), errors && errors["items.".concat(index, ".website")] && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["items.".concat(index, ".website")].message)), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        mb: mb,
        error: errors && errors["items.".concat(index, ".subPage")] && errors["items.".concat(index, ".subPage")]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.subPage'].label), /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
        value: item.subPage,
        onChange: function onChange(e) {
          var newOption = _toConsumableArray(formValues.items);
          newOption[index].subPage = e.target.value;
          setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
            items: newOption
          }));
          handleChange("items.".concat(index, ".subPage"), e.target.value);
        }
      }), errors && errors["items.".concat(index, ".subPage")] && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["items.".concat(index, ".subPage")].message)), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        mb: mb,
        error: errors && errors["items.".concat(index, ".linkFromUrl")] && errors["items.".concat(index, ".linkFromUrl")]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.linkFromUrl'].label), /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
        value: item.linkFromUrl,
        onChange: function onChange(e) {
          var newOption = _toConsumableArray(formValues.items);
          newOption[index].linkFromUrl = e.target.value;
          setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
            items: newOption
          }));
          handleChange("items.".concat(index, ".linkFromUrl"), e.target.value);
        }
      }), errors && errors["items.".concat(index, ".linkFromUrl")] && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["items.".concat(index, ".linkFromUrl")].message)), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        mb: mb,
        error: errors && errors["items.".concat(index, ".createdAt")] && errors["items.".concat(index, ".createdAt")]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, {
        required: true
      }, resource.properties['items.createdAt'].label), /*#__PURE__*/React__default["default"].createElement(designSystem.DatePicker, {
        value: item.createdAt,
        onChange: function onChange(value) {
          var newOption = _toConsumableArray(formValues.items);
          newOption[index].createdAt = value;
          setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
            items: newOption
          }));
          handleChange("items.".concat(index, ".createdAt"), value);
        }
      }), errors && errors["items.".concat(index, ".createdAt")] && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["items.".concat(index, ".createdAt")].message)), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        mb: mb,
        error: errors && errors["items.".concat(index, ".ignoreJustification")] && errors["items.".concat(index, ".ignoreJustification")]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.ignoreJustification'].label), /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
        value: item.ignoreJustification,
        onChange: function onChange(e) {
          var newOption = _toConsumableArray(formValues.items);
          newOption[index].ignoreJustification = e.target.value;
          setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
            items: newOption
          }));
          handleChange("items.".concat(index, ".ignoreJustification"), e.target.value);
        }
      }), errors && errors["items.".concat(index, ".ignoreJustification")] && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["items.".concat(index, ".ignoreJustification")].message)), /*#__PURE__*/React__default["default"].createElement(designSystem.FormGroup, {
        mb: mb,
        error: errors && errors["items.".concat(index, ".commission")] && errors["items.".concat(index, ".commission")]
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Label, null, resource.properties['items.commission'].label), /*#__PURE__*/React__default["default"].createElement(designSystem.Input, {
        value: item.commission,
        onChange: function onChange(e) {
          var newOption = _toConsumableArray(formValues.items);
          newOption[index].commission = e.target.value;
          setFormValues(_objectSpread2(_objectSpread2({}, formValues), {}, {
            items: newOption
          }));
          handleChange("items.".concat(index, ".commission"), e.target.value);
        }
      }), errors && errors["items.".concat(index, ".commission")] && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors["items.".concat(index, ".commission")].message)))), /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
        flex: true,
        alignSelf: "center",
        justifyContent: "center",
        width: "5%"
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Button, {
        onClick: function onClick(e) {
          return handleDeleteItem(e, index);
        },
        rounded: true,
        size: "icon",
        variant: "danger"
      }, /*#__PURE__*/React__default["default"].createElement(designSystem.Icon, {
        icon: "Delete"
      }))));
    }), /*#__PURE__*/React__default["default"].createElement(designSystem.Button, {
      onClick: handleAddNewItem,
      style: {
        borderRadius: '9999px'
      }
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Icon, {
      icon: "Add"
    }), " Add New Item")), errors && errors.items && /*#__PURE__*/React__default["default"].createElement(designSystem.Text, null, errors.items.message)), /*#__PURE__*/React__default["default"].createElement(adminBro.BasePropertyComponent, {
      where: "edit",
      resource: resource,
      record: record,
      onChange: handleChange,
      property: resource.properties.outreach
    }), /*#__PURE__*/React__default["default"].createElement(adminBro.BasePropertyComponent, {
      where: "edit",
      resource: resource,
      record: record,
      onChange: handleChange,
      property: resource.properties.createdBy
    }), /*#__PURE__*/React__default["default"].createElement(adminBro.BasePropertyComponent, {
      where: "edit",
      resource: resource,
      record: record,
      onChange: handleChange,
      property: resource.properties.updatedAt
    }), /*#__PURE__*/React__default["default"].createElement(adminBro.BasePropertyComponent, {
      where: "edit",
      resource: resource,
      record: record,
      onChange: handleChange,
      property: resource.properties.createdAt
    }), /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      flex: true,
      justifyContent: "center",
      alignItems: "flex-end",
      height: 100,
      width: "100%"
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Button, {
      variant: "primary",
      size: "lg",
      type: "submit"
    }, "Save"))));
  };

  var Custom = function Custom(props) {
    return /*#__PURE__*/React__default["default"].createElement(designSystem.Box, {
      style: {
        display: 'flex',
        flex: 1,
        flexDirection: 'column',
        justifyContent: 'space-evenly'
      }
    }, /*#__PURE__*/React__default["default"].createElement(designSystem.Box, null, /*#__PURE__*/React__default["default"].createElement(designSystem.H1, {
      textAlign: "center"
    }, "Welcome To LinkBuilders"), /*#__PURE__*/React__default["default"].createElement(designSystem.Text, {
      textAlign: "center"
    }, "This is your admin interface you can add and edit your platform users as well as your websites")));
  };

  AdminBro.UserComponents = {};
  AdminBro.UserComponents.Component1 = ApplicationSettingsComponent;
  AdminBro.UserComponents.Component2 = ThirdPartyApiSettingsPage;
  AdminBro.UserComponents.Component3 = message;
  AdminBro.UserComponents.Component4 = Component4;
  AdminBro.UserComponents.Component5 = Component5;
  AdminBro.UserComponents.Component6 = CreateResource;
  AdminBro.UserComponents.Component7 = EditResource;
  AdminBro.UserComponents.Component8 = CreatePermission;
  AdminBro.UserComponents.Component9 = EditPermission;
  AdminBro.UserComponents.Component10 = CreateRole;
  AdminBro.UserComponents.Component11 = EditRole;
  AdminBro.UserComponents.Component12 = CountrySelect;
  AdminBro.UserComponents.Component13 = ShowOrder;
  AdminBro.UserComponents.Component14 = EditOrder;
  AdminBro.UserComponents.Component15 = AddOrder;
  AdminBro.UserComponents.Component16 = Custom;

})(React, AdminBro, AdminBroDesignSystem, ReactSelect, styled, ReactRouter, CarbonIcons);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
